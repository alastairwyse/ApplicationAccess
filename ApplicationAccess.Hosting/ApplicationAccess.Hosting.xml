<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ApplicationAccess.Hosting</name>
    </assembly>
    <members>
        <member name="T:ApplicationAccess.Hosting.AccessManagerTemporalEventBulkPersisterDistributor`4">
            <summary>
            Distributes methods calls syncronously to multiple <see cref="T:ApplicationAccess.Persistence.IAccessManagerTemporalEventBulkPersister`4"/> instances.
            </summary>
            <typeparam name="TUser">The type of users in the IAccessManagerTemporalEventBulkPersister instances.</typeparam>
            <typeparam name="TGroup">The type of groups in the IAccessManagerTemporalEventBulkPersister instances.</typeparam>
            <typeparam name="TComponent">The type of components in the IAccessManagerTemporalEventBulkPersister instances.</typeparam>
            <typeparam name="TAccess">The type of levels of access which can be assigned to a component.</typeparam>
        </member>
        <member name="F:ApplicationAccess.Hosting.AccessManagerTemporalEventBulkPersisterDistributor`4.eventPersisters">
            <summary>Holds the <see cref="T:ApplicationAccess.Persistence.IAccessManagerTemporalEventBulkPersister`4"/> instances to distribute to.</summary>
        </member>
        <member name="M:ApplicationAccess.Hosting.AccessManagerTemporalEventBulkPersisterDistributor`4.#ctor(System.Collections.Generic.IEnumerable{ApplicationAccess.Persistence.IAccessManagerTemporalEventBulkPersister{`0,`1,`2,`3}})">
            <summary>
            Initialises a new instance of the ApplicationAccess.Hosting.AccessManagerTemporalEventBulkPersisterDistributor class.
            </summary>
            <param name="eventPersisters">The <see cref="T:ApplicationAccess.Persistence.IAccessManagerTemporalEventBulkPersister`4"/> instances to distribute to.</param>
        </member>
        <member name="M:ApplicationAccess.Hosting.AccessManagerTemporalEventBulkPersisterDistributor`4.PersistEvents(System.Collections.Generic.IList{ApplicationAccess.Persistence.Models.TemporalEventBufferItemBase})">
            <inheritdoc/>
        </member>
        <member name="T:ApplicationAccess.Hosting.AccessManagerTemporalEventPersisterDistributor`4">
            <summary>
            Distributes methods calls syncronously to multiple <see cref="T:ApplicationAccess.Persistence.IAccessManagerTemporalEventPersister`4"/> instances.
            </summary>
            <typeparam name="TUser">The type of users in the IAccessManagerTemporalEventPersister instances.</typeparam>
            <typeparam name="TGroup">The type of groups in the IAccessManagerTemporalEventPersister instances.</typeparam>
            <typeparam name="TComponent">The type of components in the IAccessManagerTemporalEventPersister instances.</typeparam>
            <typeparam name="TAccess">The type of levels of access which can be assigned to a component.</typeparam>
        </member>
        <member name="F:ApplicationAccess.Hosting.AccessManagerTemporalEventPersisterDistributor`4.guidProvider">
            <summary>The provider to use for random Guids.</summary>
        </member>
        <member name="F:ApplicationAccess.Hosting.AccessManagerTemporalEventPersisterDistributor`4.dateTimeProvider">
            <summary>The provider to use for the current date and time.</summary>
        </member>
        <member name="F:ApplicationAccess.Hosting.AccessManagerTemporalEventPersisterDistributor`4.userHashCodeGenerator">
            <summary>The hash code generator for users.</summary>
        </member>
        <member name="F:ApplicationAccess.Hosting.AccessManagerTemporalEventPersisterDistributor`4.groupHashCodeGenerator">
            <summary>The hash code generator for groups.</summary>
        </member>
        <member name="F:ApplicationAccess.Hosting.AccessManagerTemporalEventPersisterDistributor`4.entityTypeHashCodeGenerator">
            <summary>The hash code generator for entity types.</summary>
        </member>
        <member name="F:ApplicationAccess.Hosting.AccessManagerTemporalEventPersisterDistributor`4.eventPersisters">
            <summary>Holds the <see cref="T:ApplicationAccess.Persistence.IAccessManagerTemporalEventPersister`4"/> instances to distribute to.</summary>
        </member>
        <member name="M:ApplicationAccess.Hosting.AccessManagerTemporalEventPersisterDistributor`4.#ctor(ApplicationAccess.Utilities.IHashCodeGenerator{`0},ApplicationAccess.Utilities.IHashCodeGenerator{`1},ApplicationAccess.Utilities.IHashCodeGenerator{System.String},System.Collections.Generic.IEnumerable{ApplicationAccess.Persistence.IAccessManagerTemporalEventPersister{`0,`1,`2,`3}})">
            <summary>
            Initialises a new instance of the ApplicationAccess.Hosting.AccessManagerTemporalEventPersisterDistributor class.
            </summary>
            <param name="userHashCodeGenerator">The hash code generator for users.</param>
            <param name="groupHashCodeGenerator">The hash code generator for groups.</param>
            <param name="entityTypeHashCodeGenerator">The hash code generator for entity types.</param>
            <param name="eventPersisters">The <see cref="T:ApplicationAccess.Persistence.IAccessManagerTemporalEventPersister`4"/> instances to distribute to.</param>
        </member>
        <member name="M:ApplicationAccess.Hosting.AccessManagerTemporalEventPersisterDistributor`4.#ctor(ApplicationAccess.Utilities.IHashCodeGenerator{`0},ApplicationAccess.Utilities.IHashCodeGenerator{`1},ApplicationAccess.Utilities.IHashCodeGenerator{System.String},System.Collections.Generic.IEnumerable{ApplicationAccess.Persistence.IAccessManagerTemporalEventPersister{`0,`1,`2,`3}},ApplicationAccess.Utilities.IGuidProvider,ApplicationAccess.Utilities.IDateTimeProvider)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Hosting.AccessManagerTemporalEventPersisterDistributor class.
            </summary>
            <param name="userHashCodeGenerator">The hash code generator for users.</param>
            <param name="groupHashCodeGenerator">The hash code generator for groups.</param>
            <param name="entityTypeHashCodeGenerator">The hash code generator for entity types.</param>
            <param name="eventPersisters">The <see cref="T:ApplicationAccess.Persistence.IAccessManagerTemporalEventPersister`4"/> instances to distribute to.</param>
            <param name="guidProvider">The provider to use for random Guids.</param>
            <param name="dateTimeProvider">The provider to use for the current date and time.</param>
            <remarks>This constructor is included to facilitate unit testing.</remarks>
        </member>
        <member name="M:ApplicationAccess.Hosting.AccessManagerTemporalEventPersisterDistributor`4.AddUser(`0)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.AccessManagerTemporalEventPersisterDistributor`4.RemoveUser(`0)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.AccessManagerTemporalEventPersisterDistributor`4.AddGroup(`1)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.AccessManagerTemporalEventPersisterDistributor`4.RemoveGroup(`1)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.AccessManagerTemporalEventPersisterDistributor`4.AddUserToGroupMapping(`0,`1)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.AccessManagerTemporalEventPersisterDistributor`4.RemoveUserToGroupMapping(`0,`1)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.AccessManagerTemporalEventPersisterDistributor`4.AddGroupToGroupMapping(`1,`1)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.AccessManagerTemporalEventPersisterDistributor`4.RemoveGroupToGroupMapping(`1,`1)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.AccessManagerTemporalEventPersisterDistributor`4.AddUserToApplicationComponentAndAccessLevelMapping(`0,`2,`3)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.AccessManagerTemporalEventPersisterDistributor`4.RemoveUserToApplicationComponentAndAccessLevelMapping(`0,`2,`3)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.AccessManagerTemporalEventPersisterDistributor`4.AddGroupToApplicationComponentAndAccessLevelMapping(`1,`2,`3)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.AccessManagerTemporalEventPersisterDistributor`4.RemoveGroupToApplicationComponentAndAccessLevelMapping(`1,`2,`3)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.AccessManagerTemporalEventPersisterDistributor`4.AddEntityType(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.AccessManagerTemporalEventPersisterDistributor`4.RemoveEntityType(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.AccessManagerTemporalEventPersisterDistributor`4.AddEntity(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.AccessManagerTemporalEventPersisterDistributor`4.RemoveEntity(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.AccessManagerTemporalEventPersisterDistributor`4.AddUserToEntityMapping(`0,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.AccessManagerTemporalEventPersisterDistributor`4.RemoveUserToEntityMapping(`0,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.AccessManagerTemporalEventPersisterDistributor`4.AddGroupToEntityMapping(`1,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.AccessManagerTemporalEventPersisterDistributor`4.RemoveGroupToEntityMapping(`1,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.AccessManagerTemporalEventPersisterDistributor`4.AddUser(`0,System.Guid,System.DateTime,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.AccessManagerTemporalEventPersisterDistributor`4.RemoveUser(`0,System.Guid,System.DateTime,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.AccessManagerTemporalEventPersisterDistributor`4.AddGroup(`1,System.Guid,System.DateTime,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.AccessManagerTemporalEventPersisterDistributor`4.RemoveGroup(`1,System.Guid,System.DateTime,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.AccessManagerTemporalEventPersisterDistributor`4.AddUserToGroupMapping(`0,`1,System.Guid,System.DateTime,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.AccessManagerTemporalEventPersisterDistributor`4.RemoveUserToGroupMapping(`0,`1,System.Guid,System.DateTime,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.AccessManagerTemporalEventPersisterDistributor`4.AddGroupToGroupMapping(`1,`1,System.Guid,System.DateTime,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.AccessManagerTemporalEventPersisterDistributor`4.RemoveGroupToGroupMapping(`1,`1,System.Guid,System.DateTime,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.AccessManagerTemporalEventPersisterDistributor`4.AddUserToApplicationComponentAndAccessLevelMapping(`0,`2,`3,System.Guid,System.DateTime,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.AccessManagerTemporalEventPersisterDistributor`4.RemoveUserToApplicationComponentAndAccessLevelMapping(`0,`2,`3,System.Guid,System.DateTime,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.AccessManagerTemporalEventPersisterDistributor`4.AddGroupToApplicationComponentAndAccessLevelMapping(`1,`2,`3,System.Guid,System.DateTime,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.AccessManagerTemporalEventPersisterDistributor`4.RemoveGroupToApplicationComponentAndAccessLevelMapping(`1,`2,`3,System.Guid,System.DateTime,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.AccessManagerTemporalEventPersisterDistributor`4.AddEntityType(System.String,System.Guid,System.DateTime,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.AccessManagerTemporalEventPersisterDistributor`4.RemoveEntityType(System.String,System.Guid,System.DateTime,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.AccessManagerTemporalEventPersisterDistributor`4.AddEntity(System.String,System.String,System.Guid,System.DateTime,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.AccessManagerTemporalEventPersisterDistributor`4.RemoveEntity(System.String,System.String,System.Guid,System.DateTime,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.AccessManagerTemporalEventPersisterDistributor`4.AddUserToEntityMapping(`0,System.String,System.String,System.Guid,System.DateTime,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.AccessManagerTemporalEventPersisterDistributor`4.RemoveUserToEntityMapping(`0,System.String,System.String,System.Guid,System.DateTime,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.AccessManagerTemporalEventPersisterDistributor`4.AddGroupToEntityMapping(`1,System.String,System.String,System.Guid,System.DateTime,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.AccessManagerTemporalEventPersisterDistributor`4.RemoveGroupToEntityMapping(`1,System.String,System.String,System.Guid,System.DateTime,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:ApplicationAccess.Hosting.DependencyFreeReaderWriterNode`4">
            <summary>
            A node in a single-reader, single-writer ApplicationAccess hosting environment which handles both reading and writing of permissions and authorizations for an application, and supports the features described in the <see cref="T:ApplicationAccess.DependencyFreeAccessManager`4"/> documentation (idempotency etc...).
            </summary>
            <typeparam name="TUser">The type of users in the application.</typeparam>
            <typeparam name="TGroup">The type of groups in the application.</typeparam>
            <typeparam name="TComponent">The type of components in the application to manage access to.</typeparam>
            <typeparam name="TAccess">The type of levels of access which can be assigned to an application component.</typeparam>
            <remarks>Note that as per remarks for <see cref="T:ApplicationAccess.Metrics.MetricLoggingDependencyFreeAccessManager`4"/> interval metrics are not logged for <see cref="T:ApplicationAccess.IAccessManagerQueryProcessor`4"/> methods that return <see cref="T:System.Collections.Generic.IEnumerable`1"/>, or perform simple dictionary and set lookups (e.g. <see cref="M:ApplicationAccess.Metrics.MetricLoggingDependencyFreeAccessManager`4.ContainsUser(`0)">ContainsUser()</see>).  If these metrics are required, they must be logged outside of this class.  In the case of methods that return <see cref="T:System.Collections.Generic.IEnumerable`1"/> the metric logging must wrap the code that enumerates the result.</remarks>
        </member>
        <member name="M:ApplicationAccess.Hosting.DependencyFreeReaderWriterNode`4.#ctor(ApplicationAccess.Utilities.IHashCodeGenerator{`0},ApplicationAccess.Utilities.IHashCodeGenerator{`1},ApplicationAccess.Utilities.IHashCodeGenerator{System.String},ApplicationAccess.Persistence.IAccessManagerEventBufferFlushStrategy,ApplicationAccess.Persistence.IAccessManagerTemporalPersistentReader{`0,`1,`2,`3},ApplicationAccess.Persistence.IAccessManagerTemporalEventBulkPersister{`0,`1,`2,`3})">
            <summary>
            Initialises a new instance of the ApplicationAccess.Hosting.DependencyFreeReaderWriterNode class.
            </summary>
            <param name="userHashCodeGenerator">The hash code generator for users.</param>
            <param name="groupHashCodeGenerator">The hash code generator for groups.</param>
            <param name="entityTypeHashCodeGenerator">The hash code generator for entity types.</param>
            <param name="eventBufferFlushStrategy">Flush strategy for the <see cref="T:ApplicationAccess.Persistence.IAccessManagerEventBuffer`4"/> instance used by the node.</param>
            <param name="persistentReader">Used to load the complete state of the AccessManager instance.</param>
            <param name="eventPersister">Used to persist changes to the AccessManager.</param>
        </member>
        <member name="M:ApplicationAccess.Hosting.DependencyFreeReaderWriterNode`4.#ctor(ApplicationAccess.Utilities.IHashCodeGenerator{`0},ApplicationAccess.Utilities.IHashCodeGenerator{`1},ApplicationAccess.Utilities.IHashCodeGenerator{System.String},ApplicationAccess.Persistence.IAccessManagerEventBufferFlushStrategy,ApplicationAccess.Persistence.IAccessManagerTemporalPersistentReader{`0,`1,`2,`3},ApplicationAccess.Persistence.IAccessManagerTemporalEventBulkPersister{`0,`1,`2,`3},ApplicationMetrics.IMetricLogger)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Hosting.DependencyFreeReaderWriterNode class.
            </summary>
            <param name="userHashCodeGenerator">The hash code generator for users.</param>
            <param name="groupHashCodeGenerator">The hash code generator for groups.</param>
            <param name="entityTypeHashCodeGenerator">The hash code generator for entity types.</param>
            <param name="eventBufferFlushStrategy">Flush strategy for the <see cref="T:ApplicationAccess.Persistence.IAccessManagerEventBuffer`4"/> instance used by the node.</param>
            <param name="persistentReader">Used to load the complete state of the AccessManager instance.</param>
            <param name="eventPersister">Used to persist changes to the AccessManager.</param>
            <param name="metricLogger">The logger for metrics.</param>
        </member>
        <member name="M:ApplicationAccess.Hosting.DependencyFreeReaderWriterNode`4.InitializeAccessManager">
            <inheritdoc/>
        </member>
        <member name="T:ApplicationAccess.Hosting.DistributedOperationCoordinatorNode`2">
            <summary>
            A node which coordinates operations in an AccessManager implementation where responsibility for subsets of elements is distributed across multiple computers in shards.
            </summary>
            <typeparam name="TClientConfiguration">The type of AccessManager client configuration used to create clients to connect to the shards.</typeparam>
            <typeparam name="TClientConfigurationJsonSerializer">An implementation of <see cref="T:ApplicationAccess.Distribution.Serialization.IDistributedAccessManagerAsyncClientConfigurationJsonSerializer`1"/> which serializes <typeparamref name="TClientConfiguration"/> instances.</typeparam>
        </member>
        <member name="F:ApplicationAccess.Hosting.DistributedOperationCoordinatorNode`2.shardClientManager">
            <summary>Manages the clients used to connect to shards managing the subsets of elements in the distributed access manager implementation.</summary>
        </member>
        <member name="F:ApplicationAccess.Hosting.DistributedOperationCoordinatorNode`2.shardConfigurationRefreshStrategy">
            <summary>The strategy/methodology to use to refresh the shard configuration.</summary>
        </member>
        <member name="F:ApplicationAccess.Hosting.DistributedOperationCoordinatorNode`2.distributedOperationCoordinator">
            <summary>The <see cref="T:ApplicationAccess.Distribution.IDistributedAccessManagerOperationCoordinator`1"/> instance which processes any operations received by the node.</summary>
        </member>
        <member name="F:ApplicationAccess.Hosting.DistributedOperationCoordinatorNode`2.shardConfigurationSetPersister">
            <summary>Implementation of <see cref="T:ApplicationAccess.Distribution.Persistence.IShardConfigurationSetPersister`2"/> used to read shard configuration from persistent storage.</summary>
        </member>
        <member name="F:ApplicationAccess.Hosting.DistributedOperationCoordinatorNode`2.shardConfigurationRefreshedEventHandler">
            <summary>The delegate which handles a <see cref="E:ApplicationAccess.Hosting.IDistributedOperationCoordinatorNodeShardConfigurationRefreshStrategy.ShardConfigurationRefreshed">ShardConfigurationRefreshed</see> event.</summary>
        </member>
        <member name="F:ApplicationAccess.Hosting.DistributedOperationCoordinatorNode`2.disposed">
            <summary>Indicates whether the object has been disposed.</summary>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationCoordinatorNode`2.#ctor(ApplicationAccess.Distribution.IShardClientManager{`0},ApplicationAccess.Hosting.IDistributedOperationCoordinatorNodeShardConfigurationRefreshStrategy,ApplicationAccess.Distribution.IDistributedAccessManagerOperationCoordinator{`0},ApplicationAccess.Distribution.Persistence.IShardConfigurationSetPersister{`0,`1})">
            <summary>
            Initialises a new instance of the ApplicationAccess.Hosting.DistributedOperationCoordinatorNode class.
            </summary>
            <param name="shardClientManager">Manages the clients used to connect to shards managing the subsets of elements in the distributed access manager implementation.</param>
            <param name="shardConfigurationRefreshStrategy">The strategy/methodology to use to refresh the shard configuration.</param>
            <param name="distributedOperationCoordinator">The <see cref="T:ApplicationAccess.Distribution.IDistributedAccessManagerOperationCoordinator`1"/> instance which processes any operations received by the node.</param>
            <param name="shardConfigurationSetPersister">Implementation of <see cref="T:ApplicationAccess.Distribution.Persistence.IShardConfigurationSetPersister`2"/> used to read shard configuration from persistent storage.</param>
            <remarks>The shard client manager in parameter <paramref name="shardClientManager"/> must be the same instance used by the distributed operation coordinator in parameter <paramref name="distributedOperationCoordinator"/>.</remarks>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationCoordinatorNode`2.GetUsersAsync">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationCoordinatorNode`2.GetGroupsAsync">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationCoordinatorNode`2.GetEntityTypesAsync">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationCoordinatorNode`2.AddUserAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationCoordinatorNode`2.ContainsUserAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationCoordinatorNode`2.RemoveUserAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationCoordinatorNode`2.AddGroupAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationCoordinatorNode`2.ContainsGroupAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationCoordinatorNode`2.RemoveGroupAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationCoordinatorNode`2.AddUserToGroupMappingAsync(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationCoordinatorNode`2.GetUserToGroupMappingsAsync(System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationCoordinatorNode`2.GetGroupToUserMappingsAsync(System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationCoordinatorNode`2.RemoveUserToGroupMappingAsync(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationCoordinatorNode`2.AddGroupToGroupMappingAsync(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationCoordinatorNode`2.GetGroupToGroupMappingsAsync(System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationCoordinatorNode`2.GetGroupToGroupReverseMappingsAsync(System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationCoordinatorNode`2.RemoveGroupToGroupMappingAsync(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationCoordinatorNode`2.AddUserToApplicationComponentAndAccessLevelMappingAsync(System.String,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationCoordinatorNode`2.GetUserToApplicationComponentAndAccessLevelMappingsAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationCoordinatorNode`2.GetApplicationComponentAndAccessLevelToUserMappingsAsync(System.String,System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationCoordinatorNode`2.RemoveUserToApplicationComponentAndAccessLevelMappingAsync(System.String,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationCoordinatorNode`2.AddGroupToApplicationComponentAndAccessLevelMappingAsync(System.String,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationCoordinatorNode`2.GetGroupToApplicationComponentAndAccessLevelMappingsAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationCoordinatorNode`2.GetApplicationComponentAndAccessLevelToGroupMappingsAsync(System.String,System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationCoordinatorNode`2.RemoveGroupToApplicationComponentAndAccessLevelMappingAsync(System.String,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationCoordinatorNode`2.AddEntityTypeAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationCoordinatorNode`2.ContainsEntityTypeAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationCoordinatorNode`2.RemoveEntityTypeAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationCoordinatorNode`2.AddEntityAsync(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationCoordinatorNode`2.GetEntitiesAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationCoordinatorNode`2.ContainsEntityAsync(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationCoordinatorNode`2.RemoveEntityAsync(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationCoordinatorNode`2.AddUserToEntityMappingAsync(System.String,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationCoordinatorNode`2.GetUserToEntityMappingsAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationCoordinatorNode`2.GetUserToEntityMappingsAsync(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationCoordinatorNode`2.GetEntityToUserMappingsAsync(System.String,System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationCoordinatorNode`2.RemoveUserToEntityMappingAsync(System.String,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationCoordinatorNode`2.AddGroupToEntityMappingAsync(System.String,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationCoordinatorNode`2.GetGroupToEntityMappingsAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationCoordinatorNode`2.GetGroupToEntityMappingsAsync(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationCoordinatorNode`2.GetEntityToGroupMappingsAsync(System.String,System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationCoordinatorNode`2.RemoveGroupToEntityMappingAsync(System.String,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationCoordinatorNode`2.HasAccessToApplicationComponentAsync(System.String,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationCoordinatorNode`2.HasAccessToEntityAsync(System.String,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationCoordinatorNode`2.GetApplicationComponentsAccessibleByUserAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationCoordinatorNode`2.GetApplicationComponentsAccessibleByGroupAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationCoordinatorNode`2.GetEntitiesAccessibleByUserAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationCoordinatorNode`2.GetEntitiesAccessibleByUserAsync(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationCoordinatorNode`2.GetEntitiesAccessibleByGroupAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationCoordinatorNode`2.GetEntitiesAccessibleByGroupAsync(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationCoordinatorNode`2.RefreshShardConfiguration">
            <summary>
            Refreshes the shard configuration with the configuration currently in persistent storage.
            </summary>
            <exception cref="T:ApplicationAccess.Distribution.ShardConfigurationRefreshException">An error occurred whilst refreshing the shard configuration.</exception>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationCoordinatorNode`2.Dispose">
            <summary>
            Releases the unmanaged resources used by the DistributedOperationCoordinatorNode.
            </summary>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationCoordinatorNode`2.Dispose(System.Boolean)">
            <summary>
            Provides a method to free unmanaged resources used by this class.
            </summary>
            <param name="disposing">Whether the method is being called as part of an explicit Dispose routine, and hence whether managed resources should also be freed.</param>
        </member>
        <member name="T:ApplicationAccess.Hosting.DistributedOperationRouterNode`1">
            <summary>
            A node which operations to two sets of shards in a distributed AccessManager implementation, and aggregates and returns their results.
            </summary>
            <typeparam name="TClientConfiguration">The type of AccessManager client configuration used to create clients to connect to the shards.</typeparam>
        </member>
        <member name="F:ApplicationAccess.Hosting.DistributedOperationRouterNode`1.distributedOperationRouter">
            <summary>The <see cref="T:ApplicationAccess.Distribution.IDistributedAccessManagerOperationRouter"/> instance which processes relevant operations received by the node.</summary>
        </member>
        <member name="P:ApplicationAccess.Hosting.DistributedOperationRouterNode`1.RoutingOn">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationRouterNode`1.#ctor(ApplicationAccess.Distribution.IDistributedAccessManagerOperationRouter)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Hosting.DistributedOperationRouterNode class.
            </summary>
            <param name="distributedOperationRouter">The <see cref="T:ApplicationAccess.Distribution.IDistributedAccessManagerOperationRouter"/> instance which processes relevant operations received by the node.</param>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationRouterNode`1.GetUsersAsync">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationRouterNode`1.GetGroupsAsync">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationRouterNode`1.GetEntityTypesAsync">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationRouterNode`1.AddUserAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationRouterNode`1.ContainsUserAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationRouterNode`1.RemoveUserAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationRouterNode`1.AddGroupAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationRouterNode`1.ContainsGroupAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationRouterNode`1.RemoveGroupAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationRouterNode`1.AddUserToGroupMappingAsync(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationRouterNode`1.GetUserToGroupMappingsAsync(System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationRouterNode`1.GetGroupToUserMappingsAsync(System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationRouterNode`1.GetGroupToUserMappingsAsync(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationRouterNode`1.RemoveUserToGroupMappingAsync(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationRouterNode`1.AddGroupToGroupMappingAsync(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationRouterNode`1.GetGroupToGroupMappingsAsync(System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationRouterNode`1.GetGroupToGroupMappingsAsync(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationRouterNode`1.GetGroupToGroupReverseMappingsAsync(System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationRouterNode`1.GetGroupToGroupReverseMappingsAsync(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationRouterNode`1.RemoveGroupToGroupMappingAsync(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationRouterNode`1.AddUserToApplicationComponentAndAccessLevelMappingAsync(System.String,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationRouterNode`1.GetUserToApplicationComponentAndAccessLevelMappingsAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationRouterNode`1.GetApplicationComponentAndAccessLevelToUserMappingsAsync(System.String,System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationRouterNode`1.RemoveUserToApplicationComponentAndAccessLevelMappingAsync(System.String,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationRouterNode`1.AddGroupToApplicationComponentAndAccessLevelMappingAsync(System.String,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationRouterNode`1.GetGroupToApplicationComponentAndAccessLevelMappingsAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationRouterNode`1.GetApplicationComponentAndAccessLevelToGroupMappingsAsync(System.String,System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationRouterNode`1.RemoveGroupToApplicationComponentAndAccessLevelMappingAsync(System.String,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationRouterNode`1.AddEntityTypeAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationRouterNode`1.ContainsEntityTypeAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationRouterNode`1.RemoveEntityTypeAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationRouterNode`1.AddEntityAsync(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationRouterNode`1.GetEntitiesAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationRouterNode`1.ContainsEntityAsync(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationRouterNode`1.RemoveEntityAsync(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationRouterNode`1.AddUserToEntityMappingAsync(System.String,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationRouterNode`1.GetUserToEntityMappingsAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationRouterNode`1.GetUserToEntityMappingsAsync(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationRouterNode`1.GetEntityToUserMappingsAsync(System.String,System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationRouterNode`1.RemoveUserToEntityMappingAsync(System.String,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationRouterNode`1.AddGroupToEntityMappingAsync(System.String,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationRouterNode`1.GetGroupToEntityMappingsAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationRouterNode`1.GetGroupToEntityMappingsAsync(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationRouterNode`1.GetEntityToGroupMappingsAsync(System.String,System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationRouterNode`1.RemoveGroupToEntityMappingAsync(System.String,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationRouterNode`1.HasAccessToApplicationComponentAsync(System.String,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationRouterNode`1.HasAccessToApplicationComponentAsync(System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationRouterNode`1.HasAccessToEntityAsync(System.String,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationRouterNode`1.HasAccessToEntityAsync(System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationRouterNode`1.GetApplicationComponentsAccessibleByUserAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationRouterNode`1.GetApplicationComponentsAccessibleByGroupAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationRouterNode`1.GetApplicationComponentsAccessibleByGroupsAsync(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationRouterNode`1.GetEntitiesAccessibleByUserAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationRouterNode`1.GetEntitiesAccessibleByUserAsync(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationRouterNode`1.GetEntitiesAccessibleByGroupAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationRouterNode`1.GetEntitiesAccessibleByGroupsAsync(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationRouterNode`1.GetEntitiesAccessibleByGroupAsync(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationRouterNode`1.GetEntitiesAccessibleByGroupsAsync(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationRouterNode`1.PauseOperations">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedOperationRouterNode`1.ResumeOperations">
            <inheritdoc/>
        </member>
        <member name="T:ApplicationAccess.Hosting.DistributedReaderNode`4">
            <summary>
            A node in a distributed ApplicationAccess hosting environment which allows reading permissions and authorizations for an application.
            </summary>
            <typeparam name="TUser">The type of users in the application.</typeparam>
            <typeparam name="TGroup">The type of groups in the application.</typeparam>
            <typeparam name="TComponent">The type of components in the application to manage access to.</typeparam>
            <typeparam name="TAccess">The type of levels of access which can be assigned to an application component.</typeparam>
            <remarks>Note that as per remarks for <see cref="T:ApplicationAccess.Metrics.MetricLoggingConcurrentAccessManager`4"/> interval metrics are not logged for <see cref="T:ApplicationAccess.IAccessManagerQueryProcessor`4"/> methods that return <see cref="T:System.Collections.Generic.IEnumerable`1"/>, or perform simple dictionary and set lookups (e.g. <see cref="M:ApplicationAccess.Metrics.MetricLoggingConcurrentAccessManager`4.ContainsUser(`0)">ContainsUser()</see>).  If these metrics are required, they must be logged outside of this class.  In the case of methods that return <see cref="T:System.Collections.Generic.IEnumerable`1"/> the metric logging must wrap the code that enumerates the result.</remarks>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedReaderNode`4.#ctor(ApplicationAccess.Hosting.IReaderNodeRefreshStrategy,ApplicationAccess.Persistence.IAccessManagerTemporalEventQueryProcessor{`0,`1,`2,`3},ApplicationAccess.Persistence.IAccessManagerTemporalPersistentReader{`0,`1,`2,`3})">
            <summary>
            Initialises a new instance of the ApplicationAccess.Hosting.DistributedReaderNode class.
            </summary>
            <param name="refreshStrategy">The strategy/methodology to use to refresh the contents of the reader node.</param>
            <param name="eventCache">Cache for events which change the <see cref="T:ApplicationAccess.IAccessManager`4"/> being hosted.</param>
            <param name="persistentReader">Reader which allows retriving the complete state of the <see cref="T:ApplicationAccess.IAccessManager`4"/> being hosted from persistent storage.</param>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedReaderNode`4.#ctor(ApplicationAccess.Hosting.IReaderNodeRefreshStrategy,ApplicationAccess.Persistence.IAccessManagerTemporalEventQueryProcessor{`0,`1,`2,`3},ApplicationAccess.Persistence.IAccessManagerTemporalPersistentReader{`0,`1,`2,`3},ApplicationMetrics.IMetricLogger)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Hosting.DistributedReaderNode class.
            </summary>
            <param name="refreshStrategy">The strategy/methodology to use to refresh the contents of the reader node.</param>
            <param name="eventCache">Cache for events which change the <see cref="T:ApplicationAccess.IAccessManager`4"/> being hosted.</param>
            <param name="persistentReader">Reader which allows retriving the complete state of the <see cref="T:ApplicationAccess.IAccessManager`4"/> being hosted from persistent storage.</param>
            <param name="metricLogger">The logger for metrics.</param>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedReaderNode`4.#ctor(ApplicationAccess.Hosting.IReaderNodeRefreshStrategy,ApplicationAccess.Persistence.IAccessManagerTemporalEventQueryProcessor{`0,`1,`2,`3},ApplicationAccess.Persistence.IAccessManagerTemporalPersistentReader{`0,`1,`2,`3},ApplicationMetrics.IMetricLogger,ApplicationAccess.Utilities.IDateTimeProvider)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Hosting.DistributedReaderNode class.
            </summary>
            <param name="refreshStrategy">The strategy/methodology to use to refresh the contents of the reader node.</param>
            <param name="eventCache">Cache for events which change the <see cref="T:ApplicationAccess.IAccessManager`4"/> being hosted.</param>
            <param name="persistentReader">Reader which allows retriving the complete state of the <see cref="T:ApplicationAccess.IAccessManager`4"/> being hosted from persistent storage.</param>
            <param name="metricLogger">The logger for metrics.</param>
            <param name="dateTimeProvider">The provider to use for the current date and time.</param>
            <remarks>This constructor is included to facilitate unit testing.</remarks>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedReaderNode`4.GetGroupToUserMappings(System.Collections.Generic.IEnumerable{`1})">
            <inheritdoc/>
            <exception cref="T:ApplicationAccess.Hosting.ReaderNodeRefreshException">An exception occurred whilst attempting to refresh/update the reader node.</exception>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedReaderNode`4.GetGroupToGroupMappings(System.Collections.Generic.IEnumerable{`1})">
            <inheritdoc/>
            <exception cref="T:ApplicationAccess.Hosting.ReaderNodeRefreshException">An exception occurred whilst attempting to refresh/update the reader node.</exception>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedReaderNode`4.GetGroupToGroupReverseMappings(System.Collections.Generic.IEnumerable{`1})">
            <inheritdoc/>
            <exception cref="T:ApplicationAccess.Hosting.ReaderNodeRefreshException">An exception occurred whilst attempting to refresh/update the reader node.</exception>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedReaderNode`4.HasAccessToApplicationComponent(System.Collections.Generic.IEnumerable{`1},`2,`3)">
            <inheritdoc/>
            <exception cref="T:ApplicationAccess.Hosting.ReaderNodeRefreshException">An exception occurred whilst attempting to refresh/update the reader node.</exception>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedReaderNode`4.HasAccessToEntity(System.Collections.Generic.IEnumerable{`1},System.String,System.String)">
            <inheritdoc/>
            <exception cref="T:ApplicationAccess.Hosting.ReaderNodeRefreshException">An exception occurred whilst attempting to refresh/update the reader node.</exception>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedReaderNode`4.GetApplicationComponentsAccessibleByGroups(System.Collections.Generic.IEnumerable{`1})">
            <inheritdoc/>
            <exception cref="T:ApplicationAccess.Hosting.ReaderNodeRefreshException">An exception occurred whilst attempting to refresh/update the reader node.</exception>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedReaderNode`4.GetEntitiesAccessibleByGroups(System.Collections.Generic.IEnumerable{`1})">
            <inheritdoc/>
            <exception cref="T:ApplicationAccess.Hosting.ReaderNodeRefreshException">An exception occurred whilst attempting to refresh/update the reader node.</exception>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedReaderNode`4.GetEntitiesAccessibleByGroups(System.Collections.Generic.IEnumerable{`1},System.String)">
            <inheritdoc/>
            <exception cref="T:ApplicationAccess.Hosting.ReaderNodeRefreshException">An exception occurred whilst attempting to refresh/update the reader node.</exception>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedReaderNode`4.InitializeAccessManager">
            <inheritdoc/>
        </member>
        <member name="T:ApplicationAccess.Hosting.DistributedWriterNode`4">
            <summary>
            A node in a distributed ApplicationAccess hosting environment which allows writing permissions and authorizations for an application.
            </summary>
            <typeparam name="TUser">The type of users in the application.</typeparam>
            <typeparam name="TGroup">The type of groups in the application.</typeparam>
            <typeparam name="TComponent">The type of components in the application to manage access to.</typeparam>
            <typeparam name="TAccess">The type of levels of access which can be assigned to an application component.</typeparam>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedWriterNode`4.#ctor(ApplicationAccess.Utilities.IHashCodeGenerator{`0},ApplicationAccess.Utilities.IHashCodeGenerator{`1},ApplicationAccess.Utilities.IHashCodeGenerator{System.String},ApplicationAccess.Persistence.IAccessManagerEventBufferFlushStrategy,ApplicationAccess.Persistence.IAccessManagerTemporalPersistentReader{`0,`1,`2,`3},ApplicationAccess.Persistence.IAccessManagerTemporalEventBulkPersister{`0,`1,`2,`3},ApplicationAccess.Persistence.IAccessManagerTemporalEventBulkPersister{`0,`1,`2,`3})">
            <summary>
            Initialises a new instance of the ApplicationAccess.Hosting.DistributedWriterNode class.
            </summary>
            <param name="userHashCodeGenerator">The hash code generator for users.</param>
            <param name="groupHashCodeGenerator">The hash code generator for groups.</param>
            <param name="entityTypeHashCodeGenerator">The hash code generator for entity types.</param>
            <param name="eventBufferFlushStrategy">Flush strategy for the <see cref="T:ApplicationAccess.Persistence.IAccessManagerEventBuffer`4"/> instance used by the node.</param>
            <param name="persistentReader">Used to load the complete state of the AccessManager instance.</param>
            <param name="eventPersister">Used to persist changes to the AccessManager.</param>
            <param name="eventCache">Cache for events which change the AccessManager.</param>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedWriterNode`4.#ctor(ApplicationAccess.Utilities.IHashCodeGenerator{`0},ApplicationAccess.Utilities.IHashCodeGenerator{`1},ApplicationAccess.Utilities.IHashCodeGenerator{System.String},ApplicationAccess.Persistence.IAccessManagerEventBufferFlushStrategy,ApplicationAccess.Persistence.IAccessManagerTemporalPersistentReader{`0,`1,`2,`3},ApplicationAccess.Persistence.IAccessManagerTemporalEventBulkPersister{`0,`1,`2,`3},ApplicationAccess.Persistence.IAccessManagerTemporalEventBulkPersister{`0,`1,`2,`3},ApplicationMetrics.IMetricLogger)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Hosting.DistributedWriterNode class.
            </summary>
            <param name="userHashCodeGenerator">The hash code generator for users.</param>
            <param name="groupHashCodeGenerator">The hash code generator for groups.</param>
            <param name="entityTypeHashCodeGenerator">The hash code generator for entity types.</param>
            <param name="eventBufferFlushStrategy">Flush strategy for the <see cref="T:ApplicationAccess.Persistence.IAccessManagerEventBuffer`4"/> instance used by the node.</param>
            <param name="persistentReader">Used to load the complete state of the AccessManager instance.</param>
            <param name="eventPersister">Used to persist changes to the AccessManager.</param>
            <param name="eventCache">Cache for events which change the AccessManager.</param>
            <param name="metricLogger">The logger for metrics.</param>
        </member>
        <member name="M:ApplicationAccess.Hosting.DistributedWriterNode`4.InitializeAccessManager">
            <inheritdoc/>
        </member>
        <member name="T:ApplicationAccess.Hosting.IDistributedOperationCoordinatorNodeShardConfigurationRefreshStrategy">
            <summary>
            Defines a strategy/methodology for refreshing/updating the shard configuration in a <see cref="T:ApplicationAccess.Hosting.DistributedOperationCoordinatorNode`2"/>.
            </summary>
        </member>
        <member name="E:ApplicationAccess.Hosting.IDistributedOperationCoordinatorNodeShardConfigurationRefreshStrategy.ShardConfigurationRefreshed">
            <summary>Occurs when the shard configuration is refreshed/updated.</summary>
        </member>
        <member name="T:ApplicationAccess.Hosting.IReaderNodeRefreshStrategy">
            <summary>
            Defines a strategy/methodology for refreshing/updating the contents of a <see cref="T:ApplicationAccess.Hosting.ReaderNode`4"/>.
            </summary>
        </member>
        <member name="E:ApplicationAccess.Hosting.IReaderNodeRefreshStrategy.ReaderNodeRefreshed">
            <summary>Occurs when the contents of the reader node are updated to reflect the latest changes/updates to the system.</summary>
        </member>
        <member name="T:ApplicationAccess.Hosting.LoopingWorkerThreadDistributedOperationCoordinatorNodeShardConfigurationRefreshStrategy">
            <summary>
            A distributed operation coordinator node shard configuration refresh strategy that refreshes/updates the shard configuration at a regular interval, using a worker thread.
            </summary>
        </member>
        <member name="F:ApplicationAccess.Hosting.LoopingWorkerThreadDistributedOperationCoordinatorNodeShardConfigurationRefreshStrategy.shardConfigurationRefreshWorkerThread">
            <summary>Worker thread which implements the strategy to refresh the shard configuration.</summary>
        </member>
        <member name="F:ApplicationAccess.Hosting.LoopingWorkerThreadDistributedOperationCoordinatorNodeShardConfigurationRefreshStrategy.refreshExceptionAction">
            <summary>An action to invoke if an error occurs when refreshing the shard configuration.  Accepts a single parameter which is the <see cref="T:ApplicationAccess.Distribution.ShardConfigurationRefreshException"/> containing details of the error.</summary>
        </member>
        <member name="F:ApplicationAccess.Hosting.LoopingWorkerThreadDistributedOperationCoordinatorNodeShardConfigurationRefreshStrategy.refreshLoopInterval">
            <summary>The time to wait (in milliseconds) between shard configuration refreshes.</summary>
        </member>
        <member name="F:ApplicationAccess.Hosting.LoopingWorkerThreadDistributedOperationCoordinatorNodeShardConfigurationRefreshStrategy.stopMethodCalled">
            <summary>Whether request to stop the worker thread has been received via the Stop() method.</summary>
        </member>
        <member name="E:ApplicationAccess.Hosting.LoopingWorkerThreadDistributedOperationCoordinatorNodeShardConfigurationRefreshStrategy.ShardConfigurationRefreshed">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.LoopingWorkerThreadDistributedOperationCoordinatorNodeShardConfigurationRefreshStrategy.#ctor(System.Int32,System.Action{ApplicationAccess.Distribution.ShardConfigurationRefreshException})">
            <summary>
            Initialises a new instance of the ApplicationAccess.Hosting.LoopingWorkerThreadDistributedOperationCoordinatorNodeShardConfigurationRefreshStrategy class.
            </summary>
            <param name="refreshLoopInterval">The time to wait (in milliseconds) between shard configuration refreshes.</param>
            <param name="refreshExceptionAction">An action to invoke if an error occurs when refreshing the shard configuration.  Accepts a single parameter which is the <see cref="T:ApplicationAccess.Distribution.ShardConfigurationRefreshException"/> containing details of the error.</param>
        </member>
        <member name="M:ApplicationAccess.Hosting.LoopingWorkerThreadDistributedOperationCoordinatorNodeShardConfigurationRefreshStrategy.Start">
            <summary>
            Starts the worker thread which performs shard configuration refreshes.
            </summary>
        </member>
        <member name="M:ApplicationAccess.Hosting.LoopingWorkerThreadDistributedOperationCoordinatorNodeShardConfigurationRefreshStrategy.Stop">
            <summary>
            Stops the worker thread which performs shard configuration refreshes.
            </summary>
            <exception cref="T:ApplicationAccess.Distribution.ShardConfigurationRefreshException">An exception occurred whilst attempting to refresh/update the shard configuration.</exception>
        </member>
        <member name="M:ApplicationAccess.Hosting.LoopingWorkerThreadDistributedOperationCoordinatorNodeShardConfigurationRefreshStrategy.OnShardConfigurationRefreshed(System.EventArgs)">
            <summary>
            Raises the ShardConfigurationRefreshed event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:ApplicationAccess.Hosting.LoopingWorkerThreadDistributedOperationCoordinatorNodeShardConfigurationRefreshStrategy.JoinWorkerThread">
            <summary>
            Calls Join() on the worker thread, waiting until it terminates.
            </summary>
        </member>
        <member name="T:ApplicationAccess.Hosting.LoopingWorkerThreadReaderNodeRefreshStrategy">
            <summary>
            A reader node refresh strategy that refreshes/updates a reader node at a regular interval, using a worker thread.
            </summary>
        </member>
        <member name="F:ApplicationAccess.Hosting.LoopingWorkerThreadReaderNodeRefreshStrategy.readerNodeRefreshWorkerThread">
            <summary>Worker thread which implements the strategy to refresh the contents of reader node.</summary>
        </member>
        <member name="F:ApplicationAccess.Hosting.LoopingWorkerThreadReaderNodeRefreshStrategy.refreshLoopInterval">
            <summary>The time to wait (in milliseconds) between reader node refreshes.</summary>
        </member>
        <member name="F:ApplicationAccess.Hosting.LoopingWorkerThreadReaderNodeRefreshStrategy.refreshExceptionAction">
            <summary>An action to invoke if an error occurs when refreshing the reader node.  Accepts a single parameter which is the <see cref="T:ApplicationAccess.Hosting.ReaderNodeRefreshException"/> containing details of the error.</summary>
        </member>
        <member name="F:ApplicationAccess.Hosting.LoopingWorkerThreadReaderNodeRefreshStrategy.stopMethodCalled">
            <summary>Whether request to stop the worker thread has been received via the Stop() method.</summary>
        </member>
        <member name="F:ApplicationAccess.Hosting.LoopingWorkerThreadReaderNodeRefreshStrategy.workerThreadCompleteSignal">
            <summary>Signal that is set after the worker thread completes, either via explicit stopping or an exception occurring (for unit testing).</summary>
        </member>
        <member name="F:ApplicationAccess.Hosting.LoopingWorkerThreadReaderNodeRefreshStrategy.flushLoopIterationCount">
            <summary>The number of iterations of the worker thread to flush/process.</summary>
        </member>
        <member name="F:ApplicationAccess.Hosting.LoopingWorkerThreadReaderNodeRefreshStrategy.disposed">
            <summary>Indicates whether the object has been disposed.</summary>
        </member>
        <member name="E:ApplicationAccess.Hosting.LoopingWorkerThreadReaderNodeRefreshStrategy.ReaderNodeRefreshed">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.LoopingWorkerThreadReaderNodeRefreshStrategy.#ctor(System.Int32,System.Action{ApplicationAccess.Hosting.ReaderNodeRefreshException})">
            <summary>
            Initialises a new instance of the ApplicationAccess.Hosting.LoopingWorkerThreadReaderNodeRefreshStrategy class.
            </summary>
            <param name="refreshLoopInterval">The time to wait (in milliseconds) between reader node refreshes.</param>
            <param name="refreshExceptionAction">An action to invoke if an error occurs when refreshing the reader node.  Accepts a single parameter which is the <see cref="T:ApplicationAccess.Hosting.ReaderNodeRefreshException"/> containing details of the error.</param>
        </member>
        <member name="M:ApplicationAccess.Hosting.LoopingWorkerThreadReaderNodeRefreshStrategy.#ctor(System.Int32,System.Action{ApplicationAccess.Hosting.ReaderNodeRefreshException},System.Threading.ManualResetEvent,System.Int32)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Hosting.LoopingWorkerThreadReaderNodeRefreshStrategy class.
            </summary>
            <param name="refreshLoopInterval">The time to wait (in milliseconds) between reader node refreshes.</param>
            <param name="refreshExceptionAction">An action to invoke if an error occurs when refreshing the reader node.  Accepts a single parameter which is the <see cref="T:ApplicationAccess.Hosting.ReaderNodeRefreshException"/> containing details of the error.</param>
            <param name="workerThreadCompleteSignal">Signal that will be set when the worker thread processing is complete (for unit testing).</param>
            <param name="flushLoopIterationCount">The number of iterations of the worker thread to flush/process.</param>
            <remarks>This constructor is included to facilitate unit testing.</remarks>
        </member>
        <member name="M:ApplicationAccess.Hosting.LoopingWorkerThreadReaderNodeRefreshStrategy.Start">
            <summary>
            Starts the worker thread which performs reader node refreshes.
            </summary>
        </member>
        <member name="M:ApplicationAccess.Hosting.LoopingWorkerThreadReaderNodeRefreshStrategy.Stop">
            <summary>
            Stops the worker thread which performs reader node refreshes.
            </summary>
            <exception cref="T:ApplicationAccess.Hosting.ReaderNodeRefreshException">An exception occurred whilst attempting to refresh/update the reader node.</exception>
        </member>
        <member name="M:ApplicationAccess.Hosting.LoopingWorkerThreadReaderNodeRefreshStrategy.OnReaderNodeRefreshed(System.EventArgs)">
            <summary>
            Raises the ReaderNodeRefreshed event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:ApplicationAccess.Hosting.LoopingWorkerThreadReaderNodeRefreshStrategy.JoinWorkerThread">
            <summary>
            Calls Join() on the worker thread, waiting until it terminates.
            </summary>
        </member>
        <member name="M:ApplicationAccess.Hosting.LoopingWorkerThreadReaderNodeRefreshStrategy.Dispose">
            <summary>
            Releases the unmanaged resources used by the LoopingWorkerThreadReaderNodeRefreshStrategy.
            </summary>
        </member>
        <member name="M:ApplicationAccess.Hosting.LoopingWorkerThreadReaderNodeRefreshStrategy.Dispose(System.Boolean)">
            <summary>
            Provides a method to free unmanaged resources used by this class.
            </summary>
            <param name="disposing">Whether the method is being called as part of an explicit Dispose routine, and hence whether managed resources should also be freed.</param>
        </member>
        <member name="T:ApplicationAccess.Hosting.ReaderNodeCountMetric">
            <summary>
            Base for count metrics logged by the <see cref="T:ApplicationAccess.Hosting.ReaderNode`4"/> class.
            </summary>
        </member>
        <member name="T:ApplicationAccess.Hosting.ReaderNodeAmountMetric">
            <summary>
            Base for amount metrics logged by the <see cref="T:ApplicationAccess.Hosting.ReaderNode`4"/> class.
            </summary>
        </member>
        <member name="T:ApplicationAccess.Hosting.ReaderNodeIntervalMetric">
            <summary>
            Base for interval metrics logged by the <see cref="T:ApplicationAccess.Hosting.ReaderNode`4"/> class.
            </summary>
        </member>
        <member name="T:ApplicationAccess.Hosting.CacheMiss">
            <summary>
            Count metric which records a cache miss occurring.
            </summary>
            <remarks>Created for the <see cref="T:ApplicationAccess.Hosting.ReaderNode`4"/> class, and records when a refresh operation finds that events subsequent to the most recently stored event are not stored in the event cache.</remarks>
        </member>
        <member name="T:ApplicationAccess.Hosting.CachedEventsReceived">
            <summary>
            Amount metric which records the number of events received in response to a request to an event cache.
            </summary>
        </member>
        <member name="T:ApplicationAccess.Hosting.EventCacheEmpty">
            <summary>
            Count metric which records a when an event cache is queried, but the cache is empty.
            </summary>
        </member>
        <member name="T:ApplicationAccess.Hosting.EventProcessingDelay">
            <summary>
            Amount metric which records the time in milliseconds between the original occurence of an event, and when that change was processed / applied to a reader node.
            </summary>
        </member>
        <member name="T:ApplicationAccess.Hosting.ReaderNodeLoadTime">
            <summary>
            Count metric which records the time taken to load the entire contents of a reader node.
            </summary>
        </member>
        <member name="T:ApplicationAccess.Hosting.RefreshOperationCompleted">
            <summary>
            Count metric which records a reader node being refreshed with the latest data.
            </summary>
        </member>
        <member name="T:ApplicationAccess.Hosting.RefreshTime">
            <summary>
            Interval metric which records the time taken to refresh a reader node.
            </summary>
        </member>
        <member name="T:ApplicationAccess.Hosting.ReaderWriterNodeLoadTime">
            <summary>
            Interval metric which records the time taken to load the entire contents of a reader/writer node.
            </summary>
        </member>
        <member name="T:ApplicationAccess.Hosting.WriterNodeLoadTime">
            <summary>
            Interval metric which records the time taken to load the entire contents of a writer node.
            </summary>
        </member>
        <member name="T:ApplicationAccess.Hosting.ReaderNode`4">
            <summary>
            A node in a multi-reader, single-writer ApplicationAccess hosting environment which allows reading permissions and authorizations for an application.
            </summary>
            <typeparam name="TUser">The type of users in the application.</typeparam>
            <typeparam name="TGroup">The type of groups in the application.</typeparam>
            <typeparam name="TComponent">The type of components in the application to manage access to.</typeparam>
            <typeparam name="TAccess">The type of levels of access which can be assigned to an application component.</typeparam>
            <remarks>Note that as per remarks for <see cref="T:ApplicationAccess.Metrics.MetricLoggingConcurrentAccessManager`4"/> interval metrics are not logged for <see cref="T:ApplicationAccess.IAccessManagerQueryProcessor`4"/> methods that return <see cref="T:System.Collections.Generic.IEnumerable`1"/>, or perform simple dictionary and set lookups (e.g. <see cref="M:ApplicationAccess.Metrics.MetricLoggingConcurrentAccessManager`4.ContainsUser(`0)">ContainsUser()</see>).  If these metrics are required, they must be logged outside of this class.  In the case of methods that return <see cref="T:System.Collections.Generic.IEnumerable`1"/> the metric logging must wrap the code that enumerates the result.</remarks>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderNode`4.#ctor(ApplicationAccess.Hosting.IReaderNodeRefreshStrategy,ApplicationAccess.Persistence.IAccessManagerTemporalEventQueryProcessor{`0,`1,`2,`3},ApplicationAccess.Persistence.IAccessManagerTemporalPersistentReader{`0,`1,`2,`3})">
            <summary>
            Initialises a new instance of the ApplicationAccess.Hosting.ReaderNode class.
            </summary>
            <param name="refreshStrategy">The strategy/methodology to use to refresh the contents of the reader node.</param>
            <param name="eventCache">Cache for events which change the <see cref="T:ApplicationAccess.IAccessManager`4"/> being hosted.</param>
            <param name="persistentReader">Reader which allows retriving the complete state of the <see cref="T:ApplicationAccess.IAccessManager`4"/> being hosted from persistent storage.</param>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderNode`4.#ctor(ApplicationAccess.Hosting.IReaderNodeRefreshStrategy,ApplicationAccess.Persistence.IAccessManagerTemporalEventQueryProcessor{`0,`1,`2,`3},ApplicationAccess.Persistence.IAccessManagerTemporalPersistentReader{`0,`1,`2,`3},ApplicationMetrics.IMetricLogger)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Hosting.ReaderNode class.
            </summary>
            <param name="refreshStrategy">The strategy/methodology to use to refresh the contents of the reader node.</param>
            <param name="eventCache">Cache for events which change the <see cref="T:ApplicationAccess.IAccessManager`4"/> being hosted.</param>
            <param name="persistentReader">Reader which allows retriving the complete state of the <see cref="T:ApplicationAccess.IAccessManager`4"/> being hosted from persistent storage.</param>
            <param name="metricLogger">The logger for metrics.</param>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderNode`4.#ctor(ApplicationAccess.Hosting.IReaderNodeRefreshStrategy,ApplicationAccess.Persistence.IAccessManagerTemporalEventQueryProcessor{`0,`1,`2,`3},ApplicationAccess.Persistence.IAccessManagerTemporalPersistentReader{`0,`1,`2,`3},ApplicationMetrics.IMetricLogger,ApplicationAccess.Utilities.IDateTimeProvider)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Hosting.ReaderNode class.
            </summary>
            <param name="refreshStrategy">The strategy/methodology to use to refresh the contents of the reader node.</param>
            <param name="eventCache">Cache for events which change the <see cref="T:ApplicationAccess.IAccessManager`4"/> being hosted.</param>
            <param name="persistentReader">Reader which allows retriving the complete state of the <see cref="T:ApplicationAccess.IAccessManager`4"/> being hosted from persistent storage.</param>
            <param name="metricLogger">The logger for metrics.</param>
            <param name="dateTimeProvider">The provider to use for the current date and time.</param>
            <remarks>This constructor is included to facilitate unit testing.</remarks>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderNode`4.InitializeAccessManager">
            <inheritdoc/>
        </member>
        <member name="T:ApplicationAccess.Hosting.ReaderNodeBase`5">
            <summary>
            Base for nodes in a multi-reader, single-writer ApplicationAccess hosting environment which allow reading permissions and authorizations for an application.
            </summary>
            <typeparam name="TUser">The type of users in the application.</typeparam>
            <typeparam name="TGroup">The type of groups in the application.</typeparam>
            <typeparam name="TComponent">The type of components in the application to manage access to.</typeparam>
            <typeparam name="TAccess">The type of levels of access which can be assigned to an application component.</typeparam>
            <typeparam name="TAccessManager">The subclass of <see cref="T:ApplicationAccess.ConcurrentAccessManager`4"/> which should be used to store the permissions and authorizations.</typeparam>
            <remarks>Note that as per remarks for <see cref="T:ApplicationAccess.Metrics.MetricLoggingConcurrentAccessManager`4"/> interval metrics are not logged for <see cref="T:ApplicationAccess.IAccessManagerQueryProcessor`4"/> methods that return <see cref="T:System.Collections.Generic.IEnumerable`1"/>, or perform simple dictionary and set lookups (e.g. <see cref="M:ApplicationAccess.Metrics.MetricLoggingConcurrentAccessManager`4.ContainsUser(`0)">ContainsUser()</see>).  If these metrics are required, they must be logged outside of this class.  In the case of methods that return <see cref="T:System.Collections.Generic.IEnumerable`1"/> the metric logging must wrap the code that enumerates the result.</remarks>
        </member>
        <member name="F:ApplicationAccess.Hosting.ReaderNodeBase`5.refreshStrategy">
            <summary>The strategy/methodology to use to refresh the contents of the reader node.</summary>
        </member>
        <member name="F:ApplicationAccess.Hosting.ReaderNodeBase`5.eventCache">
            <summary>Cache for events which change the <see cref="T:ApplicationAccess.IAccessManager`4"/> being hosted.</summary>
        </member>
        <member name="F:ApplicationAccess.Hosting.ReaderNodeBase`5.persistentReader">
            <summary>Reader which allows retriving the complete state of the <see cref="T:ApplicationAccess.IAccessManager`4"/> being hosted from persistent storage.</summary>
        </member>
        <member name="F:ApplicationAccess.Hosting.ReaderNodeBase`5.concurrentAccessManager">
            <summary>The AccessManager which stores the permissions and authorizations for the application.</summary>
        </member>
        <member name="F:ApplicationAccess.Hosting.ReaderNodeBase`5.dateTimeProvider">
            <summary>The provider to use for the current date and time.</summary>
        </member>
        <member name="F:ApplicationAccess.Hosting.ReaderNodeBase`5.metricLogger">
            <summary>The logger for metrics.</summary>
        </member>
        <member name="F:ApplicationAccess.Hosting.ReaderNodeBase`5.latestEventId">
            <summary>The id of the most recent event which changed the AccessManager.</summary>
        </member>
        <member name="F:ApplicationAccess.Hosting.ReaderNodeBase`5.refreshedEventHandler">
            <summary>The delegate which handles an <see cref="E:ApplicationAccess.Hosting.IReaderNodeRefreshStrategy.ReaderNodeRefreshed">ReaderNodeRefreshed</see> event.</summary>
        </member>
        <member name="F:ApplicationAccess.Hosting.ReaderNodeBase`5.disposed">
            <summary>Indicates whether the object has been disposed.</summary>
        </member>
        <member name="P:ApplicationAccess.Hosting.ReaderNodeBase`5.MetricLoggingEnabled">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderNodeBase`5.#ctor(ApplicationAccess.Hosting.IReaderNodeRefreshStrategy,ApplicationAccess.Persistence.IAccessManagerTemporalEventQueryProcessor{`0,`1,`2,`3},ApplicationAccess.Persistence.IAccessManagerTemporalPersistentReader{`0,`1,`2,`3})">
            <summary>
            Initialises a new instance of the ApplicationAccess.Hosting.ReaderNodeBase class.
            </summary>
            <param name="refreshStrategy">The strategy/methodology to use to refresh the contents of the reader node.</param>
            <param name="eventCache">Cache for events which change the <see cref="T:ApplicationAccess.IAccessManager`4"/> being hosted.</param>
            <param name="persistentReader">Reader which allows retriving the complete state of the <see cref="T:ApplicationAccess.IAccessManager`4"/> being hosted from persistent storage.</param>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderNodeBase`5.#ctor(ApplicationAccess.Hosting.IReaderNodeRefreshStrategy,ApplicationAccess.Persistence.IAccessManagerTemporalEventQueryProcessor{`0,`1,`2,`3},ApplicationAccess.Persistence.IAccessManagerTemporalPersistentReader{`0,`1,`2,`3},ApplicationMetrics.IMetricLogger)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Hosting.ReaderNodeBase class.
            </summary>
            <param name="refreshStrategy">The strategy/methodology to use to refresh the contents of the reader node.</param>
            <param name="eventCache">Cache for events which change the <see cref="T:ApplicationAccess.IAccessManager`4"/> being hosted.</param>
            <param name="persistentReader">Reader which allows retriving the complete state of the <see cref="T:ApplicationAccess.IAccessManager`4"/> being hosted from persistent storage.</param>
            <param name="metricLogger">The logger for metrics.</param>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderNodeBase`5.#ctor(ApplicationAccess.Hosting.IReaderNodeRefreshStrategy,ApplicationAccess.Persistence.IAccessManagerTemporalEventQueryProcessor{`0,`1,`2,`3},ApplicationAccess.Persistence.IAccessManagerTemporalPersistentReader{`0,`1,`2,`3},ApplicationMetrics.IMetricLogger,ApplicationAccess.Utilities.IDateTimeProvider)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Hosting.ReaderNodeBase class.
            </summary>
            <param name="refreshStrategy">The strategy/methodology to use to refresh the contents of the reader node.</param>
            <param name="eventCache">Cache for events which change the <see cref="T:ApplicationAccess.IAccessManager`4"/> being hosted.</param>
            <param name="persistentReader">Reader which allows retriving the complete state of the <see cref="T:ApplicationAccess.IAccessManager`4"/> being hosted from persistent storage.</param>
            <param name="metricLogger">The logger for metrics.</param>
            <param name="dateTimeProvider">The provider to use for the current date and time.</param>
            <remarks>This constructor is included to facilitate unit testing.</remarks>
        </member>
        <member name="P:ApplicationAccess.Hosting.ReaderNodeBase`5.Users">
            <inheritdoc/>
            <exception cref="T:ApplicationAccess.Hosting.ReaderNodeRefreshException">An exception occurred whilst attempting to refresh/update the reader node.</exception>
        </member>
        <member name="P:ApplicationAccess.Hosting.ReaderNodeBase`5.Groups">
            <inheritdoc/>
            <exception cref="T:ApplicationAccess.Hosting.ReaderNodeRefreshException">An exception occurred whilst attempting to refresh/update the reader node.</exception>
        </member>
        <member name="P:ApplicationAccess.Hosting.ReaderNodeBase`5.EntityTypes">
            <inheritdoc/>
            <exception cref="T:ApplicationAccess.Hosting.ReaderNodeRefreshException">An exception occurred whilst attempting to refresh/update the reader node.</exception>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderNodeBase`5.ContainsUser(`0)">
            <inheritdoc/>
            <exception cref="T:ApplicationAccess.Hosting.ReaderNodeRefreshException">An exception occurred whilst attempting to refresh/update the reader node.</exception>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderNodeBase`5.ContainsGroup(`1)">
            <inheritdoc/>
            <exception cref="T:ApplicationAccess.Hosting.ReaderNodeRefreshException">An exception occurred whilst attempting to refresh/update the reader node.</exception>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderNodeBase`5.GetUserToGroupMappings(`0,System.Boolean)">
            <inheritdoc/>
            <exception cref="T:ApplicationAccess.Hosting.ReaderNodeRefreshException">An exception occurred whilst attempting to refresh/update the reader node.</exception>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderNodeBase`5.GetGroupToUserMappings(`1,System.Boolean)">
            <inheritdoc/>
            <exception cref="T:ApplicationAccess.Hosting.ReaderNodeRefreshException">An exception occurred whilst attempting to refresh/update the reader node.</exception>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderNodeBase`5.GetGroupToGroupMappings(`1,System.Boolean)">
            <inheritdoc/>
            <exception cref="T:ApplicationAccess.Hosting.ReaderNodeRefreshException">An exception occurred whilst attempting to refresh/update the reader node.</exception>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderNodeBase`5.GetGroupToGroupReverseMappings(`1,System.Boolean)">
            <inheritdoc/>
            <exception cref="T:ApplicationAccess.Hosting.ReaderNodeRefreshException">An exception occurred whilst attempting to refresh/update the reader node.</exception>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderNodeBase`5.GetUserToApplicationComponentAndAccessLevelMappings(`0)">
            <inheritdoc/>
            <exception cref="T:ApplicationAccess.Hosting.ReaderNodeRefreshException">An exception occurred whilst attempting to refresh/update the reader node.</exception>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderNodeBase`5.GetApplicationComponentAndAccessLevelToUserMappings(`2,`3,System.Boolean)">
            <inheritdoc/>
            <exception cref="T:ApplicationAccess.Hosting.ReaderNodeRefreshException">An exception occurred whilst attempting to refresh/update the reader node.</exception>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderNodeBase`5.GetGroupToApplicationComponentAndAccessLevelMappings(`1)">
            <inheritdoc/>
            <exception cref="T:ApplicationAccess.Hosting.ReaderNodeRefreshException">An exception occurred whilst attempting to refresh/update the reader node.</exception>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderNodeBase`5.GetApplicationComponentAndAccessLevelToGroupMappings(`2,`3,System.Boolean)">
            <inheritdoc/>
            <exception cref="T:ApplicationAccess.Hosting.ReaderNodeRefreshException">An exception occurred whilst attempting to refresh/update the reader node.</exception>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderNodeBase`5.ContainsEntityType(System.String)">
            <inheritdoc/>
            <exception cref="T:ApplicationAccess.Hosting.ReaderNodeRefreshException">An exception occurred whilst attempting to refresh/update the reader node.</exception>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderNodeBase`5.GetEntities(System.String)">
            <inheritdoc/>
            <exception cref="T:ApplicationAccess.Hosting.ReaderNodeRefreshException">An exception occurred whilst attempting to refresh/update the reader node.</exception>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderNodeBase`5.ContainsEntity(System.String,System.String)">
            <inheritdoc/>
            <exception cref="T:ApplicationAccess.Hosting.ReaderNodeRefreshException">An exception occurred whilst attempting to refresh/update the reader node.</exception>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderNodeBase`5.GetUserToEntityMappings(`0)">
            <inheritdoc/>
            <exception cref="T:ApplicationAccess.Hosting.ReaderNodeRefreshException">An exception occurred whilst attempting to refresh/update the reader node.</exception>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderNodeBase`5.GetUserToEntityMappings(`0,System.String)">
            <inheritdoc/>
            <exception cref="T:ApplicationAccess.Hosting.ReaderNodeRefreshException">An exception occurred whilst attempting to refresh/update the reader node.</exception>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderNodeBase`5.GetEntityToUserMappings(System.String,System.String,System.Boolean)">
            <inheritdoc/>
            <exception cref="T:ApplicationAccess.Hosting.ReaderNodeRefreshException">An exception occurred whilst attempting to refresh/update the reader node.</exception>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderNodeBase`5.GetGroupToEntityMappings(`1)">
            <inheritdoc/>
            <exception cref="T:ApplicationAccess.Hosting.ReaderNodeRefreshException">An exception occurred whilst attempting to refresh/update the reader node.</exception>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderNodeBase`5.GetGroupToEntityMappings(`1,System.String)">
            <inheritdoc/>
            <exception cref="T:ApplicationAccess.Hosting.ReaderNodeRefreshException">An exception occurred whilst attempting to refresh/update the reader node.</exception>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderNodeBase`5.GetEntityToGroupMappings(System.String,System.String,System.Boolean)">
            <inheritdoc/>
            <exception cref="T:ApplicationAccess.Hosting.ReaderNodeRefreshException">An exception occurred whilst attempting to refresh/update the reader node.</exception>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderNodeBase`5.HasAccessToApplicationComponent(`0,`2,`3)">
            <inheritdoc/>
            <exception cref="T:ApplicationAccess.Hosting.ReaderNodeRefreshException">An exception occurred whilst attempting to refresh/update the reader node.</exception>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderNodeBase`5.HasAccessToEntity(`0,System.String,System.String)">
            <inheritdoc/>
            <exception cref="T:ApplicationAccess.Hosting.ReaderNodeRefreshException">An exception occurred whilst attempting to refresh/update the reader node.</exception>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderNodeBase`5.GetApplicationComponentsAccessibleByUser(`0)">
            <inheritdoc/>
            <exception cref="T:ApplicationAccess.Hosting.ReaderNodeRefreshException">An exception occurred whilst attempting to refresh/update the reader node.</exception>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderNodeBase`5.GetApplicationComponentsAccessibleByGroup(`1)">
            <inheritdoc/>
            <exception cref="T:ApplicationAccess.Hosting.ReaderNodeRefreshException">An exception occurred whilst attempting to refresh/update the reader node.</exception>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderNodeBase`5.GetEntitiesAccessibleByUser(`0)">
            <inheritdoc/>
            <exception cref="T:ApplicationAccess.Hosting.ReaderNodeRefreshException">An exception occurred whilst attempting to refresh/update the reader node.</exception>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderNodeBase`5.GetEntitiesAccessibleByUser(`0,System.String)">
            <inheritdoc/>
            <exception cref="T:ApplicationAccess.Hosting.ReaderNodeRefreshException">An exception occurred whilst attempting to refresh/update the reader node.</exception>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderNodeBase`5.GetEntitiesAccessibleByGroup(`1)">
            <inheritdoc/>
            <exception cref="T:ApplicationAccess.Hosting.ReaderNodeRefreshException">An exception occurred whilst attempting to refresh/update the reader node.</exception>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderNodeBase`5.GetEntitiesAccessibleByGroup(`1,System.String)">
            <inheritdoc/>
            <exception cref="T:ApplicationAccess.Hosting.ReaderNodeRefreshException">An exception occurred whilst attempting to refresh/update the reader node.</exception>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderNodeBase`5.Load(System.Boolean)">
            <summary>
            Loads all permissions and authorizations from persistent storage.
            </summary>
            <param name="throwExceptionIfStorageIsEmpty">When set true an exception will be thrown in the case that the persistent storage is empty.</param>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderNodeBase`5.InitializeAccessManager">
            <summary>
            Initializes a new <see cref="T:ApplicationAccess.ConcurrentAccessManager`4"/> instance used for underlying storage of permissions and authorizations.
            </summary>
            <returns>A new <see cref="T:ApplicationAccess.ConcurrentAccessManager`4"/> instance.</returns>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderNodeBase`5.Refresh">
            <summary>
            Refreshes/updates the contents of the AccessManager by first attempting to retrieve any events occurring after the one stored in 'latestEventId' and applying them to the AccessManager instance, or by reading the entire latest state from persistent storage if the event retrieval fails.
            </summary>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderNodeBase`5.Dispose">
            <summary>
            Releases the unmanaged resources used by the ReaderNode.
            </summary>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderNodeBase`5.Dispose(System.Boolean)">
            <summary>
            Provides a method to free unmanaged resources used by this class.
            </summary>
            <param name="disposing">Whether the method is being called as part of an explicit Dispose routine, and hence whether managed resources should also be freed.</param>
        </member>
        <member name="T:ApplicationAccess.Hosting.ReaderNodeRefreshException">
            <summary>
            The exception that is thrown when an error occurs attempting to refresh the contents of a <see cref="T:ApplicationAccess.Hosting.ReaderNode`4"/>.
            </summary>
            <remarks>Refreshing may be performed by a worker thread, and hence this exception would usually be thrown from the worker thread.  Additionally this exception would usually result from a critical inner exception (e.g. failure to read from a database), hence this exception will often need to be excplicity caught and acted upon in client code.</remarks>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderNodeRefreshException.#ctor(System.String)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Hosting.ReaderNodeRefreshException class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderNodeRefreshException.#ctor(System.String,System.Exception)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Hosting.ReaderNodeRefreshException class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:ApplicationAccess.Hosting.ReaderWriterNode`4">
            <summary>
            A node in a single-reader, single-writer ApplicationAccess hosting environment which handles both reading and writing of permissions and authorizations for an application.
            </summary>
            <typeparam name="TUser">The type of users in the application.</typeparam>
            <typeparam name="TGroup">The type of groups in the application.</typeparam>
            <typeparam name="TComponent">The type of components in the application to manage access to.</typeparam>
            <typeparam name="TAccess">The type of levels of access which can be assigned to an application component.</typeparam>
            <remarks>Note that as per remarks for <see cref="T:ApplicationAccess.Metrics.MetricLoggingConcurrentAccessManager`4"/> interval metrics are not logged for <see cref="T:ApplicationAccess.IAccessManagerQueryProcessor`4"/> methods that return <see cref="T:System.Collections.Generic.IEnumerable`1"/>, or perform simple dictionary and set lookups (e.g. <see cref="M:ApplicationAccess.Metrics.MetricLoggingConcurrentAccessManager`4.ContainsUser(`0)">ContainsUser()</see>).  If these metrics are required, they must be logged outside of this class.  In the case of methods that return <see cref="T:System.Collections.Generic.IEnumerable`1"/> the metric logging must wrap the code that enumerates the result.</remarks>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderWriterNode`4.#ctor(ApplicationAccess.Utilities.IHashCodeGenerator{`0},ApplicationAccess.Utilities.IHashCodeGenerator{`1},ApplicationAccess.Utilities.IHashCodeGenerator{System.String},ApplicationAccess.Persistence.IAccessManagerEventBufferFlushStrategy,ApplicationAccess.Persistence.IAccessManagerTemporalPersistentReader{`0,`1,`2,`3},ApplicationAccess.Persistence.IAccessManagerTemporalEventPersister{`0,`1,`2,`3})">
            <summary>
            Initialises a new instance of the ApplicationAccess.Hosting.ReaderWriterNode class.
            </summary>
            <param name="userHashCodeGenerator">The hash code generator for users.</param>
            <param name="groupHashCodeGenerator">The hash code generator for groups.</param>
            <param name="entityTypeHashCodeGenerator">The hash code generator for entity types.</param>
            <param name="eventBufferFlushStrategy">Flush strategy for the <see cref="T:ApplicationAccess.Persistence.IAccessManagerEventBuffer`4"/> instance used by the node.</param>
            <param name="persistentReader">Used to load the complete state of the AccessManager instance.</param>
            <param name="eventPersister">Used to persist changes to the AccessManager.</param>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderWriterNode`4.#ctor(ApplicationAccess.Utilities.IHashCodeGenerator{`0},ApplicationAccess.Utilities.IHashCodeGenerator{`1},ApplicationAccess.Utilities.IHashCodeGenerator{System.String},ApplicationAccess.Persistence.IAccessManagerEventBufferFlushStrategy,ApplicationAccess.Persistence.IAccessManagerTemporalPersistentReader{`0,`1,`2,`3},ApplicationAccess.Persistence.IAccessManagerTemporalEventBulkPersister{`0,`1,`2,`3})">
            <summary>
            Initialises a new instance of the ApplicationAccess.Hosting.ReaderWriterNode class.
            </summary>
            <param name="userHashCodeGenerator">The hash code generator for users.</param>
            <param name="groupHashCodeGenerator">The hash code generator for groups.</param>
            <param name="entityTypeHashCodeGenerator">The hash code generator for entity types.</param>
            <param name="eventBufferFlushStrategy">Flush strategy for the <see cref="T:ApplicationAccess.Persistence.IAccessManagerEventBuffer`4"/> instance used by the node.</param>
            <param name="persistentReader">Used to load the complete state of the AccessManager instance.</param>
            <param name="eventPersister">Used to persist changes to the AccessManager.</param>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderWriterNode`4.#ctor(ApplicationAccess.Utilities.IHashCodeGenerator{`0},ApplicationAccess.Utilities.IHashCodeGenerator{`1},ApplicationAccess.Utilities.IHashCodeGenerator{System.String},ApplicationAccess.Persistence.IAccessManagerEventBufferFlushStrategy,ApplicationAccess.Persistence.IAccessManagerTemporalPersistentReader{`0,`1,`2,`3},ApplicationAccess.Persistence.IAccessManagerTemporalEventPersister{`0,`1,`2,`3},ApplicationMetrics.IMetricLogger)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Hosting.ReaderWriterNode class.
            </summary>
            <param name="userHashCodeGenerator">The hash code generator for users.</param>
            <param name="groupHashCodeGenerator">The hash code generator for groups.</param>
            <param name="entityTypeHashCodeGenerator">The hash code generator for entity types.</param>
            <param name="eventBufferFlushStrategy">Flush strategy for the <see cref="T:ApplicationAccess.Persistence.IAccessManagerEventBuffer`4"/> instance used by the node.</param>
            <param name="persistentReader">Used to load the complete state of the AccessManager instance.</param>
            <param name="eventPersister">Used to persist changes to the AccessManager.</param>
            <param name="metricLogger">The logger for metrics.</param>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderWriterNode`4.#ctor(ApplicationAccess.Utilities.IHashCodeGenerator{`0},ApplicationAccess.Utilities.IHashCodeGenerator{`1},ApplicationAccess.Utilities.IHashCodeGenerator{System.String},ApplicationAccess.Persistence.IAccessManagerEventBufferFlushStrategy,ApplicationAccess.Persistence.IAccessManagerTemporalPersistentReader{`0,`1,`2,`3},ApplicationAccess.Persistence.IAccessManagerTemporalEventBulkPersister{`0,`1,`2,`3},ApplicationMetrics.IMetricLogger)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Hosting.ReaderWriterNode class.
            </summary>
            <param name="userHashCodeGenerator">The hash code generator for users.</param>
            <param name="groupHashCodeGenerator">The hash code generator for groups.</param>
            <param name="entityTypeHashCodeGenerator">The hash code generator for entity types.</param>
            <param name="eventBufferFlushStrategy">Flush strategy for the <see cref="T:ApplicationAccess.Persistence.IAccessManagerEventBuffer`4"/> instance used by the node.</param>
            <param name="persistentReader">Used to load the complete state of the AccessManager instance.</param>
            <param name="eventPersister">Used to persist changes to the AccessManager.</param>
            <param name="metricLogger">The logger for metrics.</param>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderWriterNode`4.InitializeAccessManager">
            <inheritdoc/>
        </member>
        <member name="T:ApplicationAccess.Hosting.ReaderWriterNodeBase`5">
            <summary>
            Base for nodes in a single-reader, single-writer ApplicationAccess hosting environment which handle both reading and writing of permissions and authorizations for an application.
            </summary>
            <typeparam name="TUser">The type of users in the application.</typeparam>
            <typeparam name="TGroup">The type of groups in the application.</typeparam>
            <typeparam name="TComponent">The type of components in the application to manage access to.</typeparam>
            <typeparam name="TAccess">The type of levels of access which can be assigned to an application component.</typeparam>
            <typeparam name="TAccessManager">The subclass of <see cref="T:ApplicationAccess.ConcurrentAccessManager`4"/> which should be used to read and write the permissions and authorizations.</typeparam>
            <remarks>Note that as per remarks for <see cref="T:ApplicationAccess.Metrics.MetricLoggingConcurrentAccessManager`4"/> interval metrics are not logged for <see cref="T:ApplicationAccess.IAccessManagerQueryProcessor`4"/> methods that return <see cref="T:System.Collections.Generic.IEnumerable`1"/>, or perform simple dictionary and set lookups (e.g. <see cref="M:ApplicationAccess.Metrics.MetricLoggingConcurrentAccessManager`4.ContainsUser(`0)">ContainsUser()</see>).  If these metrics are required, they must be logged outside of this class.  In the case of methods that return <see cref="T:System.Collections.Generic.IEnumerable`1"/> the metric logging must wrap the code that enumerates the result.</remarks>
        </member>
        <member name="F:ApplicationAccess.Hosting.ReaderWriterNodeBase`5.concurrentAccessManager">
            <summary>The AccessManager instance used to store all permissions and back the event validator.</summary>
        </member>
        <member name="F:ApplicationAccess.Hosting.ReaderWriterNodeBase`5.eventValidator">
            <summary>Validates events created by calls to <see cref="T:ApplicationAccess.IAccessManagerEventProcessor`4"/> methods.</summary>
        </member>
        <member name="F:ApplicationAccess.Hosting.ReaderWriterNodeBase`5.eventBuffer">
            <summary>Buffers events events created by calls to <see cref="T:ApplicationAccess.IAccessManagerEventProcessor`4"/> methods.</summary>
        </member>
        <member name="F:ApplicationAccess.Hosting.ReaderWriterNodeBase`5.eventBufferFlushStrategy">
            <summary>Flush strategy for the event buffer.</summary>
        </member>
        <member name="F:ApplicationAccess.Hosting.ReaderWriterNodeBase`5.persistentReader">
            <summary>Used to load the complete state of the AccessManager instance.</summary>
        </member>
        <member name="F:ApplicationAccess.Hosting.ReaderWriterNodeBase`5.metricLogger">
            <summary>The logger for metrics.</summary>
        </member>
        <member name="F:ApplicationAccess.Hosting.ReaderWriterNodeBase`5.disposed">
            <summary>Indicates whether the object has been disposed.</summary>
        </member>
        <member name="P:ApplicationAccess.Hosting.ReaderWriterNodeBase`5.MetricLoggingEnabled">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderWriterNodeBase`5.#ctor(ApplicationAccess.Persistence.IAccessManagerEventBufferFlushStrategy,ApplicationAccess.Persistence.IAccessManagerTemporalPersistentReader{`0,`1,`2,`3})">
            <summary>
            Initialises a new instance of the ApplicationAccess.Hosting.ReaderWriterNodeBase class.
            </summary>
            <param name="eventBufferFlushStrategy">Flush strategy for the <see cref="T:ApplicationAccess.Persistence.IAccessManagerEventBuffer`4"/> instance used by the node.</param>
            <param name="persistentReader">Used to load the complete state of the AccessManager instance.</param>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderWriterNodeBase`5.#ctor(ApplicationAccess.Persistence.IAccessManagerEventBufferFlushStrategy,ApplicationAccess.Persistence.IAccessManagerTemporalPersistentReader{`0,`1,`2,`3},ApplicationMetrics.IMetricLogger)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Hosting.ReaderWriterNodeBase class.
            </summary>
            <param name="eventBufferFlushStrategy">Flush strategy for the <see cref="T:ApplicationAccess.Persistence.IAccessManagerEventBuffer`4"/> instance used by the node.</param>
            <param name="persistentReader">Used to load the complete state of the AccessManager instance.</param>
            <param name="metricLogger">The logger for metrics.</param>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderWriterNodeBase`5.Load(System.Boolean)">
            <summary>
            Loads the latest state of the AccessManager from persistent storage.
            </summary>
            <param name="throwExceptionIfStorageIsEmpty">When set true an exception will be thrown in the case that the persistent storage is empty.</param>
        </member>
        <member name="P:ApplicationAccess.Hosting.ReaderWriterNodeBase`5.Users">
            <inheritdoc/>
        </member>
        <member name="P:ApplicationAccess.Hosting.ReaderWriterNodeBase`5.Groups">
            <inheritdoc/>
        </member>
        <member name="P:ApplicationAccess.Hosting.ReaderWriterNodeBase`5.EntityTypes">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderWriterNodeBase`5.ContainsUser(`0)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderWriterNodeBase`5.ContainsGroup(`1)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderWriterNodeBase`5.GetUserToGroupMappings(`0,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderWriterNodeBase`5.GetGroupToUserMappings(`1,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderWriterNodeBase`5.GetGroupToGroupMappings(`1,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderWriterNodeBase`5.GetGroupToGroupReverseMappings(`1,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderWriterNodeBase`5.GetUserToApplicationComponentAndAccessLevelMappings(`0)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderWriterNodeBase`5.GetApplicationComponentAndAccessLevelToUserMappings(`2,`3,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderWriterNodeBase`5.GetGroupToApplicationComponentAndAccessLevelMappings(`1)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderWriterNodeBase`5.GetApplicationComponentAndAccessLevelToGroupMappings(`2,`3,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderWriterNodeBase`5.ContainsEntityType(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderWriterNodeBase`5.GetEntities(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderWriterNodeBase`5.ContainsEntity(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderWriterNodeBase`5.GetUserToEntityMappings(`0)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderWriterNodeBase`5.GetUserToEntityMappings(`0,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderWriterNodeBase`5.GetEntityToUserMappings(System.String,System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderWriterNodeBase`5.GetGroupToEntityMappings(`1)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderWriterNodeBase`5.GetGroupToEntityMappings(`1,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderWriterNodeBase`5.GetEntityToGroupMappings(System.String,System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderWriterNodeBase`5.HasAccessToApplicationComponent(`0,`2,`3)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderWriterNodeBase`5.HasAccessToEntity(`0,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderWriterNodeBase`5.GetApplicationComponentsAccessibleByUser(`0)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderWriterNodeBase`5.GetApplicationComponentsAccessibleByGroup(`1)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderWriterNodeBase`5.GetEntitiesAccessibleByUser(`0)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderWriterNodeBase`5.GetEntitiesAccessibleByUser(`0,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderWriterNodeBase`5.GetEntitiesAccessibleByGroup(`1)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderWriterNodeBase`5.GetEntitiesAccessibleByGroup(`1,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderWriterNodeBase`5.AddUser(`0)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderWriterNodeBase`5.RemoveUser(`0)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderWriterNodeBase`5.AddGroup(`1)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderWriterNodeBase`5.RemoveGroup(`1)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderWriterNodeBase`5.AddUserToGroupMapping(`0,`1)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderWriterNodeBase`5.RemoveUserToGroupMapping(`0,`1)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderWriterNodeBase`5.AddGroupToGroupMapping(`1,`1)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderWriterNodeBase`5.RemoveGroupToGroupMapping(`1,`1)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderWriterNodeBase`5.AddUserToApplicationComponentAndAccessLevelMapping(`0,`2,`3)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderWriterNodeBase`5.RemoveUserToApplicationComponentAndAccessLevelMapping(`0,`2,`3)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderWriterNodeBase`5.AddGroupToApplicationComponentAndAccessLevelMapping(`1,`2,`3)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderWriterNodeBase`5.RemoveGroupToApplicationComponentAndAccessLevelMapping(`1,`2,`3)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderWriterNodeBase`5.AddEntityType(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderWriterNodeBase`5.RemoveEntityType(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderWriterNodeBase`5.AddEntity(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderWriterNodeBase`5.RemoveEntity(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderWriterNodeBase`5.AddUserToEntityMapping(`0,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderWriterNodeBase`5.RemoveUserToEntityMapping(`0,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderWriterNodeBase`5.AddGroupToEntityMapping(`1,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderWriterNodeBase`5.RemoveGroupToEntityMapping(`1,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderWriterNodeBase`5.Initialize(ApplicationAccess.Persistence.IAccessManagerEventBufferFlushStrategy,ApplicationAccess.Persistence.IAccessManagerTemporalPersistentReader{`0,`1,`2,`3})">
            <summary>
            Initializes members which are common between all constructors.
            </summary>
            <param name="eventBufferFlushStrategy">Flush strategy for the <see cref="T:ApplicationAccess.Persistence.IAccessManagerEventBuffer`4"/> instance used by the node.</param>
            <param name="persistentReader">Used to load the complete state of the AccessManager instance.</param>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderWriterNodeBase`5.InitializeAccessManager">
            <summary>
            Initializes a new <see cref="T:ApplicationAccess.ConcurrentAccessManager`4"/> instance used to read and write the permissions and authorizations.
            </summary>
            <returns>The new <see cref="T:ApplicationAccess.ConcurrentAccessManager`4"/> instance.</returns>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderWriterNodeBase`5.Dispose">
            <summary>
            Releases the unmanaged resources used by the ReaderWriterNodeBase.
            </summary>
        </member>
        <member name="M:ApplicationAccess.Hosting.ReaderWriterNodeBase`5.Dispose(System.Boolean)">
            <summary>
            Provides a method to free unmanaged resources used by this class.
            </summary>
            <param name="disposing">Whether the method is being called as part of an explicit Dispose routine, and hence whether managed resources should also be freed.</param>
        </member>
        <member name="T:ApplicationAccess.Hosting.TemporalEventBulkCachingNode`4">
            <summary>
            A node in an ApplicationAccess hosting environment which caches <see cref="T:ApplicationAccess.Persistence.Models.TemporalEventBufferItemBase"/> events for <see cref="T:ApplicationAccess.Hosting.ReaderNode`4">ReaderNodes</see>.
            </summary>
            <typeparam name="TUser">The type of users in the application.</typeparam>
            <typeparam name="TGroup">The type of groups in the application.</typeparam>
            <typeparam name="TComponent">The type of components in the application to manage access to.</typeparam>
            <typeparam name="TAccess">The type of levels of access which can be assigned to an application component.</typeparam>
        </member>
        <member name="F:ApplicationAccess.Hosting.TemporalEventBulkCachingNode`4.eventCache">
            <summary>The underlying object which performs caching.</summary>
        </member>
        <member name="F:ApplicationAccess.Hosting.TemporalEventBulkCachingNode`4.metricLogger">
            <summary>The logger for metrics.</summary>
        </member>
        <member name="F:ApplicationAccess.Hosting.TemporalEventBulkCachingNode`4.disposed">
            <summary>Indicates whether the object has been disposed.</summary>
        </member>
        <member name="M:ApplicationAccess.Hosting.TemporalEventBulkCachingNode`4.#ctor(System.Int32,ApplicationMetrics.IMetricLogger)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Hosting.TemporalEventBulkCachingNode class.
            </summary>
            <param name="cachedEventCount">The number of events to retain on the cache.</param>
            <param name="metricLogger">The logger for metrics.</param>
        </member>
        <member name="M:ApplicationAccess.Hosting.TemporalEventBulkCachingNode`4.PersistEvents(System.Collections.Generic.IList{ApplicationAccess.Persistence.Models.TemporalEventBufferItemBase})">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.TemporalEventBulkCachingNode`4.GetAllEventsSince(System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.TemporalEventBulkCachingNode`4.Dispose">
            <summary>
            Releases the unmanaged resources used by the ReaderNode.
            </summary>
        </member>
        <member name="M:ApplicationAccess.Hosting.TemporalEventBulkCachingNode`4.Dispose(System.Boolean)">
            <summary>
            Provides a method to free unmanaged resources used by this class.
            </summary>
            <param name="disposing">Whether the method is being called as part of an explicit Dispose routine, and hence whether managed resources should also be freed.</param>
        </member>
        <member name="T:ApplicationAccess.Hosting.WriterNode`4">
            <summary>
            A node in a multi-reader, single-writer ApplicationAccess hosting environment which allows writing permissions and authorizations for an application.
            </summary>
            <typeparam name="TUser">The type of users in the application.</typeparam>
            <typeparam name="TGroup">The type of groups in the application.</typeparam>
            <typeparam name="TComponent">The type of components in the application to manage access to.</typeparam>
            <typeparam name="TAccess">The type of levels of access which can be assigned to an application component.</typeparam>
        </member>
        <member name="M:ApplicationAccess.Hosting.WriterNode`4.#ctor(ApplicationAccess.Utilities.IHashCodeGenerator{`0},ApplicationAccess.Utilities.IHashCodeGenerator{`1},ApplicationAccess.Utilities.IHashCodeGenerator{System.String},ApplicationAccess.Persistence.IAccessManagerEventBufferFlushStrategy,ApplicationAccess.Persistence.IAccessManagerTemporalPersistentReader{`0,`1,`2,`3},ApplicationAccess.Persistence.IAccessManagerTemporalEventPersister{`0,`1,`2,`3},ApplicationAccess.Persistence.IAccessManagerTemporalEventPersister{`0,`1,`2,`3})">
            <summary>
            Initialises a new instance of the ApplicationAccess.Hosting.WriterNode class.
            </summary>
            <param name="userHashCodeGenerator">The hash code generator for users.</param>
            <param name="groupHashCodeGenerator">The hash code generator for groups.</param>
            <param name="entityTypeHashCodeGenerator">The hash code generator for entity types.</param>
            <param name="eventBufferFlushStrategy">Flush strategy for the <see cref="T:ApplicationAccess.Persistence.IAccessManagerEventBuffer`4"/> instance used by the node.</param>
            <param name="persistentReader">Used to load the complete state of the AccessManager instance.</param>
            <param name="eventPersister">Used to persist changes to the AccessManager.</param>
            <param name="eventCache">Cache for events which change the AccessManager.</param>
        </member>
        <member name="M:ApplicationAccess.Hosting.WriterNode`4.#ctor(ApplicationAccess.Utilities.IHashCodeGenerator{`0},ApplicationAccess.Utilities.IHashCodeGenerator{`1},ApplicationAccess.Utilities.IHashCodeGenerator{System.String},ApplicationAccess.Persistence.IAccessManagerEventBufferFlushStrategy,ApplicationAccess.Persistence.IAccessManagerTemporalPersistentReader{`0,`1,`2,`3},ApplicationAccess.Persistence.IAccessManagerTemporalEventBulkPersister{`0,`1,`2,`3},ApplicationAccess.Persistence.IAccessManagerTemporalEventBulkPersister{`0,`1,`2,`3})">
            <summary>
            Initialises a new instance of the ApplicationAccess.Hosting.WriterNode class.
            </summary>
            <param name="userHashCodeGenerator">The hash code generator for users.</param>
            <param name="groupHashCodeGenerator">The hash code generator for groups.</param>
            <param name="entityTypeHashCodeGenerator">The hash code generator for entity types.</param>
            <param name="eventBufferFlushStrategy">Flush strategy for the <see cref="T:ApplicationAccess.Persistence.IAccessManagerEventBuffer`4"/> instance used by the node.</param>
            <param name="persistentReader">Used to load the complete state of the AccessManager instance.</param>
            <param name="eventPersister">Used to persist changes to the AccessManager.</param>
            <param name="eventCache">Cache for events which change the AccessManager.</param>
        </member>
        <member name="M:ApplicationAccess.Hosting.WriterNode`4.#ctor(ApplicationAccess.Utilities.IHashCodeGenerator{`0},ApplicationAccess.Utilities.IHashCodeGenerator{`1},ApplicationAccess.Utilities.IHashCodeGenerator{System.String},ApplicationAccess.Persistence.IAccessManagerEventBufferFlushStrategy,ApplicationAccess.Persistence.IAccessManagerTemporalPersistentReader{`0,`1,`2,`3},ApplicationAccess.Persistence.IAccessManagerTemporalEventPersister{`0,`1,`2,`3},ApplicationAccess.Persistence.IAccessManagerTemporalEventPersister{`0,`1,`2,`3},ApplicationMetrics.IMetricLogger)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Hosting.WriterNode class.
            </summary>
            <param name="userHashCodeGenerator">The hash code generator for users.</param>
            <param name="groupHashCodeGenerator">The hash code generator for groups.</param>
            <param name="entityTypeHashCodeGenerator">The hash code generator for entity types.</param>
            <param name="eventBufferFlushStrategy">Flush strategy for the <see cref="T:ApplicationAccess.Persistence.IAccessManagerEventBuffer`4"/> instance used by the node.</param>
            <param name="persistentReader">Used to load the complete state of the AccessManager instance.</param>
            <param name="eventPersister">Used to persist changes to the AccessManager.</param>
            <param name="eventCache">Cache for events which change the AccessManager.</param>
            <param name="metricLogger">The logger for metrics.</param>
        </member>
        <member name="M:ApplicationAccess.Hosting.WriterNode`4.#ctor(ApplicationAccess.Utilities.IHashCodeGenerator{`0},ApplicationAccess.Utilities.IHashCodeGenerator{`1},ApplicationAccess.Utilities.IHashCodeGenerator{System.String},ApplicationAccess.Persistence.IAccessManagerEventBufferFlushStrategy,ApplicationAccess.Persistence.IAccessManagerTemporalPersistentReader{`0,`1,`2,`3},ApplicationAccess.Persistence.IAccessManagerTemporalEventBulkPersister{`0,`1,`2,`3},ApplicationAccess.Persistence.IAccessManagerTemporalEventBulkPersister{`0,`1,`2,`3},ApplicationMetrics.IMetricLogger)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Hosting.WriterNode class.
            </summary>
            <param name="userHashCodeGenerator">The hash code generator for users.</param>
            <param name="groupHashCodeGenerator">The hash code generator for groups.</param>
            <param name="entityTypeHashCodeGenerator">The hash code generator for entity types.</param>
            <param name="eventBufferFlushStrategy">Flush strategy for the <see cref="T:ApplicationAccess.Persistence.IAccessManagerEventBuffer`4"/> instance used by the node.</param>
            <param name="persistentReader">Used to load the complete state of the AccessManager instance.</param>
            <param name="eventPersister">Used to persist changes to the AccessManager.</param>
            <param name="eventCache">Cache for events which change the AccessManager.</param>
            <param name="metricLogger">The logger for metrics.</param>
        </member>
        <member name="M:ApplicationAccess.Hosting.WriterNode`4.InitializeAccessManager">
            <inheritdoc/>
        </member>
        <member name="T:ApplicationAccess.Hosting.WriterNodeBase`5">
            <summary>
            Base for nodes in a multi-reader, single-writer ApplicationAccess hosting environment which allow writing permissions and authorizations for an application.
            </summary>
            <typeparam name="TUser">The type of users in the application.</typeparam>
            <typeparam name="TGroup">The type of groups in the application.</typeparam>
            <typeparam name="TComponent">The type of components in the application to manage access to.</typeparam>
            <typeparam name="TAccess">The type of levels of access which can be assigned to an application component.</typeparam>
            <typeparam name="TAccessManager">The subclass of <see cref="T:ApplicationAccess.ConcurrentAccessManager`4"/> which should be used to write the permissions and authorizations.</typeparam>
        </member>
        <member name="F:ApplicationAccess.Hosting.WriterNodeBase`5.concurrentAccessManager">
            <summary>AccessManager instance which backs the event validator.</summary>
        </member>
        <member name="F:ApplicationAccess.Hosting.WriterNodeBase`5.eventValidator">
            <summary>Validates events passed to the event buffer.</summary>
        </member>
        <member name="F:ApplicationAccess.Hosting.WriterNodeBase`5.eventBuffer">
            <summary>Buffers events which change the AccessManager, writing them to the <see cref="T:ApplicationAccess.Persistence.IAccessManagerTemporalEventPersister`4"/> instance and the event cache.</summary>
        </member>
        <member name="F:ApplicationAccess.Hosting.WriterNodeBase`5.eventBufferFlushStrategy">
            <summary>Flush strategy for the event buffer.</summary>
        </member>
        <member name="F:ApplicationAccess.Hosting.WriterNodeBase`5.persistentReader">
            <summary>Used to load the complete state of the AccessManager instance.</summary>
        </member>
        <member name="F:ApplicationAccess.Hosting.WriterNodeBase`5.metricLogger">
            <summary>The logger for metrics.</summary>
        </member>
        <member name="F:ApplicationAccess.Hosting.WriterNodeBase`5.disposed">
            <summary>Indicates whether the object has been disposed.</summary>
        </member>
        <member name="P:ApplicationAccess.Hosting.WriterNodeBase`5.MetricLoggingEnabled">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.WriterNodeBase`5.#ctor(ApplicationAccess.Persistence.IAccessManagerEventBufferFlushStrategy,ApplicationAccess.Persistence.IAccessManagerTemporalPersistentReader{`0,`1,`2,`3})">
            <summary>
            Initialises a new instance of the ApplicationAccess.Hosting.WriterNodeBase class.
            </summary>
            <param name="eventBufferFlushStrategy">Flush strategy for the <see cref="T:ApplicationAccess.Persistence.IAccessManagerEventBuffer`4"/> instance used by the node.</param>
            <param name="persistentReader">Used to load the complete state of the AccessManager instance.</param>
        </member>
        <member name="M:ApplicationAccess.Hosting.WriterNodeBase`5.#ctor(ApplicationAccess.Persistence.IAccessManagerEventBufferFlushStrategy,ApplicationAccess.Persistence.IAccessManagerTemporalPersistentReader{`0,`1,`2,`3},ApplicationMetrics.IMetricLogger)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Hosting.WriterNodeBase class.
            </summary>
            <param name="eventBufferFlushStrategy">Flush strategy for the <see cref="T:ApplicationAccess.Persistence.IAccessManagerEventBuffer`4"/> instance used by the node.</param>
            <param name="persistentReader">Used to load the complete state of the AccessManager instance.</param>
            <param name="metricLogger">The logger for metrics.</param>
        </member>
        <member name="M:ApplicationAccess.Hosting.WriterNodeBase`5.Load(System.Boolean)">
            <summary>
            Loads the latest state of the AccessManager from persistent storage.
            </summary>
            <param name="throwExceptionIfStorageIsEmpty">When set true an exception will be thrown in the case that the persistent storage is empty.</param>
        </member>
        <member name="M:ApplicationAccess.Hosting.WriterNodeBase`5.AddUser(`0)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.WriterNodeBase`5.RemoveUser(`0)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.WriterNodeBase`5.AddGroup(`1)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.WriterNodeBase`5.RemoveGroup(`1)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.WriterNodeBase`5.AddUserToGroupMapping(`0,`1)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.WriterNodeBase`5.RemoveUserToGroupMapping(`0,`1)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.WriterNodeBase`5.AddGroupToGroupMapping(`1,`1)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.WriterNodeBase`5.RemoveGroupToGroupMapping(`1,`1)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.WriterNodeBase`5.AddUserToApplicationComponentAndAccessLevelMapping(`0,`2,`3)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.WriterNodeBase`5.RemoveUserToApplicationComponentAndAccessLevelMapping(`0,`2,`3)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.WriterNodeBase`5.AddGroupToApplicationComponentAndAccessLevelMapping(`1,`2,`3)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.WriterNodeBase`5.RemoveGroupToApplicationComponentAndAccessLevelMapping(`1,`2,`3)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.WriterNodeBase`5.AddEntityType(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.WriterNodeBase`5.RemoveEntityType(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.WriterNodeBase`5.AddEntity(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.WriterNodeBase`5.RemoveEntity(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.WriterNodeBase`5.AddUserToEntityMapping(`0,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.WriterNodeBase`5.RemoveUserToEntityMapping(`0,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.WriterNodeBase`5.AddGroupToEntityMapping(`1,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.WriterNodeBase`5.RemoveGroupToEntityMapping(`1,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Hosting.WriterNodeBase`5.Initialize(ApplicationAccess.Persistence.IAccessManagerEventBufferFlushStrategy,ApplicationAccess.Persistence.IAccessManagerTemporalPersistentReader{`0,`1,`2,`3})">
            <summary>
            Initializes members which are common between all constructors.
            </summary>
            <param name="eventBufferFlushStrategy">Flush strategy for the <see cref="T:ApplicationAccess.Persistence.IAccessManagerEventBuffer`4"/> instance used by the node.</param>
            <param name="persistentReader">Used to load the complete state of the AccessManager instance.</param>
        </member>
        <member name="M:ApplicationAccess.Hosting.WriterNodeBase`5.InitializeAccessManager">
            <summary>
            Initializes a new <see cref="T:ApplicationAccess.ConcurrentAccessManager`4"/> instance used for underlying writing/storage of permissions and authorizations.
            </summary>
            <returns>The new <see cref="T:ApplicationAccess.ConcurrentAccessManager`4"/> instance.</returns>
        </member>
        <member name="M:ApplicationAccess.Hosting.WriterNodeBase`5.Dispose">
            <summary>
            Releases the unmanaged resources used by the WriterNodeBase.
            </summary>
        </member>
        <member name="M:ApplicationAccess.Hosting.WriterNodeBase`5.Dispose(System.Boolean)">
            <summary>
            Provides a method to free unmanaged resources used by this class.
            </summary>
            <param name="disposing">Whether the method is being called as part of an explicit Dispose routine, and hence whether managed resources should also be freed.</param>
        </member>
    </members>
</doc>
