<?xml version="1.0" encoding="utf-8" ?>
<doc>
  <assembly>
    <name>ApplicationAccess</name>
  </assembly>
  <members>
    <member name="T:ApplicationAccess.IAccessManager`4">
      <summary>
        Defines methods to manage the access of users and groups of users to components and entities within an application.
      </summary>
      <typeparam name="TUser">The type of users in the application.</typeparam>
      <typeparam name="TGroup">The type of groups in the application</typeparam>
      <typeparam name="TComponent">The type of components in the application to manage access to.</typeparam>
      <typeparam name="TAccess">The type of levels of access which can be assigned to an application component.</typeparam>
    </member>
    <member name="P:ApplicationAccess.IAccessManager`4.Users">
      <summary>
        Returns a collection of all users in the access manager.
      </summary>
    </member>
    <member name="P:ApplicationAccess.IAccessManager`4.Groups">
      <summary>
        Returns a collection of all groups in the access manager.
      </summary>
    </member>
    <member name="P:ApplicationAccess.IAccessManager`4.EntityTypes">
      <summary>
        Returns a collection of all entities in the access manager.
      </summary>
    </member>
    <member name="M:ApplicationAccess.IAccessManager`4.AddUser(`0)">
      <summary>
        Adds a user.
      </summary>
      <param name="user">The user to add.</param>
    </member>
    <member name="M:ApplicationAccess.IAccessManager`4.ContainsUser(`0)">
      <summary>
        Returns true if the specified user exists.
      </summary>
      <param name="user">The user to check for.</param>
      <returns>True if the user exists.  False otherwise.</returns>
    </member>
    <member name="M:ApplicationAccess.IAccessManager`4.RemoveUser(`0)">
      <summary>
        Removes a user.
      </summary>
      <param name="user">The user to remove.</param>
    </member>
    <member name="M:ApplicationAccess.IAccessManager`4.AddGroup(`1)">
      <summary>
        Adds a group.
      </summary>
      <param name="group">The group to add.</param>
    </member>
    <member name="M:ApplicationAccess.IAccessManager`4.ContainsGroup(`1)">
      <summary>
        Returns true if the specified group exists.
      </summary>
      <param name="group">The group to check for.</param>
      <returns>True if the group exists.  False otherwise.</returns>
    </member>
    <member name="M:ApplicationAccess.IAccessManager`4.RemoveGroup(`1)">
      <summary>
        Removes a group.
      </summary>
      <param name="group">The group to remove.</param>
    </member>
    <member name="M:ApplicationAccess.IAccessManager`4.AddUserToGroupMapping(`0,`1)">
      <summary>
        Adds a mapping between the specified user and group.
      </summary>
      <param name="user">The user in the mapping.</param>
      <param name="group">The group in the mapping.</param>
    </member>
    <member name="M:ApplicationAccess.IAccessManager`4.GetUserToGroupMappings(`0)">
      <summary>
        Gets the groups that the specified user is mapped to (i.e. is a member of).
      </summary>
      <param name="user">The user to retrieve the groups for.</param>
      <returns>A collection of groups the specified user is a member of.</returns>
    </member>
    <member name="M:ApplicationAccess.IAccessManager`4.RemoveUserToGroupMapping(`0,`1)">
      <summary>
        Removes the mapping between the specified user and group.
      </summary>
      <param name="user">The user in the mapping.</param>
      <param name="group">The group in the mapping.</param>
    </member>
    <member name="M:ApplicationAccess.IAccessManager`4.AddGroupToGroupMapping(`1,`1)">
      <summary>
        Adds a mapping between the specified groups.
      </summary>
      <param name="fromGroup">The 'from' group in the mapping.</param>
      <param name="toGroup">The 'to' group in the mapping.</param>
    </member>
    <member name="M:ApplicationAccess.IAccessManager`4.GetGroupToGroupMappings(`1)">
      <summary>
        Gets the groups that the specified group is mapped to.
      </summary>
      <param name="group">The group to retrieve the mapped groups for.</param>
      <returns>A collection of groups the specified group is mapped to.</returns>
    </member>
    <member name="M:ApplicationAccess.IAccessManager`4.RemoveGroupToGroupMapping(`1,`1)">
      <summary>
        Removes the mapping between the specified groups.
      </summary>
      <param name="fromGroup">The 'from' group in the mapping.</param>
      <param name="toGroup">The 'to' group in the mapping.</param>
    </member>
    <member name="M:ApplicationAccess.IAccessManager`4.AddUserToApplicationComponentAndAccessLevelMapping(`0,`2,`3)">
      <summary>
        Adds a mapping between the specified user, application component, and level of access to that component.
      </summary>
      <param name="user">The user in the mapping.</param>
      <param name="applicationComponent">The application component in the mapping.</param>
      <param name="accessLevel">The level of access to the component.</param>
    </member>
    <member name="M:ApplicationAccess.IAccessManager`4.GetUserToApplicationComponentAndAccessLevelMappings(`0)">
      <summary>
        Gets the application component and access level pairs that the specified user is mapped to.
      </summary>
      <param name="user">The user to retrieve the mappings for.</param>
      <returns>A collection of Tuples containing the application component and access level pairs that the specified user is mapped to.</returns>
    </member>
    <member name="M:ApplicationAccess.IAccessManager`4.RemoveUserToApplicationComponentAndAccessLevelMapping(`0,`2,`3)">
      <summary>
        Removes a mapping between the specified user, application component, and level of access to that component.
      </summary>
      <param name="user">The user in the mapping.</param>
      <param name="applicationComponent">The application component in the mapping.</param>
      <param name="accessLevel">The level of access to the component.</param>
    </member>
    <member name="M:ApplicationAccess.IAccessManager`4.AddGroupToApplicationComponentAndAccessLevelMapping(`1,`2,`3)">
      <summary>
        Adds a mapping between the specified group, application component, and level of access to that component.
      </summary>
      <param name="group">The group in the mapping.</param>
      <param name="applicationComponent">The application component in the mapping.</param>
      <param name="accessLevel">The level of access to the component.</param>
    </member>
    <member name="M:ApplicationAccess.IAccessManager`4.GetGroupToApplicationComponentAndAccessLevelMappings(`1)">
      <summary>
        Gets the application component and access level pairs that the specified group is mapped to.
      </summary>
      <param name="group">The group to retrieve the mappings for.</param>
      <returns>A collection of Tuples containing the application component and access level pairs that the specified group is mapped to.</returns>
    </member>
    <member name="M:ApplicationAccess.IAccessManager`4.RemoveGroupToApplicationComponentAndAccessLevelMapping(`1,`2,`3)">
      <summary>
        Removes a mapping between the specified group, application component, and level of access to that component.
      </summary>
      <param name="group">The group in the mapping.</param>
      <param name="applicationComponent">The application component in the mapping.</param>
      <param name="accessLevel">The level of access to the component.</param>
    </member>
    <member name="M:ApplicationAccess.IAccessManager`4.AddEntityType(System.String)">
      <summary>
        Adds an entity type.
      </summary>
      <param name="entityType">The entity type to add.</param>
    </member>
    <member name="M:ApplicationAccess.IAccessManager`4.ContainsEntityType(System.String)">
      <summary>
        Returns true if the specified entity type exists.
      </summary>
      <param name="entityType">The entity type to check for.</param>
      <returns>True if the entity type exists.  False otherwise.</returns>
    </member>
    <member name="M:ApplicationAccess.IAccessManager`4.RemoveEntityType(System.String)">
      <summary>
        Removes an entity type.
      </summary>
      <param name="entityType">The entity type to remove.</param>
    </member>
    <member name="M:ApplicationAccess.IAccessManager`4.AddEntity(System.String,System.String)">
      <summary>
        Adds an entity.
      </summary>
      <param name="entityType">The type of the entity.</param>
      <param name="entity">The entity to add.</param>
    </member>
    <member name="M:ApplicationAccess.IAccessManager`4.GetEntities(System.String)">
      <summary>
        Returns all entities of the specified type.
      </summary>
      <param name="entityType">The type of the entity.</param>
      <returns>A collection of all entities of the specified type.</returns>
    </member>
    <member name="M:ApplicationAccess.IAccessManager`4.ContainsEntity(System.String,System.String)">
      <summary>
        Returns true if the specified entity exists.
      </summary>
      <param name="entityType">The type of the entity.</param>
      <param name="entity">The entity to check for.</param>
      <returns>True if the entity exists.  False otherwise.</returns>
    </member>
    <member name="M:ApplicationAccess.IAccessManager`4.RemoveEntity(System.String,System.String)">
      <summary>
        Removes an entity.
      </summary>
      <param name="entityType">The type of the entity.</param>
      <param name="entity">The entity to remove.</param>
    </member>
    <member name="M:ApplicationAccess.IAccessManager`4.AddUserToEntityMapping(`0,System.String,System.String)">
      <summary>
        Adds a mapping between the specified user, and entity.
      </summary>
      <param name="user">The user in the mapping.</param>
      <param name="entityType">The type of the entity.</param>
      <param name="entity">The entity in the mapping.</param>
    </member>
    <member name="M:ApplicationAccess.IAccessManager`4.GetUserToEntityMappings(`0)">
      <summary>
        Gets the entities that the specified user is mapped to.
      </summary>
      <param name="user">The user to retrieve the mappings for.</param>
      <returns>A collection of Tuples containing the entity type and entity that the specified user is mapped to.</returns>
    </member>
    <member name="M:ApplicationAccess.IAccessManager`4.GetUserToEntityMappings(`0,System.String)">
      <summary>
        Gets the entities of a given type that the specified user is mapped to.
      </summary>
      <param name="user">The user to retrieve the mappings for.</param>
      <param name="entityType">The entity type to retrieve the mappings for.</param>
      <returns>A collection of entities that the specified user is mapped to.</returns>
    </member>
    <member name="M:ApplicationAccess.IAccessManager`4.RemoveUserToEntityMapping(`0,System.String,System.String)">
      <summary>
        Removes a mapping between the specified user, and entity.
      </summary>
      <param name="user">The user in the mapping.</param>
      <param name="entityType">The type of the entity.</param>
      <param name="entity">The entity in the mapping.</param>
    </member>
    <member name="M:ApplicationAccess.IAccessManager`4.AddGroupToEntityMapping(`1,System.String,System.String)">
      <summary>
        Adds a mapping between the specified group, and entity.
      </summary>
      <param name="group">The group in the mapping.</param>
      <param name="entityType">The type of the entity.</param>
      <param name="entity">The entity in the mapping.</param>
    </member>
    <member name="M:ApplicationAccess.IAccessManager`4.GetGroupToEntityMappings(`1)">
      <summary>
        Gets the entities that the specified group is mapped to.
      </summary>
      <param name="group">The group to retrieve the mappings for.</param>
      <returns>A collection of Tuples containing the entity type and entity that the specified group is mapped to.</returns>
    </member>
    <member name="M:ApplicationAccess.IAccessManager`4.GetGroupToEntityMappings(`1,System.String)">
      <summary>
        Gets the entities of a given type that the specified group is mapped to.
      </summary>
      <param name="group">The group to retrieve the mappings for.</param>
      <param name="entityType">The entity type to retrieve the mappings for.</param>
      <returns>A collection of entities that the specified group is mapped to.</returns>
    </member>
    <member name="M:ApplicationAccess.IAccessManager`4.RemoveGroupToEntityMapping(`1,System.String,System.String)">
      <summary>
        Removes a mapping between the specified group, and entity.
      </summary>
      <param name="group">The group in the mapping.</param>
      <param name="entityType">The type of the entity.</param>
      <param name="entity">The entity in the mapping.</param>
    </member>
    <member name="M:ApplicationAccess.IAccessManager`4.HasAccessToApplicationComponent(`0,`2,`3)">
      <summary>
        Checks whether the specified user (or a group that the user is a member of) has access to an application component at the specified level of access.
      </summary>
      <param name="user">The user to check for.</param>
      <param name="applicationComponent">The application component.</param>
      <param name="accessLevel">The level of access to the component.</param>
      <returns>True if the user has access the component.  False otherwise.</returns>
    </member>
    <member name="M:ApplicationAccess.IAccessManager`4.HasAccessToEntity(`0,System.String,System.String)">
      <summary>
        Checks whether the specified user (or a group that the user is a member of) has access to the specified entity.
      </summary>
      <param name="user">The user to check for.</param>
      <param name="entityType">The type of the entity.</param>
      <param name="entity">The entity.</param>
      <returns>True if the user has access the entity.  False otherwise.</returns>
    </member>
    <member name="M:ApplicationAccess.IAccessManager`4.GetAccessibleEntities(`0,System.String)">
      <summary>
        Gets all entities of a given type that the specified user (or a group that the user is a member of) has access to.
      </summary>
      <param name="user">The user to retrieve the entities for.</param>
      <param name="entityType">The type of entities to retrieve.</param>
      <returns>The entities the user has access to.</returns>
    </member>
  </members>
</doc>