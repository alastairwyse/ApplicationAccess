<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ApplicationAccess.Validation</name>
    </assembly>
    <members>
        <member name="T:ApplicationAccess.Validation.ConcurrentAccessManagerEventValidator`4">
            <summary>
            An implementation of IAccessManagerEventValidator which uses a ConcurrentAccessManager instance to perform the event validation.
            </summary>
            <typeparam name="TUser">The type of users in the AccessManager implementation.</typeparam>
            <typeparam name="TGroup">The type of groups in the AccessManager implementation.</typeparam>
            <typeparam name="TComponent">The type of components in the AccessManager implementation.</typeparam>
            <typeparam name="TAccess">The type of levels of access which can be assigned to an application component.</typeparam>
        </member>
        <member name="F:ApplicationAccess.Validation.ConcurrentAccessManagerEventValidator`4.concurrentAccessManager">
            <summary>The ConcurrentAccessManager instance which is used to validate the events.</summary>
        </member>
        <member name="P:ApplicationAccess.Validation.ConcurrentAccessManagerEventValidator`4.ConcurrentAccessManager">
            <summary>
            The ConcurrentAccessManager instance which is used to validate the events.
            </summary>
        </member>
        <member name="M:ApplicationAccess.Validation.ConcurrentAccessManagerEventValidator`4.#ctor(ApplicationAccess.ConcurrentAccessManager{`0,`1,`2,`3})">
            <summary>
            Initialises a new instance of the ApplicationAccess.Validation.ConcurrentAccessManagerEventValidator class.
            </summary>
            <param name="concurrentAccessManager">A ConcurrentAccessManager instance to use to validate the events.</param>
        </member>
        <member name="M:ApplicationAccess.Validation.ConcurrentAccessManagerEventValidator`4.ValidateAddUser(`0,System.Action{`0})">
            <summary>
        Validates an event which adds a user.
      </summary><param name="user">The user to add.</param><param name="postValidationAction">An action to invoke after validating the event but whilst any mutual-exclusion locks are still acquired.</param><returns>The result of the validation.</returns>
        </member>
        <member name="M:ApplicationAccess.Validation.ConcurrentAccessManagerEventValidator`4.ValidateRemoveUser(`0,System.Action{`0})">
            <summary>
        Validates an event which removes a user.
      </summary><param name="user">The user to remove.</param><param name="postValidationAction">An action to invoke after removing the user but whilst any mutual-exclusion locks are still acquired.</param><returns>The result of the validation.</returns>
        </member>
        <member name="M:ApplicationAccess.Validation.ConcurrentAccessManagerEventValidator`4.ValidateAddGroup(`1,System.Action{`1})">
            <summary>
        Validates an event which adds a group.
      </summary><param name="group">The group to add.</param><param name="postValidationAction">An action to invoke after validating the event but whilst any mutual-exclusion locks are still acquired.</param><returns>The result of the validation.</returns>
        </member>
        <member name="M:ApplicationAccess.Validation.ConcurrentAccessManagerEventValidator`4.ValidateRemoveGroup(`1,System.Action{`1})">
            <summary>
        Validates an event which removes a group.
      </summary><param name="group">The group to remove.</param><param name="postValidationAction">An action to invoke after validating the event but whilst any mutual-exclusion locks are still acquired.</param><returns>The result of the validation.</returns>
        </member>
        <member name="M:ApplicationAccess.Validation.ConcurrentAccessManagerEventValidator`4.ValidateAddUserToGroupMapping(`0,`1,System.Action{`0,`1})">
            <summary>
        Validates an event which adds a mapping between a user and a group.
      </summary><param name="user">The user in the mapping.</param><param name="group">The group in the mapping.</param><param name="postValidationAction">An action to invoke after validating the event but whilst any mutual-exclusion locks are still acquired.</param><returns>The result of the validation.</returns>
        </member>
        <member name="M:ApplicationAccess.Validation.ConcurrentAccessManagerEventValidator`4.ValidateRemoveUserToGroupMapping(`0,`1,System.Action{`0,`1})">
            <summary>
        Validates an event which removes a mapping between a user and a group.
      </summary><param name="user">The user in the mapping.</param><param name="group">The group in the mapping.</param><param name="postValidationAction">An action to invoke after validating the event but whilst any mutual-exclusion locks are still acquired.</param><returns>The result of the validation.</returns>
        </member>
        <member name="M:ApplicationAccess.Validation.ConcurrentAccessManagerEventValidator`4.ValidateAddGroupToGroupMapping(`1,`1,System.Action{`1,`1})">
            <summary>
        Validates an event which adds a mapping between groups.
      </summary><param name="fromGroup">The 'from' group in the mapping.</param><param name="toGroup">The 'to' group in the mapping.</param><param name="postValidationAction">An action to invoke after validating the event but whilst any mutual-exclusion locks are still acquired.</param><returns>The result of the validation.</returns>
        </member>
        <member name="M:ApplicationAccess.Validation.ConcurrentAccessManagerEventValidator`4.ValidateRemoveGroupToGroupMapping(`1,`1,System.Action{`1,`1})">
            <summary>
        Validates an event which removes a mapping between groups.
      </summary><param name="fromGroup">The 'from' group in the mapping.</param><param name="toGroup">The 'to' group in the mapping.</param><param name="postValidationAction">An action to invoke after validating the event but whilst any mutual-exclusion locks are still acquired.</param><returns>The result of the validation.</returns>
        </member>
        <member name="M:ApplicationAccess.Validation.ConcurrentAccessManagerEventValidator`4.ValidateAddUserToApplicationComponentAndAccessLevelMapping(`0,`2,`3,System.Action{`0,`2,`3})">
            <summary>
        Validates an event which adds a mapping between a user, an application component, and level of access to that component.
      </summary><param name="user">The user in the mapping.</param><param name="applicationComponent">The application component in the mapping.</param><param name="accessLevel">The level of access to the component.</param><param name="postValidationAction">An action to invoke after validating the event but whilst any mutual-exclusion locks are still acquired.</param><returns>The result of the validation.</returns>
        </member>
        <member name="M:ApplicationAccess.Validation.ConcurrentAccessManagerEventValidator`4.ValidateRemoveUserToApplicationComponentAndAccessLevelMapping(`0,`2,`3,System.Action{`0,`2,`3})">
            <summary>
        Validates an event which removes a mapping between a user, an application component, and level of access to that component.
      </summary><param name="user">The user in the mapping.</param><param name="applicationComponent">The application component in the mapping.</param><param name="accessLevel">The level of access to the component.</param><param name="postValidationAction">An action to invoke after validating the event but whilst any mutual-exclusion locks are still acquired.</param><returns>The result of the validation.</returns>
        </member>
        <member name="M:ApplicationAccess.Validation.ConcurrentAccessManagerEventValidator`4.ValidateAddGroupToApplicationComponentAndAccessLevelMapping(`1,`2,`3,System.Action{`1,`2,`3})">
            <summary>
        Validates an event which adds a mapping between a group, an application component, and level of access to that component.
      </summary><param name="group">The group in the mapping.</param><param name="applicationComponent">The application component in the mapping.</param><param name="accessLevel">The level of access to the component.</param><param name="postValidationAction">An action to invoke after validating the event but whilst any mutual-exclusion locks are still acquired.</param><returns>The result of the validation.</returns>
        </member>
        <member name="M:ApplicationAccess.Validation.ConcurrentAccessManagerEventValidator`4.ValidateRemoveGroupToApplicationComponentAndAccessLevelMapping(`1,`2,`3,System.Action{`1,`2,`3})">
            <summary>
        Validates an event which removes a mapping between a group, an application component, and level of access to that component.
      </summary><param name="group">The group in the mapping.</param><param name="applicationComponent">The application component in the mapping.</param><param name="accessLevel">The level of access to the component.</param><param name="postValidationAction">An action to invoke after validating the event but whilst any mutual-exclusion locks are still acquired.</param><returns>The result of the validation.</returns>
        </member>
        <member name="M:ApplicationAccess.Validation.ConcurrentAccessManagerEventValidator`4.ValidateAddEntityType(System.String,System.Action{System.String})">
            <summary>
        Validates an event which adds an entity type.
      </summary><param name="entityType">The entity type to add.</param><param name="postValidationAction">An action to invoke after validating the event but whilst any mutual-exclusion locks are still acquired.</param><returns>The result of the validation.</returns>
        </member>
        <member name="M:ApplicationAccess.Validation.ConcurrentAccessManagerEventValidator`4.ValidateRemoveEntityType(System.String,System.Action{System.String})">
            <summary>
        Validates an event which removes an entity type.
      </summary><param name="entityType">The entity type to remove.</param><param name="postValidationAction">An action to invoke after validating the event but whilst any mutual-exclusion locks are still acquired.</param><returns>The result of the validation.</returns>
        </member>
        <member name="M:ApplicationAccess.Validation.ConcurrentAccessManagerEventValidator`4.ValidateAddEntity(System.String,System.String,System.Action{System.String,System.String})">
            <summary>
        Validates an event which adds an entity.
      </summary><param name="entityType">The type of the entity.</param><param name="entity">The entity to add.</param><param name="postValidationAction">An action to invoke after validating the event but whilst any mutual-exclusion locks are still acquired.</param><returns>The result of the validation.</returns>
        </member>
        <member name="M:ApplicationAccess.Validation.ConcurrentAccessManagerEventValidator`4.ValidateRemoveEntity(System.String,System.String,System.Action{System.String,System.String})">
            <summary>
        Validates an event which removes an entity.
      </summary><param name="entityType">The type of the entity.</param><param name="entity">The entity to remove.</param><param name="postValidationAction">An action to invoke after validating the event but whilst any mutual-exclusion locks are still acquired.</param><returns>The result of the validation.</returns>
        </member>
        <member name="M:ApplicationAccess.Validation.ConcurrentAccessManagerEventValidator`4.ValidateAddUserToEntityMapping(`0,System.String,System.String,System.Action{`0,System.String,System.String})">
            <summary>
        Validates an event which adds a mapping between a user, and an entity..
      </summary><param name="user">The user in the mapping.</param><param name="entityType">The type of the entity.</param><param name="entity">The entity in the mapping.</param><param name="postValidationAction">An action to invoke after validating the event but whilst any mutual-exclusion locks are still acquired.</param><returns>The result of the validation.</returns>
        </member>
        <member name="M:ApplicationAccess.Validation.ConcurrentAccessManagerEventValidator`4.ValidateRemoveUserToEntityMapping(`0,System.String,System.String,System.Action{`0,System.String,System.String})">
            <summary>
        Validates an event which removes a mapping between a user, and an entity..
      </summary><param name="user">The user in the mapping.</param><param name="entityType">The type of the entity.</param><param name="entity">The entity in the mapping.</param><param name="postValidationAction">An action to invoke after validating the event but whilst any mutual-exclusion locks are still acquired.</param><returns>The result of the validation.</returns>
        </member>
        <member name="M:ApplicationAccess.Validation.ConcurrentAccessManagerEventValidator`4.ValidateAddGroupToEntityMapping(`1,System.String,System.String,System.Action{`1,System.String,System.String})">
            <summary>
        Validates an event which adds a mapping between a group, and an entity.
      </summary><param name="group">The group in the mapping.</param><param name="entityType">The type of the entity.</param><param name="entity">The entity in the mapping.</param><param name="postValidationAction">An action to invoke after validating the event but whilst any mutual-exclusion locks are still acquired.</param><returns>The result of the validation.</returns>
        </member>
        <member name="M:ApplicationAccess.Validation.ConcurrentAccessManagerEventValidator`4.ValidateRemoveGroupToEntityMapping(`1,System.String,System.String,System.Action{`1,System.String,System.String})">
            <summary>
        Validates an event which removes a mapping between a group, and an entity.
      </summary><param name="group">The group in the mapping.</param><param name="entityType">The type of the entity.</param><param name="entity">The entity in the mapping.</param><param name="postValidationAction">An action to invoke after validating the event but whilst any mutual-exclusion locks are still acquired.</param><returns>The result of the validation.</returns>
        </member>
        <member name="M:ApplicationAccess.Validation.ConcurrentAccessManagerEventValidator`4.InvokeActionAndWrapResponse(System.Action)">
            <summary>
            Invokes the specified action against the 'concurrentAccessManager' member, and wraps the result of invocation in a ValidationResult instance.
            </summary>
            <param name="concurrentAccessManagerAction">The action to invoke against the 'concurrentAccessManager' member</param>
            <returns>A ValidationResult instance indicating the result of the invocation.</returns>
        </member>
        <member name="T:ApplicationAccess.Validation.IAccessManagerEventValidator`4">
            <summary>
        Defines methods to validate events which change the structure of an AccessManager implementation.  Includes the ability to invoke an arbitary 'postValidationAction, which in the case of implementations which use mutual-exclusion locks, should be invoked while those locks are still acquired.
      </summary><typeparam name="TUser">The type of users in the AccessManager implementation.</typeparam><typeparam name="TGroup">The type of groups in the AccessManager implementation.</typeparam><typeparam name="TComponent">The type of components in the AccessManager implementation.</typeparam><typeparam name="TAccess">The type of levels of access which can be assigned to an application component.</typeparam>
        </member>
        <member name="M:ApplicationAccess.Validation.IAccessManagerEventValidator`4.ValidateAddUser(`0,System.Action{`0})">
            <summary>
        Validates an event which adds a user.
      </summary><param name="user">The user to add.</param><param name="postValidationAction">An action to invoke after validating the event but whilst any mutual-exclusion locks are still acquired.</param><returns>The result of the validation.</returns>
        </member>
        <member name="M:ApplicationAccess.Validation.IAccessManagerEventValidator`4.ValidateRemoveUser(`0,System.Action{`0})">
            <summary>
        Validates an event which removes a user.
      </summary><param name="user">The user to remove.</param><param name="postValidationAction">An action to invoke after removing the user but whilst any mutual-exclusion locks are still acquired.</param><returns>The result of the validation.</returns>
        </member>
        <member name="M:ApplicationAccess.Validation.IAccessManagerEventValidator`4.ValidateAddGroup(`1,System.Action{`1})">
            <summary>
        Validates an event which adds a group.
      </summary><param name="group">The group to add.</param><param name="postValidationAction">An action to invoke after validating the event but whilst any mutual-exclusion locks are still acquired.</param><returns>The result of the validation.</returns>
        </member>
        <member name="M:ApplicationAccess.Validation.IAccessManagerEventValidator`4.ValidateRemoveGroup(`1,System.Action{`1})">
            <summary>
        Validates an event which removes a group.
      </summary><param name="group">The group to remove.</param><param name="postValidationAction">An action to invoke after validating the event but whilst any mutual-exclusion locks are still acquired.</param><returns>The result of the validation.</returns>
        </member>
        <member name="M:ApplicationAccess.Validation.IAccessManagerEventValidator`4.ValidateAddUserToGroupMapping(`0,`1,System.Action{`0,`1})">
            <summary>
        Validates an event which adds a mapping between a user and a group.
      </summary><param name="user">The user in the mapping.</param><param name="group">The group in the mapping.</param><param name="postValidationAction">An action to invoke after validating the event but whilst any mutual-exclusion locks are still acquired.</param><returns>The result of the validation.</returns>
        </member>
        <member name="M:ApplicationAccess.Validation.IAccessManagerEventValidator`4.ValidateRemoveUserToGroupMapping(`0,`1,System.Action{`0,`1})">
            <summary>
        Validates an event which removes a mapping between a user and a group.
      </summary><param name="user">The user in the mapping.</param><param name="group">The group in the mapping.</param><param name="postValidationAction">An action to invoke after validating the event but whilst any mutual-exclusion locks are still acquired.</param><returns>The result of the validation.</returns>
        </member>
        <member name="M:ApplicationAccess.Validation.IAccessManagerEventValidator`4.ValidateAddGroupToGroupMapping(`1,`1,System.Action{`1,`1})">
            <summary>
        Validates an event which adds a mapping between groups.
      </summary><param name="fromGroup">The 'from' group in the mapping.</param><param name="toGroup">The 'to' group in the mapping.</param><param name="postValidationAction">An action to invoke after validating the event but whilst any mutual-exclusion locks are still acquired.</param><returns>The result of the validation.</returns>
        </member>
        <member name="M:ApplicationAccess.Validation.IAccessManagerEventValidator`4.ValidateRemoveGroupToGroupMapping(`1,`1,System.Action{`1,`1})">
            <summary>
        Validates an event which removes a mapping between groups.
      </summary><param name="fromGroup">The 'from' group in the mapping.</param><param name="toGroup">The 'to' group in the mapping.</param><param name="postValidationAction">An action to invoke after validating the event but whilst any mutual-exclusion locks are still acquired.</param><returns>The result of the validation.</returns>
        </member>
        <member name="M:ApplicationAccess.Validation.IAccessManagerEventValidator`4.ValidateAddUserToApplicationComponentAndAccessLevelMapping(`0,`2,`3,System.Action{`0,`2,`3})">
            <summary>
        Validates an event which adds a mapping between a user, an application component, and level of access to that component.
      </summary><param name="user">The user in the mapping.</param><param name="applicationComponent">The application component in the mapping.</param><param name="accessLevel">The level of access to the component.</param><param name="postValidationAction">An action to invoke after validating the event but whilst any mutual-exclusion locks are still acquired.</param><returns>The result of the validation.</returns>
        </member>
        <member name="M:ApplicationAccess.Validation.IAccessManagerEventValidator`4.ValidateRemoveUserToApplicationComponentAndAccessLevelMapping(`0,`2,`3,System.Action{`0,`2,`3})">
            <summary>
        Validates an event which removes a mapping between a user, an application component, and level of access to that component.
      </summary><param name="user">The user in the mapping.</param><param name="applicationComponent">The application component in the mapping.</param><param name="accessLevel">The level of access to the component.</param><param name="postValidationAction">An action to invoke after validating the event but whilst any mutual-exclusion locks are still acquired.</param><returns>The result of the validation.</returns>
        </member>
        <member name="M:ApplicationAccess.Validation.IAccessManagerEventValidator`4.ValidateAddGroupToApplicationComponentAndAccessLevelMapping(`1,`2,`3,System.Action{`1,`2,`3})">
            <summary>
        Validates an event which adds a mapping between a group, an application component, and level of access to that component.
      </summary><param name="group">The group in the mapping.</param><param name="applicationComponent">The application component in the mapping.</param><param name="accessLevel">The level of access to the component.</param><param name="postValidationAction">An action to invoke after validating the event but whilst any mutual-exclusion locks are still acquired.</param><returns>The result of the validation.</returns>
        </member>
        <member name="M:ApplicationAccess.Validation.IAccessManagerEventValidator`4.ValidateRemoveGroupToApplicationComponentAndAccessLevelMapping(`1,`2,`3,System.Action{`1,`2,`3})">
            <summary>
        Validates an event which removes a mapping between a group, an application component, and level of access to that component.
      </summary><param name="group">The group in the mapping.</param><param name="applicationComponent">The application component in the mapping.</param><param name="accessLevel">The level of access to the component.</param><param name="postValidationAction">An action to invoke after validating the event but whilst any mutual-exclusion locks are still acquired.</param><returns>The result of the validation.</returns>
        </member>
        <member name="M:ApplicationAccess.Validation.IAccessManagerEventValidator`4.ValidateAddEntityType(System.String,System.Action{System.String})">
            <summary>
        Validates an event which adds an entity type.
      </summary><param name="entityType">The entity type to add.</param><param name="postValidationAction">An action to invoke after validating the event but whilst any mutual-exclusion locks are still acquired.</param><returns>The result of the validation.</returns>
        </member>
        <member name="M:ApplicationAccess.Validation.IAccessManagerEventValidator`4.ValidateRemoveEntityType(System.String,System.Action{System.String})">
            <summary>
        Validates an event which removes an entity type.
      </summary><param name="entityType">The entity type to remove.</param><param name="postValidationAction">An action to invoke after validating the event but whilst any mutual-exclusion locks are still acquired.</param><returns>The result of the validation.</returns>
        </member>
        <member name="M:ApplicationAccess.Validation.IAccessManagerEventValidator`4.ValidateAddEntity(System.String,System.String,System.Action{System.String,System.String})">
            <summary>
        Validates an event which adds an entity.
      </summary><param name="entityType">The type of the entity.</param><param name="entity">The entity to add.</param><param name="postValidationAction">An action to invoke after validating the event but whilst any mutual-exclusion locks are still acquired.</param><returns>The result of the validation.</returns>
        </member>
        <member name="M:ApplicationAccess.Validation.IAccessManagerEventValidator`4.ValidateRemoveEntity(System.String,System.String,System.Action{System.String,System.String})">
            <summary>
        Validates an event which removes an entity.
      </summary><param name="entityType">The type of the entity.</param><param name="entity">The entity to remove.</param><param name="postValidationAction">An action to invoke after validating the event but whilst any mutual-exclusion locks are still acquired.</param><returns>The result of the validation.</returns>
        </member>
        <member name="M:ApplicationAccess.Validation.IAccessManagerEventValidator`4.ValidateAddUserToEntityMapping(`0,System.String,System.String,System.Action{`0,System.String,System.String})">
            <summary>
        Validates an event which adds a mapping between a user, and an entity..
      </summary><param name="user">The user in the mapping.</param><param name="entityType">The type of the entity.</param><param name="entity">The entity in the mapping.</param><param name="postValidationAction">An action to invoke after validating the event but whilst any mutual-exclusion locks are still acquired.</param><returns>The result of the validation.</returns>
        </member>
        <member name="M:ApplicationAccess.Validation.IAccessManagerEventValidator`4.ValidateRemoveUserToEntityMapping(`0,System.String,System.String,System.Action{`0,System.String,System.String})">
            <summary>
        Validates an event which removes a mapping between a user, and an entity..
      </summary><param name="user">The user in the mapping.</param><param name="entityType">The type of the entity.</param><param name="entity">The entity in the mapping.</param><param name="postValidationAction">An action to invoke after validating the event but whilst any mutual-exclusion locks are still acquired.</param><returns>The result of the validation.</returns>
        </member>
        <member name="M:ApplicationAccess.Validation.IAccessManagerEventValidator`4.ValidateAddGroupToEntityMapping(`1,System.String,System.String,System.Action{`1,System.String,System.String})">
            <summary>
        Validates an event which adds a mapping between a group, and an entity.
      </summary><param name="group">The group in the mapping.</param><param name="entityType">The type of the entity.</param><param name="entity">The entity in the mapping.</param><param name="postValidationAction">An action to invoke after validating the event but whilst any mutual-exclusion locks are still acquired.</param><returns>The result of the validation.</returns>
        </member>
        <member name="M:ApplicationAccess.Validation.IAccessManagerEventValidator`4.ValidateRemoveGroupToEntityMapping(`1,System.String,System.String,System.Action{`1,System.String,System.String})">
            <summary>
        Validates an event which removes a mapping between a group, and an entity.
      </summary><param name="group">The group in the mapping.</param><param name="entityType">The type of the entity.</param><param name="entity">The entity in the mapping.</param><param name="postValidationAction">An action to invoke after validating the event but whilst any mutual-exclusion locks are still acquired.</param><returns>The result of the validation.</returns>
        </member>
        <member name="T:ApplicationAccess.Validation.NullAccessManagerEventValidator`4">
            <summary>
            An implementation of IAccessManagerEventValidator which calls the post-validation action without validating.
            </summary>
            <typeparam name="TUser">The type of users in the AccessManager implementation.</typeparam>
            <typeparam name="TGroup">The type of groups in the AccessManager implementation.</typeparam>
            <typeparam name="TComponent">The type of components in the AccessManager implementation.</typeparam>
            <typeparam name="TAccess">The type of levels of access which can be assigned to an application component.</typeparam>
        </member>
        <member name="M:ApplicationAccess.Validation.NullAccessManagerEventValidator`4.#ctor">
            <summary>
            Initialises a new instance of the ApplicationAccess.Validation.NullAccessManagerEventValidator class.
            </summary>
        </member>
        <member name="M:ApplicationAccess.Validation.NullAccessManagerEventValidator`4.ValidateAddUser(`0,System.Action{`0})">
            <summary>
        Validates an event which adds a user.
      </summary><param name="user">The user to add.</param><param name="postValidationAction">An action to invoke after validating the event but whilst any mutual-exclusion locks are still acquired.</param><returns>The result of the validation.</returns>
        </member>
        <member name="M:ApplicationAccess.Validation.NullAccessManagerEventValidator`4.ValidateRemoveUser(`0,System.Action{`0})">
            <summary>
        Validates an event which removes a user.
      </summary><param name="user">The user to remove.</param><param name="postValidationAction">An action to invoke after removing the user but whilst any mutual-exclusion locks are still acquired.</param><returns>The result of the validation.</returns>
        </member>
        <member name="M:ApplicationAccess.Validation.NullAccessManagerEventValidator`4.ValidateAddGroup(`1,System.Action{`1})">
            <summary>
        Validates an event which adds a group.
      </summary><param name="group">The group to add.</param><param name="postValidationAction">An action to invoke after validating the event but whilst any mutual-exclusion locks are still acquired.</param><returns>The result of the validation.</returns>
        </member>
        <member name="M:ApplicationAccess.Validation.NullAccessManagerEventValidator`4.ValidateRemoveGroup(`1,System.Action{`1})">
            <summary>
        Validates an event which removes a group.
      </summary><param name="group">The group to remove.</param><param name="postValidationAction">An action to invoke after validating the event but whilst any mutual-exclusion locks are still acquired.</param><returns>The result of the validation.</returns>
        </member>
        <member name="M:ApplicationAccess.Validation.NullAccessManagerEventValidator`4.ValidateAddUserToGroupMapping(`0,`1,System.Action{`0,`1})">
            <summary>
        Validates an event which adds a mapping between a user and a group.
      </summary><param name="user">The user in the mapping.</param><param name="group">The group in the mapping.</param><param name="postValidationAction">An action to invoke after validating the event but whilst any mutual-exclusion locks are still acquired.</param><returns>The result of the validation.</returns>
        </member>
        <member name="M:ApplicationAccess.Validation.NullAccessManagerEventValidator`4.ValidateRemoveUserToGroupMapping(`0,`1,System.Action{`0,`1})">
            <summary>
        Validates an event which removes a mapping between a user and a group.
      </summary><param name="user">The user in the mapping.</param><param name="group">The group in the mapping.</param><param name="postValidationAction">An action to invoke after validating the event but whilst any mutual-exclusion locks are still acquired.</param><returns>The result of the validation.</returns>
        </member>
        <member name="M:ApplicationAccess.Validation.NullAccessManagerEventValidator`4.ValidateAddGroupToGroupMapping(`1,`1,System.Action{`1,`1})">
            <summary>
        Validates an event which adds a mapping between groups.
      </summary><param name="fromGroup">The 'from' group in the mapping.</param><param name="toGroup">The 'to' group in the mapping.</param><param name="postValidationAction">An action to invoke after validating the event but whilst any mutual-exclusion locks are still acquired.</param><returns>The result of the validation.</returns>
        </member>
        <member name="M:ApplicationAccess.Validation.NullAccessManagerEventValidator`4.ValidateRemoveGroupToGroupMapping(`1,`1,System.Action{`1,`1})">
            <summary>
        Validates an event which removes a mapping between groups.
      </summary><param name="fromGroup">The 'from' group in the mapping.</param><param name="toGroup">The 'to' group in the mapping.</param><param name="postValidationAction">An action to invoke after validating the event but whilst any mutual-exclusion locks are still acquired.</param><returns>The result of the validation.</returns>
        </member>
        <member name="M:ApplicationAccess.Validation.NullAccessManagerEventValidator`4.ValidateAddUserToApplicationComponentAndAccessLevelMapping(`0,`2,`3,System.Action{`0,`2,`3})">
            <summary>
        Validates an event which adds a mapping between a user, an application component, and level of access to that component.
      </summary><param name="user">The user in the mapping.</param><param name="applicationComponent">The application component in the mapping.</param><param name="accessLevel">The level of access to the component.</param><param name="postValidationAction">An action to invoke after validating the event but whilst any mutual-exclusion locks are still acquired.</param><returns>The result of the validation.</returns>
        </member>
        <member name="M:ApplicationAccess.Validation.NullAccessManagerEventValidator`4.ValidateRemoveUserToApplicationComponentAndAccessLevelMapping(`0,`2,`3,System.Action{`0,`2,`3})">
            <summary>
        Validates an event which removes a mapping between a user, an application component, and level of access to that component.
      </summary><param name="user">The user in the mapping.</param><param name="applicationComponent">The application component in the mapping.</param><param name="accessLevel">The level of access to the component.</param><param name="postValidationAction">An action to invoke after validating the event but whilst any mutual-exclusion locks are still acquired.</param><returns>The result of the validation.</returns>
        </member>
        <member name="M:ApplicationAccess.Validation.NullAccessManagerEventValidator`4.ValidateAddGroupToApplicationComponentAndAccessLevelMapping(`1,`2,`3,System.Action{`1,`2,`3})">
            <summary>
        Validates an event which adds a mapping between a group, an application component, and level of access to that component.
      </summary><param name="group">The group in the mapping.</param><param name="applicationComponent">The application component in the mapping.</param><param name="accessLevel">The level of access to the component.</param><param name="postValidationAction">An action to invoke after validating the event but whilst any mutual-exclusion locks are still acquired.</param><returns>The result of the validation.</returns>
        </member>
        <member name="M:ApplicationAccess.Validation.NullAccessManagerEventValidator`4.ValidateRemoveGroupToApplicationComponentAndAccessLevelMapping(`1,`2,`3,System.Action{`1,`2,`3})">
            <summary>
        Validates an event which removes a mapping between a group, an application component, and level of access to that component.
      </summary><param name="group">The group in the mapping.</param><param name="applicationComponent">The application component in the mapping.</param><param name="accessLevel">The level of access to the component.</param><param name="postValidationAction">An action to invoke after validating the event but whilst any mutual-exclusion locks are still acquired.</param><returns>The result of the validation.</returns>
        </member>
        <member name="M:ApplicationAccess.Validation.NullAccessManagerEventValidator`4.ValidateAddEntityType(System.String,System.Action{System.String})">
            <summary>
        Validates an event which adds an entity type.
      </summary><param name="entityType">The entity type to add.</param><param name="postValidationAction">An action to invoke after validating the event but whilst any mutual-exclusion locks are still acquired.</param><returns>The result of the validation.</returns>
        </member>
        <member name="M:ApplicationAccess.Validation.NullAccessManagerEventValidator`4.ValidateRemoveEntityType(System.String,System.Action{System.String})">
            <summary>
        Validates an event which removes an entity type.
      </summary><param name="entityType">The entity type to remove.</param><param name="postValidationAction">An action to invoke after validating the event but whilst any mutual-exclusion locks are still acquired.</param><returns>The result of the validation.</returns>
        </member>
        <member name="M:ApplicationAccess.Validation.NullAccessManagerEventValidator`4.ValidateAddEntity(System.String,System.String,System.Action{System.String,System.String})">
            <summary>
        Validates an event which adds an entity.
      </summary><param name="entityType">The type of the entity.</param><param name="entity">The entity to add.</param><param name="postValidationAction">An action to invoke after validating the event but whilst any mutual-exclusion locks are still acquired.</param><returns>The result of the validation.</returns>
        </member>
        <member name="M:ApplicationAccess.Validation.NullAccessManagerEventValidator`4.ValidateRemoveEntity(System.String,System.String,System.Action{System.String,System.String})">
            <summary>
        Validates an event which removes an entity.
      </summary><param name="entityType">The type of the entity.</param><param name="entity">The entity to remove.</param><param name="postValidationAction">An action to invoke after validating the event but whilst any mutual-exclusion locks are still acquired.</param><returns>The result of the validation.</returns>
        </member>
        <member name="M:ApplicationAccess.Validation.NullAccessManagerEventValidator`4.ValidateAddUserToEntityMapping(`0,System.String,System.String,System.Action{`0,System.String,System.String})">
            <summary>
        Validates an event which adds a mapping between a user, and an entity..
      </summary><param name="user">The user in the mapping.</param><param name="entityType">The type of the entity.</param><param name="entity">The entity in the mapping.</param><param name="postValidationAction">An action to invoke after validating the event but whilst any mutual-exclusion locks are still acquired.</param><returns>The result of the validation.</returns>
        </member>
        <member name="M:ApplicationAccess.Validation.NullAccessManagerEventValidator`4.ValidateRemoveUserToEntityMapping(`0,System.String,System.String,System.Action{`0,System.String,System.String})">
            <summary>
        Validates an event which removes a mapping between a user, and an entity..
      </summary><param name="user">The user in the mapping.</param><param name="entityType">The type of the entity.</param><param name="entity">The entity in the mapping.</param><param name="postValidationAction">An action to invoke after validating the event but whilst any mutual-exclusion locks are still acquired.</param><returns>The result of the validation.</returns>
        </member>
        <member name="M:ApplicationAccess.Validation.NullAccessManagerEventValidator`4.ValidateAddGroupToEntityMapping(`1,System.String,System.String,System.Action{`1,System.String,System.String})">
            <summary>
        Validates an event which adds a mapping between a group, and an entity.
      </summary><param name="group">The group in the mapping.</param><param name="entityType">The type of the entity.</param><param name="entity">The entity in the mapping.</param><param name="postValidationAction">An action to invoke after validating the event but whilst any mutual-exclusion locks are still acquired.</param><returns>The result of the validation.</returns>
        </member>
        <member name="M:ApplicationAccess.Validation.NullAccessManagerEventValidator`4.ValidateRemoveGroupToEntityMapping(`1,System.String,System.String,System.Action{`1,System.String,System.String})">
            <summary>
        Validates an event which removes a mapping between a group, and an entity.
      </summary><param name="group">The group in the mapping.</param><param name="entityType">The type of the entity.</param><param name="entity">The entity in the mapping.</param><param name="postValidationAction">An action to invoke after validating the event but whilst any mutual-exclusion locks are still acquired.</param><returns>The result of the validation.</returns>
        </member>
        <member name="T:ApplicationAccess.Validation.ValidationResult">
            <summary>
            Container class which represents the result of a validation operation.
            </summary>
        </member>
        <member name="F:ApplicationAccess.Validation.ValidationResult.successful">
            <summary>Whether or not the validation operation resulted in success.</summary>
        </member>
        <member name="F:ApplicationAccess.Validation.ValidationResult.message">
            <summary>Describes the reason for failure in the case the validation operation was not successful.</summary>
        </member>
        <member name="F:ApplicationAccess.Validation.ValidationResult.validationException">
            <summary>An optional exception, providing further detail for the reason for failure in the case the validation operation was not successful.  Null if not set.</summary>
        </member>
        <member name="P:ApplicationAccess.Validation.ValidationResult.Successful">
            <summary>
            Whether or not the validation operation resulted in success.
            </summary>
        </member>
        <member name="P:ApplicationAccess.Validation.ValidationResult.Message">
            <summary>
            Describes the reason for failure in the case the validation operation was not successful.
            </summary>
        </member>
        <member name="P:ApplicationAccess.Validation.ValidationResult.ValidationException">
            <summary>
            An optional exception, providing further detail for the reason for failure in the case the validation operation was not successful.
            </summary>
        </member>
        <member name="M:ApplicationAccess.Validation.ValidationResult.#ctor(System.Boolean)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Validation.ValidationResult class.
            </summary>
            <param name="successful">Whether or not the validation operation resulted in success.  Should be set true for this constructor overload.</param>
        </member>
        <member name="M:ApplicationAccess.Validation.ValidationResult.#ctor(System.Boolean,System.String)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Validation.ValidationResult class.
            </summary>
            <param name="successful">Whether or not the validation operation resulted in success.  Should be set false for this constructor overload.</param>
            <param name="message">Describes the reason for failure of the validation operation.</param>
        </member>
        <member name="M:ApplicationAccess.Validation.ValidationResult.#ctor(System.Boolean,System.String,System.Exception)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Validation.ValidationResult class.
            </summary>
            <param name="successful">Whether or not the validation operation resulted in success.  Should be set false for this constructor overload.</param>
            <param name="message">Describes the reason for failure of the validation operation.</param>
            <param name="validationException">An exception providing further detail for the reason for the failure of the validation operation.</param>
        </member>
    </members>
</doc>
