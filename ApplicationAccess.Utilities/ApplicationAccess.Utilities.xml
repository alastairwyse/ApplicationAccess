<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ApplicationAccess.Utilities</name>
    </assembly>
    <members>
        <member name="T:ApplicationAccess.Utilities.DefaultDateTimeProvider">
            <summary>
            Returns the current date and time using the static DateTime struct.
            </summary>
        </member>
        <member name="M:ApplicationAccess.Utilities.DefaultDateTimeProvider.UtcNow">
            <inheritdoc/>
        </member>
        <member name="T:ApplicationAccess.Utilities.DefaultGuidProvider">
            <summary>
            Returns new random Guids using the static Guid struct.
            </summary>
        </member>
        <member name="M:ApplicationAccess.Utilities.DefaultGuidProvider.NewGuid">
            <inheritdoc/>
        </member>
        <member name="T:ApplicationAccess.Utilities.DefaultStringHashCodeGenerator">
            <summary>
            Default implementation of <see cref="T:ApplicationAccess.Utilities.IHashCodeGenerator`1"/> for strings.
            </summary>
        </member>
        <member name="M:ApplicationAccess.Utilities.DefaultStringHashCodeGenerator.GetHashCode(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:ApplicationAccess.Utilities.DefaultThreadPauser">
            <summary>
            Default implementation of <see cref="T:ApplicationAccess.Utilities.IThreadPauser"/> which wraps a <see cref="T:System.Threading.ManualResetEvent"/>.
            </summary>
        </member>
        <member name="F:ApplicationAccess.Utilities.DefaultThreadPauser.resetEvent">
            <summary>The underlying <see cref="T:System.Threading.ManualResetEvent"/> which implements the pausing.</summary>
        </member>
        <member name="F:ApplicationAccess.Utilities.DefaultThreadPauser.disposed">
            <summary>Indicates whether the object has been disposed.</summary>
        </member>
        <member name="M:ApplicationAccess.Utilities.DefaultThreadPauser.#ctor">
            <summary>
            Initialises a new instance of the ApplicationAccess.Utilities.DefaultThreadPauser class.
            </summary>
        </member>
        <member name="M:ApplicationAccess.Utilities.DefaultThreadPauser.TestPaused">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Utilities.DefaultThreadPauser.Pause">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Utilities.DefaultThreadPauser.Resume">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Utilities.DefaultThreadPauser.Dispose">
            <summary>
            Releases the unmanaged resources used by the DefaultThreadPauser.
            </summary>
        </member>
        <member name="M:ApplicationAccess.Utilities.DefaultThreadPauser.Dispose(System.Boolean)">
            <summary>
            Provides a method to free unmanaged resources used by this class.
            </summary>
            <param name="disposing">Whether the method is being called as part of an explicit Dispose routine, and hence whether managed resources should also be freed.</param>
        </member>
        <member name="T:ApplicationAccess.Utilities.IDateTimeProvider">
            <summary>
            Defines methods which returns the current date and time.
            </summary>
        </member>
        <member name="M:ApplicationAccess.Utilities.IDateTimeProvider.UtcNow">
            <summary>
            Returns the current date and time expressed as the Coordinated Universal Time (UTC).
            </summary>
            <returns>The current date and time expressed as the Coordinated Universal Time (UTC).</returns>
        </member>
        <member name="T:ApplicationAccess.Utilities.IGuidProvider">
            <summary>
            Defines a method which returns random Guids.
            </summary>
        </member>
        <member name="M:ApplicationAccess.Utilities.IGuidProvider.NewGuid">
            <summary>
            Creates a new random Guid.
            </summary>
            <returns>A new Guid.</returns>
        </member>
        <member name="T:ApplicationAccess.Utilities.IHashCodeGenerator`1">
            <summary>
            Defines methods to generate evenly distributed hash codes for the specified type.
            </summary>
            <typeparam name="T">The type to generate hash codes for.</typeparam>
        </member>
        <member name="M:ApplicationAccess.Utilities.IHashCodeGenerator`1.GetHashCode(`0)">
            <summary>
            Generates a hash code for the specified value.
            </summary>
            <param name="inputValue">The value to generate the hash code for.</param>
            <returns>The hash code.</returns>
        </member>
        <member name="T:ApplicationAccess.Utilities.IThreadPauser">
            <summary>
            Defines methods to pause/hold the work of calling threads, and then subsequently allow them to continue processing.
            </summary>
        </member>
        <member name="M:ApplicationAccess.Utilities.IThreadPauser.TestPaused">
            <summary>
            Should be called by the threads performing the processing to check whether the <see cref="T:ApplicationAccess.Utilities.IThreadPauser"/> is paused.  If paused, the thread will wait until the <see cref="M:ApplicationAccess.Utilities.IThreadPauser.Resume"/> method is called.  If not paused, the method will return immediately.
            </summary>
        </member>
        <member name="M:ApplicationAccess.Utilities.IThreadPauser.Pause">
            <summary>
            Pauses/holds any threads which subsequently call the <see cref="M:ApplicationAccess.Utilities.IThreadPauser.TestPaused"/> method.
            </summary>
        </member>
        <member name="M:ApplicationAccess.Utilities.IThreadPauser.Resume">
            <summary>
            Releases any threads which are currently paused/held, and allows subsequent calls to <see cref="M:ApplicationAccess.Utilities.IThreadPauser.TestPaused"/> to return immediately.
            </summary>
        </member>
        <member name="T:ApplicationAccess.Utilities.LockManager">
            <summary>
            Allows definition of dependencies between objects used for mutual-exclusion locks, and provides methods to lock these in a consistent order to prevent deadlocks.
            </summary>
        </member>
        <member name="F:ApplicationAccess.Utilities.LockManager.registeredObjects">
            <summary>All the lock objects registered in the manager.</summary>
        </member>
        <member name="F:ApplicationAccess.Utilities.LockManager.registeredObjectSequenceNumbers">
            <summary>Holds the lock order sequence number which is mapped to each registered object.</summary>
        </member>
        <member name="F:ApplicationAccess.Utilities.LockManager.dependsOnDependencies">
            <summary>The lock object dependencies, where the dictionary key object depends on the value objects.</summary>
        </member>
        <member name="F:ApplicationAccess.Utilities.LockManager.dependedOnByDependencies">
            <summary>The lock object dependencies, where the dictionary key object is depended on by the value objects.</summary>
        </member>
        <member name="F:ApplicationAccess.Utilities.LockManager.nextSequenceNumber">
            <summary>A sequence number used to denote the order in which a lock should be acquired on an object.</summary>
        </member>
        <member name="F:ApplicationAccess.Utilities.LockManager.lockObjectDependencyCache">
            <summary>For a given lock object and dependency pattern, caches the objects which either depend on, or are dependent on the object, in the order the the locks should be applied.</summary>
        </member>
        <member name="F:ApplicationAccess.Utilities.LockManager.allObjectsLockOrder">
            <summary>A list of all objects registered in the manager in the order which locks should be applied when locking all objects.</summary>
        </member>
        <member name="M:ApplicationAccess.Utilities.LockManager.#ctor">
            <summary>
            Initialises a new instance of the ApplicationAccess.Utilities.LockManager class.
            </summary>
        </member>
        <member name="M:ApplicationAccess.Utilities.LockManager.RegisterLockObject(System.Object)">
            <summary>
            Registers an object in the lock manager.
            </summary>
            <param name="lockObject">The object to register.</param>
        </member>
        <member name="M:ApplicationAccess.Utilities.LockManager.RegisterLockObjects(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Registers a collection of objects in the lock manager.
            </summary>
            <param name="lockObjects">The objects to register.</param>
        </member>
        <member name="M:ApplicationAccess.Utilities.LockManager.RegisterLockObjectDependency(System.Object,System.Object)">
            <summary>
            Registers a dependency between two objects previously registered in the lock manager.
            </summary>
            <param name="dependencyFromObject">The object that the dependency is from.</param>
            <param name="dependencyToObject">The object that the dependency is to.</param>
        </member>
        <member name="M:ApplicationAccess.Utilities.LockManager.AcquireLocksAndInvokeAction(System.Object,ApplicationAccess.Utilities.LockObjectDependencyPattern,System.Action)">
            <summary>
            Acquires locks on the specified object and objects which it's associated with (either all objects which it depends on, or which depend on it), the invokes the specified action.
            </summary>
            <param name="lockObject">The object to lock.</param>
            <param name="lockObjectDependencyPattern">Whether to additionally lock all objects on which parameter 'lockObject' depends, or all objects which depend on parameter 'lockObject'.</param>
            <param name="action">The action to invoke.</param>
        </member>
        <member name="M:ApplicationAccess.Utilities.LockManager.AcquireAllLocksAndInvokeAction(System.Action)">
            <summary>
            Acquires locks on all objects and invokes the specified action.
            </summary>
            <param name="action">The action to invoke.</param>
        </member>
        <member name="M:ApplicationAccess.Utilities.LockManager.LockObjectIsLockedByCurrentThread(System.Object)">
            <summary>
            Returns true if the specified lock object is locked by the current thread.
            </summary>
            <param name="lockObject">The object to check.</param>
            <returns>True if the object is locked by the current thread.  Otherwise, false.</returns>
        </member>
        <member name="M:ApplicationAccess.Utilities.LockManager.AcquireLocksAndInvokeAction(System.Collections.Generic.List{System.Object},System.Int32,System.Action)">
            <summary>
            Recursively acquires locks on the specified objects, the invokes the specified action.
            </summary>
            <param name="lockObjects">The sequence of objects to acquire locks on.</param>
            <param name="nextObjectIndex">The index of the object in the sequence to acquire a lock on next, or equal to the length of parameter 'lockObjects' if all locks have been acquired.</param>
            <param name="action">The action to invoke once all locks are acquired.</param>
        </member>
        <member name="M:ApplicationAccess.Utilities.LockManager.TraverseDependencyGraph(System.Object,ApplicationAccess.Utilities.LockObjectDependencyPattern,System.Collections.Generic.HashSet{System.Object},System.Action{System.Object})">
            <summary>
            Traverses the graph of object depedencies, invoking the specified action on each object encountered.
            </summary>
            <param name="nextObject">The next object to traverse to.</param>
            <param name="lockObjectDependencyPattern">The 'direction' to traverse the graph, either to objects which 'nextObject' depends on, or objects which depend on it.</param>
            <param name="visitedObjects">Objects which have already been visited as part of the traversal.</param>
            <param name="objectAction">The action to perform on the object.  Accepts a single parameter which is the object to perform the action on.</param>
        </member>
        <member name="T:ApplicationAccess.Utilities.LockManager.LockObjectAndSequenceNumber">
            <summary>
            Container class which holds a lock object and a sequence number used to define the order which a lock is acquired on the object.
            </summary>
        </member>
        <member name="P:ApplicationAccess.Utilities.LockManager.LockObjectAndSequenceNumber.LockObject">
            <summary>
            The object a lock is acquired on.
            </summary>
        </member>
        <member name="P:ApplicationAccess.Utilities.LockManager.LockObjectAndSequenceNumber.SequenceNumber">
            <summary>
            The order in which a lock should be acquired on the object as compared to other objects.
            </summary>
        </member>
        <member name="M:ApplicationAccess.Utilities.LockManager.LockObjectAndSequenceNumber.#ctor(System.Object,System.Int32)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Utilities.LockManager+LockObjectAndSequenceNumber class.
            </summary>
            <param name="lockObject">The object a lock is acquired on.</param>
            <param name="sequenceNumber">The order in which a lock should be acquired on the object as compared to other objects.</param>
        </member>
        <member name="T:ApplicationAccess.Utilities.LockManager.LockObjectAndDependencyPattern">
            <summary>
            Container class which holds a lock object and a dependency pattern for the lock object.
            </summary>
        </member>
        <member name="P:ApplicationAccess.Utilities.LockManager.LockObjectAndDependencyPattern.LockObject">
            <summary>
            The object a lock is acquired on.
            </summary>
        </member>
        <member name="P:ApplicationAccess.Utilities.LockManager.LockObjectAndDependencyPattern.DependencyPattern">
            <summary>
            The lock object dependency pattern.
            </summary>
        </member>
        <member name="M:ApplicationAccess.Utilities.LockManager.LockObjectAndDependencyPattern.#ctor(System.Object,ApplicationAccess.Utilities.LockObjectDependencyPattern)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Utilities.LockManager+LockObjectAndDependencyPattern class.
            </summary>
            <param name="lockObject">The lock object dependency pattern.</param>
            <param name="dependencyPattern">The lock object dependency pattern.</param>
        </member>
        <member name="T:ApplicationAccess.Utilities.LockObjectDependencyPattern">
            <summary>
            Defines different patterns of dependency between objects with respect to acquiring mutual-exclusion locks.
            </summary>
        </member>
        <member name="F:ApplicationAccess.Utilities.LockObjectDependencyPattern.ObjectAndObjectsItDependsOn">
            <summary>Acquire locks on a specified object, and the objects it depends on.</summary>
        </member>
        <member name="F:ApplicationAccess.Utilities.LockObjectDependencyPattern.ObjectAndObjectsWhichAreDependentOnIt">
            <summary>Acquire locks on a specified object, and the objects which depend on it.</summary>
        </member>
        <member name="T:ApplicationAccess.Utilities.MappingMetricLogger">
            <summary>
            Implementation of IMetricLogger which fronts another IMetricLogger using a facade pattern, and maps metrics from one type to another.
            </summary>
        </member>
        <member name="F:ApplicationAccess.Utilities.MappingMetricLogger.countMetricMap">
            <summary>Dictionary which maps count metrics from one type to another.</summary>
        </member>
        <member name="F:ApplicationAccess.Utilities.MappingMetricLogger.amountMetricMap">
            <summary>Dictionary which maps count amount from one type to another.</summary>
        </member>
        <member name="F:ApplicationAccess.Utilities.MappingMetricLogger.statusMetricMap">
            <summary>Dictionary which maps count status from one type to another.</summary>
        </member>
        <member name="F:ApplicationAccess.Utilities.MappingMetricLogger.intervalMetricMap">
            <summary>Dictionary which maps count interval from one type to another.</summary>
        </member>
        <member name="F:ApplicationAccess.Utilities.MappingMetricLogger.downstreamMetricLogger">
            <summary>The IMetricLogger to pass the metrics to after mapping.</summary>
        </member>
        <member name="M:ApplicationAccess.Utilities.MappingMetricLogger.#ctor(ApplicationMetrics.IMetricLogger)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Utilities.MappingMetricLogger class.
            </summary>
            <param name="downstreamMetricLogger">The IMetricLogger to pass the metrics to after mapping.</param>
        </member>
        <member name="M:ApplicationAccess.Utilities.MappingMetricLogger.AddCountMetricMapping(System.Type,ApplicationMetrics.CountMetric)">
            <summary>
            Adds a mapping for a count metric.
            </summary>
            <param name="countMetricType">The type (assignable to CountMetric) to map from.</param>
            <param name="mappedMetric">The count metric to map to.</param>
        </member>
        <member name="M:ApplicationAccess.Utilities.MappingMetricLogger.AddAmountMetricMapping(System.Type,ApplicationMetrics.AmountMetric)">
            <summary>
            Adds a mapping for an amount metric.
            </summary>
            <param name="amountMetricType">The type (assignable to AmountMetric) to map from.</param>
            <param name="mappedMetric">The amount metric to map to.</param>
        </member>
        <member name="M:ApplicationAccess.Utilities.MappingMetricLogger.AddStatusMetricMapping(System.Type,ApplicationMetrics.StatusMetric)">
            <summary>
            Adds a mapping for a status metric.
            </summary>
            <param name="statusMetricType">The type (assignable to StatusMetric) to map from.</param>
            <param name="mappedMetric">The status metric to map to.</param>
        </member>
        <member name="M:ApplicationAccess.Utilities.MappingMetricLogger.AddIntervalMetricMapping(System.Type,ApplicationMetrics.IntervalMetric)">
            <summary>
            Adds a mapping for an interval metric.
            </summary>
            <param name="intervalMetricType">The type (assignable to IntervalMetric) to map from.</param>
            <param name="mappedMetric">The interval metric to map to.</param>
        </member>
        <member name="M:ApplicationAccess.Utilities.MappingMetricLogger.Increment(ApplicationMetrics.CountMetric)">
            <summary>
            Records a single instance of the specified count event.
            </summary>
            <param name="countMetric">The count metric that occurred.</param>
        </member>
        <member name="M:ApplicationAccess.Utilities.MappingMetricLogger.Add(ApplicationMetrics.AmountMetric,System.Int64)">
            <summary>
            Records an instance of the specified amount metric event, and the associated amount.
            </summary>
            <param name="amountMetric">The amount metric that occurred.</param>
            <param name="amount">The amount associated with the instance of the amount metric.</param>
        </member>
        <member name="M:ApplicationAccess.Utilities.MappingMetricLogger.Set(ApplicationMetrics.StatusMetric,System.Int64)">
            <summary>
            Records an instance of the specified status metric event, and the associated value.
            </summary>
            <param name="statusMetric">The status metric that occurred.</param>
            <param name="value">The value associated with the instance of the status metric.</param>
        </member>
        <member name="M:ApplicationAccess.Utilities.MappingMetricLogger.Begin(ApplicationMetrics.IntervalMetric)">
            <summary>
            Records the starting of the specified interval metric event.
            </summary>
            <param name="intervalMetric">The interval metric that started.</param>
            <returns>A unique id for the starting of the interval metric, which should be subsequently passed to the <see cref="M:ApplicationMetrics.IMetricLogger.End(System.Guid,ApplicationMetrics.IntervalMetric)"/> or <see cref="M:ApplicationMetrics.IMetricLogger.CancelBegin(System.Guid,ApplicationMetrics.IntervalMetric)"/> methods, when using the class in interleaved mode.</returns>
        </member>
        <member name="M:ApplicationAccess.Utilities.MappingMetricLogger.End(ApplicationMetrics.IntervalMetric)">
            <summary>
            Records the completion of the specified interval metric event when using the class in non-interleaved mode.
            </summary>
            <param name="intervalMetric">The interval metric that completed.</param>
        </member>
        <member name="M:ApplicationAccess.Utilities.MappingMetricLogger.End(System.Guid,ApplicationMetrics.IntervalMetric)">
            <summary>
            Records the completion of the specified interval metric event when using the class in interleaved mode.
            </summary>
            <param name="beginId">The id corresponding to the starting of the specified interval metric event (i.e. returned when the <see cref="M:ApplicationMetrics.IMetricLogger.Begin(ApplicationMetrics.IntervalMetric)"/> method was called).</param>
            <param name="intervalMetric">The interval metric that completed.</param>
        </member>
        <member name="M:ApplicationAccess.Utilities.MappingMetricLogger.CancelBegin(ApplicationMetrics.IntervalMetric)">
            <summary>
            Cancels the starting of the specified interval metric event when using the class in non-interleaved mode (e.g. in the case that an exception occurs between the starting and completion of the event).
            </summary>
            <param name="intervalMetric">The interval metric that should be cancelled.</param>
        </member>
        <member name="M:ApplicationAccess.Utilities.MappingMetricLogger.CancelBegin(System.Guid,ApplicationMetrics.IntervalMetric)">
            <summary>
            Cancels the starting of the specified interval metric event when using the class in interleaved mode (e.g. in the case that an exception occurs between the starting and completion of the event).
            </summary>
            <param name="beginId">The id corresponding to the starting of the specified interval metric event (i.e. returned when the <see cref="M:ApplicationMetrics.IMetricLogger.Begin(ApplicationMetrics.IntervalMetric)"/> method was called).</param>
            <param name="intervalMetric">The interval metric that should be cancelled.</param>
        </member>
        <member name="T:ApplicationAccess.Utilities.NullLogger">
            <summary>
            Implementation of IApplicationLogger which does not log.
            </summary>
        </member>
        <member name="M:ApplicationAccess.Utilities.NullLogger.Log(ApplicationLogging.LogLevel,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Utilities.NullLogger.Log(System.Object,ApplicationLogging.LogLevel,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Utilities.NullLogger.Log(System.Int32,ApplicationLogging.LogLevel,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Utilities.NullLogger.Log(System.Object,System.Int32,ApplicationLogging.LogLevel,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Utilities.NullLogger.Log(ApplicationLogging.LogLevel,System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Utilities.NullLogger.Log(System.Object,ApplicationLogging.LogLevel,System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Utilities.NullLogger.Log(System.Int32,ApplicationLogging.LogLevel,System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Utilities.NullLogger.Log(System.Object,System.Int32,ApplicationLogging.LogLevel,System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="T:ApplicationAccess.Utilities.StopwatchDateTimeProvider">
            <summary>
            Returns the current date and time using an underlying Stopwatch class for increased accuracy over the DefaultDateTimeProvider class.
            </summary>
        </member>
        <member name="F:ApplicationAccess.Utilities.StopwatchDateTimeProvider.stopwatch">
            <summary>Stopwatch to use for calculating the current date and time.</summary>
        </member>
        <member name="F:ApplicationAccess.Utilities.StopwatchDateTimeProvider.stopWatchFrequency">
            <summary>The value of the 'Frequency' property of the StopWatch object.</summary>
        </member>
        <member name="F:ApplicationAccess.Utilities.StopwatchDateTimeProvider.stopwatchStartTime">
            <summary>The time at which the stopwatch was started.</summary>
        </member>
        <member name="M:ApplicationAccess.Utilities.StopwatchDateTimeProvider.#ctor">
            <summary>
            Initialises a new instance of the ApplicationAccess.Utilities.StopwatchDateTimeProvider class.
            </summary>
        </member>
        <member name="M:ApplicationAccess.Utilities.StopwatchDateTimeProvider.UtcNow">
            <inheritdoc/>
        </member>
        <member name="T:ApplicationAccess.Utilities.TestUtilities">
            <summary>
            Contains utility methods for unit tests.
            </summary>
        </member>
        <member name="M:ApplicationAccess.Utilities.TestUtilities.#ctor">
            <summary>
            Initialises a new instance of the ApplicationAccess.Utilities.TestUtilities class.
            </summary>
        </member>
        <member name="M:ApplicationAccess.Utilities.TestUtilities.EqualIgnoringOrder(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns an <see cref="T:System.Linq.Expressions.Expression"/> which evaluates a <see cref="T:System.Predicate`1"/> which checks whether a collection of strings matches the collection in parameter <paramref name="expected"/> irrespective of their enumeration order.
            </summary>
            <param name="expected">The collection of strings the predicate compares to.</param>
            <returns>The <see cref="T:System.Linq.Expressions.Expression"/> which evaluates a <see cref="T:System.Predicate`1"/>.</returns>
            <remarks>Designed to be passed to the 'predicate' parameter of the NSubstitute Arg.Any{T} argument matcher.</remarks>
        </member>
        <member name="M:ApplicationAccess.Utilities.TestUtilities.StringEnumerablesContainSameValues(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Checks whether two collections of strings contain the same elements irrespective of their enumeration order.
            </summary>
            <param name="enumerable1">The first collection.</param>
            <param name="enumerable2">The second collection.</param>
            <returns>True if the collections contain the same strings.  False otherwise.</returns>
        </member>
    </members>
</doc>
