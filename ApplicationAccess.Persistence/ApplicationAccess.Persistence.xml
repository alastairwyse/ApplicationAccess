<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ApplicationAccess.Persistence</name>
    </assembly>
    <members>
        <member name="T:ApplicationAccess.Persistence.AccessManagerEventProcessor`4">
            <summary>
            Processes a collecion of <see cref="T:ApplicationAccess.Persistence.EventBufferItemBase"/> objects, applying the changes to an <see cref="T:ApplicationAccess.IAccessManagerEventProcessor`4"/> instance.
            </summary>
            <typeparam name="TUser">The type of users in the AccessManager.</typeparam>
            <typeparam name="TGroup">The type of groups in the AccessManager.</typeparam>
            <typeparam name="TComponent">The type of components in the AccessManager.</typeparam>
            <typeparam name="TAccess">The type of levels of access which can be assigned to an application component.</typeparam>
        </member>
        <member name="F:ApplicationAccess.Persistence.AccessManagerEventProcessor`4.eventProcessorInstance">
            <summary>The <see cref="T:ApplicationAccess.IAccessManagerEventProcessor`4"/> instance to apply the events to.</summary>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerEventProcessor`4.#ctor(ApplicationAccess.IAccessManagerEventProcessor{`0,`1,`2,`3})">
            <summary>
            Initialises a new instance of the ApplicationAccess.Persistence.AccessManagerEventProcessor class.
            </summary>
            <param name="eventProcessorInstance">The <see cref="T:ApplicationAccess.IAccessManagerEventProcessor`4"/> instance to apply the events to.</param>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerEventProcessor`4.Process(System.Collections.Generic.IEnumerable{ApplicationAccess.Persistence.EventBufferItemBase})">
            <summary>
            Processes the specified collecion of event objects, applying the changes to the AccessManager instance.
            </summary>
            <param name="events">The events to process/apply.</param>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerEventProcessor`4.Process(ApplicationAccess.Persistence.EventBufferItemBase)">
            <summary>
            Processes the specified event object, applying the changes to the AccessManager instance.
            </summary>
            <param name="eventBufferItem">The event to process/apply.</param>
        </member>
        <member name="T:ApplicationAccess.Persistence.AccessManagerRedundantTemporalBulkPersister`4">
            <summary>
            Implementation of <see cref="T:ApplicationAccess.Persistence.IAccessManagerTemporalBulkPersister`4"/> which <see href="https://en.wikipedia.org/wiki/Decorator_pattern">decorates</see> another <see cref="T:ApplicationAccess.Persistence.IAccessManagerTemporalBulkPersister`4"/> instance by attempting to persist events to a second <see cref="T:ApplicationAccess.Persistence.IAccessManagerTemporalEventBulkPersister`4"/> instance in the case that a call to the <see cref="M:ApplicationAccess.Persistence.IAccessManagerTemporalEventBulkPersister`4.PersistEvents(System.Collections.Generic.IList{ApplicationAccess.Persistence.TemporalEventBufferItemBase})">PersistEvents()</see> method fails, and also attempts to re-persist any events which previously failed to be persisted on startup.
            </summary>
            <typeparam name="TUser">The type of users in the application managed by the AccessManager.</typeparam>
            <typeparam name="TGroup">The type of groups in the application managed by the AccessManager.</typeparam>
            <typeparam name="TComponent">The type of components in the application managed by the AccessManager.</typeparam>
            <typeparam name="TAccess">The type of levels of access which can be assigned to an application component.</typeparam>
            <remarks>The <see cref="M:System.IDisposable.Dispose">Dispose()</see> method will call Dispose() on constructor parameters 'primaryReader', 'primaryPersister', and 'backupPersister' (assuming they implement <see cref="T:System.IDisposable"/>), even though those onjects are instantiated outside the class.</remarks>
        </member>
        <member name="F:ApplicationAccess.Persistence.AccessManagerRedundantTemporalBulkPersister`4.primaryReader">
            <summary>The primary (decorated) <see cref="T:ApplicationAccess.Persistence.IAccessManagerTemporalPersistentReader`4"/> instance.</summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.AccessManagerRedundantTemporalBulkPersister`4.primaryPersister">
            <summary>The primary (decorated) <see cref="T:ApplicationAccess.Persistence.IAccessManagerIdempotentTemporalEventBulkPersister`4"/> instance.</summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.AccessManagerRedundantTemporalBulkPersister`4.backupPersister">
            <summary>The backup/secondary persister.</summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.AccessManagerRedundantTemporalBulkPersister`4.logger">
            <summary>The logger for general logging.</summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.AccessManagerRedundantTemporalBulkPersister`4.metricLogger">
            <summary>The logger for metrics.</summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.AccessManagerRedundantTemporalBulkPersister`4.firstCallToPersistEventsOccurred">
            <summary>Whether the first call to the PersistEvents() method has already occurred.</summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.AccessManagerRedundantTemporalBulkPersister`4.disposed">
            <summary>Indicates whether the object has been disposed.</summary>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerRedundantTemporalBulkPersister`4.#ctor(ApplicationAccess.Persistence.IAccessManagerTemporalPersistentReader{`0,`1,`2,`3},ApplicationAccess.Persistence.IAccessManagerIdempotentTemporalEventBulkPersister{`0,`1,`2,`3},ApplicationAccess.Persistence.IAccessManagerTemporalEventBulkPersisterReader{`0,`1,`2,`3},ApplicationLogging.IApplicationLogger)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Persistence.AccessManagerRedundantTemporalBulkPersister class.
            </summary>
            <param name="primaryReader">The primary (decorated) <see cref="T:ApplicationAccess.Persistence.IAccessManagerTemporalPersistentReader`4"/> instance.</param>
            <param name="primaryPersister">The primary (decorated) <see cref="T:ApplicationAccess.Persistence.IAccessManagerIdempotentTemporalEventBulkPersister`4"/> instance.</param>
            <param name="backupPersister">The backup/secondary persister.</param>
            <param name="logger">The logger for general logging.</param>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerRedundantTemporalBulkPersister`4.#ctor(ApplicationAccess.Persistence.IAccessManagerTemporalPersistentReader{`0,`1,`2,`3},ApplicationAccess.Persistence.IAccessManagerIdempotentTemporalEventBulkPersister{`0,`1,`2,`3},ApplicationAccess.Persistence.IAccessManagerTemporalEventBulkPersisterReader{`0,`1,`2,`3},ApplicationLogging.IApplicationLogger,ApplicationMetrics.IMetricLogger)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Persistence.AccessManagerRedundantTemporalBulkPersister class.
            </summary>
            <param name="primaryReader">The primary (decorated) <see cref="T:ApplicationAccess.Persistence.IAccessManagerTemporalPersistentReader`4"/> instance.</param>
            <param name="primaryPersister">The primary (decorated) <see cref="T:ApplicationAccess.Persistence.IAccessManagerIdempotentTemporalEventBulkPersister`4"/> instance.</param>
            <param name="backupPersister">The backup/secondary persister.</param>
            <param name="logger">The logger for general logging.</param>
            <param name="metricLogger">The logger for metrics.</param>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerRedundantTemporalBulkPersister`4.Load(ApplicationAccess.AccessManagerBase{`0,`1,`2,`3})">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerRedundantTemporalBulkPersister`4.Load(System.Guid,ApplicationAccess.AccessManagerBase{`0,`1,`2,`3})">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerRedundantTemporalBulkPersister`4.Load(System.DateTime,ApplicationAccess.AccessManagerBase{`0,`1,`2,`3})">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerRedundantTemporalBulkPersister`4.PersistEvents(System.Collections.Generic.IList{ApplicationAccess.Persistence.TemporalEventBufferItemBase})">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerRedundantTemporalBulkPersister`4.PersistEvents(System.Collections.Generic.IList{ApplicationAccess.Persistence.TemporalEventBufferItemBase},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerRedundantTemporalBulkPersister`4.Dispose">
            <summary>
            Releases the unmanaged resources used by the AccessManagerRedundantTemporalBulkPersister.
            </summary>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerRedundantTemporalBulkPersister`4.Dispose(System.Boolean)">
            <summary>
            Provides a method to free unmanaged resources used by this class.
            </summary>
            <param name="disposing">Whether the method is being called as part of an explicit Dispose routine, and hence whether managed resources should also be freed.</param>
        </member>
        <member name="T:ApplicationAccess.Persistence.AccessManagerState">
            <summary>
            Container class holding properties which uniquely identify the persisted state of an AccessManager.
            </summary>
            <remarks>A unique persisted state can be identified by either the <see cref="P:ApplicationAccess.Persistence.AccessManagerState.EventId"/> property, or the <see cref="P:ApplicationAccess.Persistence.AccessManagerState.StateTime"/> and <see cref="P:ApplicationAccess.Persistence.AccessManagerState.StateSequence"/> properties in combination.</remarks>
        </member>
        <member name="P:ApplicationAccess.Persistence.AccessManagerState.EventId">
            <summary>
            The unique id of the most recent event persisted into the access manager at the returned state.
            </summary>
        </member>
        <member name="P:ApplicationAccess.Persistence.AccessManagerState.StateTime">
            <summary>
            The UTC timestamp the most recent event persisted into the access manager at the returned state occurred at.
            </summary>
        </member>
        <member name="P:ApplicationAccess.Persistence.AccessManagerState.StateSequence">
            <summary>
            Sequence number used to distinguish events which occured at the same <see cref="P:ApplicationAccess.Persistence.AccessManagerState.StateTime"/> (higher numbers indicate later events.).
            </summary>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerState.#ctor(System.Guid,System.DateTime,System.Int32)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Persistence.AccessManagerState class.
            </summary>
            <param name="eventId">The unique id of the most recent event persisted into the access manager at the returned state.</param>
            <param name="stateTime">The UTC timestamp the most recent event persisted into the access manager at the returned state occurred at.</param>
            <param name="stateSequence">Sequence number used to distinguish events which occured at the same <see cref="P:ApplicationAccess.Persistence.AccessManagerState.StateTime"/> (higher numbers indicate later events.).</param>
            <exception cref="T:System.ArgumentException">Parameter '<paramref name="stateTime"/>' must be expressed as UTC.</exception>
        </member>
        <member name="T:ApplicationAccess.Persistence.AccessManagerTemporalEventBulkCache`4">
            <summary>
            Caches a predefined number of AccessManager <see cref="T:ApplicationAccess.Persistence.TemporalEventBufferItemBase"/> events, allowing writing of events in a bulk/consolidated operation.
            </summary>
            <typeparam name="TUser">The type of users in the application managed by the AccessManager.</typeparam>
            <typeparam name="TGroup">The type of groups in the application managed by the AccessManager.</typeparam>
            <typeparam name="TComponent">The type of components in the application managed by the AccessManager.</typeparam>
            <typeparam name="TAccess">The type of levels of access which can be assigned to an application component.</typeparam>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventBulkCache`4.#ctor(System.Int32)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Persistence.AccessManagerTemporalEventBulkCache class.
            </summary>
            <param name="cachedEventCount">The number of events to retain on the cache.</param>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventBulkCache`4.#ctor(System.Int32,ApplicationMetrics.IMetricLogger)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Persistence.AccessManagerTemporalEventBulkCache class.
            </summary>
            <param name="cachedEventCount">The number of events to retain on the cache.</param>
            <param name="metricLogger">The logger for metrics.</param>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventBulkCache`4.#ctor(System.Int32,ApplicationMetrics.IMetricLogger,ApplicationAccess.Utilities.IGuidProvider,ApplicationAccess.Utilities.IDateTimeProvider)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Persistence.AccessManagerTemporalEventBulkCache class.
            </summary>
            <param name="cachedEventCount">The number of events to retain on the cache.</param>
            <param name="metricLogger">The logger for metrics.</param>
            <param name="guidProvider">The provider to use for random Guids.</param>
            <param name="dateTimeProvider">The provider to use for the current date and time.</param>
            <remarks>This constructor is included to facilitate unit testing.</remarks>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventBulkCache`4.PersistEvents(System.Collections.Generic.IList{ApplicationAccess.Persistence.TemporalEventBufferItemBase})">
            <summary>
            Adds a sequence of events which subclass <see cref="T:ApplicationAccess.Persistence.TemporalEventBufferItemBase"/> to the cache.
            </summary>
            <param name="events">The events to cache.</param>
        </member>
        <member name="T:ApplicationAccess.Persistence.AccessManagerTemporalEventBulkPersisterBuffer`4">
            <summary>
            Buffers events which change the structure of an <see cref="T:ApplicationAccess.AccessManager`4"/> class in memory before writing them to an instance of <see cref="T:ApplicationAccess.Persistence.IAccessManagerTemporalEventBulkPersister`4"/>.  
            </summary>
            <typeparam name="TUser">The type of users in the application managed by the AccessManager.</typeparam>
            <typeparam name="TGroup">The type of groups in the application managed by the AccessManager.</typeparam>
            <typeparam name="TComponent">The type of components in the application managed by the AccessManager.</typeparam>
            <typeparam name="TAccess">The type of levels of access which can be assigned to an application component.</typeparam>
        </member>
        <member name="F:ApplicationAccess.Persistence.AccessManagerTemporalEventBulkPersisterBuffer`4.eventPersister">
            <summary>The bulk persister to use to write flushed events to permanent storage.</summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.AccessManagerTemporalEventBulkPersisterBuffer`4.flushedEvents">
            <summary>Temporarily holds all events processed during a Flush() operation, before passing them to the event persister.</summary>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventBulkPersisterBuffer`4.#ctor(ApplicationAccess.Validation.IAccessManagerEventValidator{`0,`1,`2,`3},ApplicationAccess.Persistence.IAccessManagerEventBufferFlushStrategy,ApplicationAccess.Persistence.IAccessManagerTemporalEventBulkPersister{`0,`1,`2,`3})">
            <summary>
            Initialises a new instance of the ApplicationAccess.Persistence.AccessManagerTemporalEventBulkPersisterBuffer class.
            </summary>
            <param name="eventValidator">The validator to use to validate events.</param>
            <param name="bufferFlushStrategy">The strategy to use for flushing the buffers.</param>
            <param name="eventPersister">The bulk persister to use to write flushed events to permanent storage.</param>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventBulkPersisterBuffer`4.#ctor(ApplicationAccess.Validation.IAccessManagerEventValidator{`0,`1,`2,`3},ApplicationAccess.Persistence.IAccessManagerEventBufferFlushStrategy,ApplicationAccess.Persistence.IAccessManagerTemporalEventBulkPersister{`0,`1,`2,`3},ApplicationMetrics.IMetricLogger)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Persistence.AccessManagerTemporalEventBulkPersisterBuffer class.
            </summary>
            <param name="eventValidator">The validator to use to validate events.</param>
            <param name="bufferFlushStrategy">The strategy to use for flushing the buffers.</param>
            <param name="eventPersister">The bulk persister to use to write flushed events to permanent storage.</param>
            <param name="metricLogger">The logger for metrics.</param>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventBulkPersisterBuffer`4.#ctor(ApplicationAccess.Validation.IAccessManagerEventValidator{`0,`1,`2,`3},ApplicationAccess.Persistence.IAccessManagerEventBufferFlushStrategy,ApplicationAccess.Persistence.IAccessManagerTemporalEventBulkPersister{`0,`1,`2,`3},ApplicationMetrics.IMetricLogger,ApplicationAccess.Utilities.IGuidProvider,ApplicationAccess.Utilities.IDateTimeProvider)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Persistence.AccessManagerTemporalEventBulkPersisterBuffer class.
            </summary>
            <param name="eventValidator">The validator to use to validate events.</param>
            <param name="bufferFlushStrategy">The strategy to use for flushing the buffers.</param>
            <param name="eventPersister">The bulk persister to use to write flushed events to permanent storage.</param>
            <param name="metricLogger">The logger for metrics.</param>
            <param name="guidProvider">The provider to use for random Guids.</param>
            <param name="dateTimeProvider">The provider to use for the current date and time.</param>
            <remarks>This constructor is included to facilitate unit testing.</remarks>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventBulkPersisterBuffer`4.Flush">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventBulkPersisterBuffer`4.ProcessUserEventBufferItem(ApplicationAccess.Persistence.UserEventBufferItem{`0})">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventBulkPersisterBuffer`4.ProcessGroupEventBufferItem(ApplicationAccess.Persistence.GroupEventBufferItem{`1})">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventBulkPersisterBuffer`4.ProcessUserToGroupMappingEventBufferItem(ApplicationAccess.Persistence.UserToGroupMappingEventBufferItem{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventBulkPersisterBuffer`4.ProcessGroupToGroupMappingEventBufferItem(ApplicationAccess.Persistence.GroupToGroupMappingEventBufferItem{`1})">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventBulkPersisterBuffer`4.ProcessUserToApplicationComponentAndAccessLevelMappingEventBufferItem(ApplicationAccess.Persistence.UserToApplicationComponentAndAccessLevelMappingEventBufferItem{`0,`2,`3})">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventBulkPersisterBuffer`4.ProcessGroupToApplicationComponentAndAccessLevelMappingEventBufferItem(ApplicationAccess.Persistence.GroupToApplicationComponentAndAccessLevelMappingEventBufferItem{`1,`2,`3})">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventBulkPersisterBuffer`4.ProcessEntityTypeEventBufferItem(ApplicationAccess.Persistence.EntityTypeEventBufferItem)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventBulkPersisterBuffer`4.ProcessEntityEventBufferItem(ApplicationAccess.Persistence.EntityEventBufferItem)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventBulkPersisterBuffer`4.ProcessUserToEntityMappingEventBufferItem(ApplicationAccess.Persistence.UserToEntityMappingEventBufferItem{`0})">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventBulkPersisterBuffer`4.ProcessGroupToEntityMappingEventBufferItem(ApplicationAccess.Persistence.GroupToEntityMappingEventBufferItem{`1})">
            <inheritdoc/>
        </member>
        <member name="T:ApplicationAccess.Persistence.AccessManagerTemporalEventCache`4">
            <summary>
            Caches a predefined number of AccessManager <see cref="T:ApplicationAccess.Persistence.TemporalEventBufferItemBase"/> events.
            </summary>
            <typeparam name="TUser">The type of users in the application managed by the AccessManager.</typeparam>
            <typeparam name="TGroup">The type of groups in the application managed by the AccessManager.</typeparam>
            <typeparam name="TComponent">The type of components in the application managed by the AccessManager.</typeparam>
            <typeparam name="TAccess">The type of levels of access which can be assigned to an application component.</typeparam>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventCache`4.#ctor(System.Int32)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Persistence.AccessManagerTemporalEventCache class.
            </summary>
            <param name="cachedEventCount">The number of events to retain on the cache.</param>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventCache`4.#ctor(System.Int32,ApplicationMetrics.IMetricLogger)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Persistence.AccessManagerTemporalEventCache class.
            </summary>
            <param name="cachedEventCount">The number of events to retain on the cache.</param>
            <param name="metricLogger">The logger for metrics.</param>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventCache`4.#ctor(System.Int32,ApplicationMetrics.IMetricLogger,ApplicationAccess.Utilities.IGuidProvider,ApplicationAccess.Utilities.IDateTimeProvider)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Persistence.AccessManagerTemporalEventCache class.
            </summary>
            <param name="cachedEventCount">The number of events to retain on the cache.</param>
            <param name="metricLogger">The logger for metrics.</param>
            <param name="guidProvider">The provider to use for random Guids.</param>
            <param name="dateTimeProvider">The provider to use for the current date and time.</param>
            <remarks>This constructor is included to facilitate unit testing.</remarks>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventCache`4.AddUser(`0)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventCache`4.RemoveUser(`0)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventCache`4.AddGroup(`1)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventCache`4.RemoveGroup(`1)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventCache`4.AddUserToGroupMapping(`0,`1)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventCache`4.RemoveUserToGroupMapping(`0,`1)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventCache`4.AddGroupToGroupMapping(`1,`1)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventCache`4.RemoveGroupToGroupMapping(`1,`1)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventCache`4.AddUserToApplicationComponentAndAccessLevelMapping(`0,`2,`3)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventCache`4.RemoveUserToApplicationComponentAndAccessLevelMapping(`0,`2,`3)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventCache`4.AddGroupToApplicationComponentAndAccessLevelMapping(`1,`2,`3)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventCache`4.RemoveGroupToApplicationComponentAndAccessLevelMapping(`1,`2,`3)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventCache`4.AddEntityType(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventCache`4.RemoveEntityType(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventCache`4.AddEntity(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventCache`4.RemoveEntity(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventCache`4.AddUserToEntityMapping(`0,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventCache`4.RemoveUserToEntityMapping(`0,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventCache`4.AddGroupToEntityMapping(`1,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventCache`4.RemoveGroupToEntityMapping(`1,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventCache`4.AddUser(`0,System.Guid,System.DateTime)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventCache`4.RemoveUser(`0,System.Guid,System.DateTime)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventCache`4.AddGroup(`1,System.Guid,System.DateTime)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventCache`4.RemoveGroup(`1,System.Guid,System.DateTime)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventCache`4.AddUserToGroupMapping(`0,`1,System.Guid,System.DateTime)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventCache`4.RemoveUserToGroupMapping(`0,`1,System.Guid,System.DateTime)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventCache`4.AddGroupToGroupMapping(`1,`1,System.Guid,System.DateTime)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventCache`4.RemoveGroupToGroupMapping(`1,`1,System.Guid,System.DateTime)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventCache`4.AddUserToApplicationComponentAndAccessLevelMapping(`0,`2,`3,System.Guid,System.DateTime)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventCache`4.RemoveUserToApplicationComponentAndAccessLevelMapping(`0,`2,`3,System.Guid,System.DateTime)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventCache`4.AddGroupToApplicationComponentAndAccessLevelMapping(`1,`2,`3,System.Guid,System.DateTime)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventCache`4.RemoveGroupToApplicationComponentAndAccessLevelMapping(`1,`2,`3,System.Guid,System.DateTime)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventCache`4.AddEntityType(System.String,System.Guid,System.DateTime)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventCache`4.RemoveEntityType(System.String,System.Guid,System.DateTime)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventCache`4.AddEntity(System.String,System.String,System.Guid,System.DateTime)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventCache`4.RemoveEntity(System.String,System.String,System.Guid,System.DateTime)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventCache`4.AddUserToEntityMapping(`0,System.String,System.String,System.Guid,System.DateTime)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventCache`4.RemoveUserToEntityMapping(`0,System.String,System.String,System.Guid,System.DateTime)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventCache`4.AddGroupToEntityMapping(`1,System.String,System.String,System.Guid,System.DateTime)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventCache`4.RemoveGroupToEntityMapping(`1,System.String,System.String,System.Guid,System.DateTime)">
            <inheritdoc/>
        </member>
        <member name="T:ApplicationAccess.Persistence.AccessManagerTemporalEventCacheBase`4">
            <summary>
            Base for classes which cache a predefined number of AccessManager <see cref="T:ApplicationAccess.Persistence.TemporalEventBufferItemBase"/> events.
            </summary>
            <typeparam name="TUser">The type of users in the application managed by the AccessManager.</typeparam>
            <typeparam name="TGroup">The type of groups in the application managed by the AccessManager.</typeparam>
            <typeparam name="TComponent">The type of components in the application managed by the AccessManager.</typeparam>
            <typeparam name="TAccess">The type of levels of access which can be assigned to an application component.</typeparam>
        </member>
        <member name="F:ApplicationAccess.Persistence.AccessManagerTemporalEventCacheBase`4.cachedEventCount">
            <summary>The number of events to retain on the cache.</summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.AccessManagerTemporalEventCacheBase`4.cachedEvents">
            <summary>Holds all cached events, with the <see cref="P:System.Collections.Generic.LinkedList`1.Last">Last</see> property holding the most recently cached.</summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.AccessManagerTemporalEventCacheBase`4.cachedEventsGuidIndex">
            <summary>Holds the <see cref="T:System.Collections.Generic.LinkedListNode`1"/> wrapping each cached event, indexed by its <see cref="P:ApplicationAccess.Persistence.EventBufferItemBase.EventId">EventId</see> property.</summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.AccessManagerTemporalEventCacheBase`4.cachedEventsLock">
            <summary>Lock object for the 'cachedEvents' member.</summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.AccessManagerTemporalEventCacheBase`4.metricLogger">
            <summary>The logger for metrics.</summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.AccessManagerTemporalEventCacheBase`4.guidProvider">
            <summary>The provider to use for random Guids.</summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.AccessManagerTemporalEventCacheBase`4.dateTimeProvider">
            <summary>The provider to use for the current date and time.</summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.AccessManagerTemporalEventCacheBase`4.disposed">
            <summary>Indicates whether the object has been disposed.</summary>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventCacheBase`4.#ctor(System.Int32)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Persistence.AccessManagerTemporalEventCacheBase class.
            </summary>
            <param name="cachedEventCount">The number of events to retain on the cache.</param>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventCacheBase`4.#ctor(System.Int32,ApplicationMetrics.IMetricLogger)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Persistence.AccessManagerTemporalEventCacheBase class.
            </summary>
            <param name="cachedEventCount">The number of events to retain on the cache.</param>
            <param name="metricLogger">The logger for metrics.</param>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventCacheBase`4.#ctor(System.Int32,ApplicationMetrics.IMetricLogger,ApplicationAccess.Utilities.IGuidProvider,ApplicationAccess.Utilities.IDateTimeProvider)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Persistence.AccessManagerTemporalEventCacheBase class.
            </summary>
            <param name="cachedEventCount">The number of events to retain on the cache.</param>
            <param name="metricLogger">The logger for metrics.</param>
            <param name="guidProvider">The provider to use for random Guids.</param>
            <param name="dateTimeProvider">The provider to use for the current date and time.</param>
            <remarks>This constructor is included to facilitate unit testing.</remarks>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventCacheBase`4.GetAllEventsSince(System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventCacheBase`4.CacheEvent(ApplicationAccess.Persistence.TemporalEventBufferItemBase)">
            <summary>
            Adds the specified event to the cache structures.
            </summary>
            <param name="newEvent">The event to add.</param>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventCacheBase`4.TrimCachedEvents">
            <summary>
            Trims any events in excess of the 'cachedEventCount' property from the cache structures.
            </summary>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventCacheBase`4.Dispose">
            <summary>
            Releases the unmanaged resources used by the ReaderNode.
            </summary>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventCacheBase`4.Dispose(System.Boolean)">
            <summary>
            Provides a method to free unmanaged resources used by this class.
            </summary>
            <param name="disposing">Whether the method is being called as part of an explicit Dispose routine, and hence whether managed resources should also be freed.</param>
        </member>
        <member name="T:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBuffer`4">
            <summary>
            Buffers events which change the structure of an <see cref="T:ApplicationAccess.AccessManager`4"/> class in memory before writing them to an instance of <see cref="T:ApplicationAccess.Persistence.IAccessManagerTemporalEventPersister`4"/>.
            </summary>
            <typeparam name="TUser">The type of users in the application managed by the AccessManager.</typeparam>
            <typeparam name="TGroup">The type of groups in the application managed by the AccessManager.</typeparam>
            <typeparam name="TComponent">The type of components in the application managed by the AccessManager.</typeparam>
            <typeparam name="TAccess">The type of levels of access which can be assigned to an application component.</typeparam>
        </member>
        <member name="F:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBuffer`4.eventPersister">
            <summary>The persister to use to write flushed events to permanent storage.</summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBuffer`4.flushedEventCount">
            <summary>Stores the number of events processed during a call to the Flush() method.</summary>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBuffer`4.#ctor(ApplicationAccess.Validation.IAccessManagerEventValidator{`0,`1,`2,`3},ApplicationAccess.Persistence.IAccessManagerEventBufferFlushStrategy,ApplicationAccess.Persistence.IAccessManagerTemporalEventPersister{`0,`1,`2,`3})">
            <summary>
            Initialises a new instance of the ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBuffer class.
            </summary>
            <param name="eventValidator">The validator to use to validate events.</param>
            <param name="bufferFlushStrategy">The strategy to use for flushing the buffers.</param>
            <param name="eventPersister">The persister to use to write flushed events to permanent storage.</param>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBuffer`4.#ctor(ApplicationAccess.Validation.IAccessManagerEventValidator{`0,`1,`2,`3},ApplicationAccess.Persistence.IAccessManagerEventBufferFlushStrategy,ApplicationAccess.Persistence.IAccessManagerTemporalEventPersister{`0,`1,`2,`3},ApplicationMetrics.IMetricLogger)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBuffer class.
            </summary>
            <param name="eventValidator">The validator to use to validate events.</param>
            <param name="bufferFlushStrategy">The strategy to use for flushing the buffers.</param>
            <param name="eventPersister">The persister to use to write flushed events to permanent storage.</param>
            <param name="metricLogger">The logger for metrics.</param>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBuffer`4.#ctor(ApplicationAccess.Validation.IAccessManagerEventValidator{`0,`1,`2,`3},ApplicationAccess.Persistence.IAccessManagerEventBufferFlushStrategy,ApplicationAccess.Persistence.IAccessManagerTemporalEventPersister{`0,`1,`2,`3},ApplicationMetrics.IMetricLogger,ApplicationAccess.Utilities.IGuidProvider,ApplicationAccess.Utilities.IDateTimeProvider)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBuffer class.
            </summary>
            <param name="eventValidator">The validator to use to validate events.</param>
            <param name="bufferFlushStrategy">The strategy to use for flushing the buffers.</param>
            <param name="eventPersister">The persister to use to write flushed events to permanent storage.</param>
            <param name="metricLogger">The logger for metrics.</param>
            <param name="guidProvider">The provider to use for random Guids.</param>
            <param name="dateTimeProvider">The provider to use for the current date and time.</param>
            <remarks>This constructor is included to facilitate unit testing.</remarks>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBuffer`4.Flush">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBuffer`4.ProcessUserEventBufferItem(ApplicationAccess.Persistence.UserEventBufferItem{`0})">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBuffer`4.ProcessGroupEventBufferItem(ApplicationAccess.Persistence.GroupEventBufferItem{`1})">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBuffer`4.ProcessUserToGroupMappingEventBufferItem(ApplicationAccess.Persistence.UserToGroupMappingEventBufferItem{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBuffer`4.ProcessGroupToGroupMappingEventBufferItem(ApplicationAccess.Persistence.GroupToGroupMappingEventBufferItem{`1})">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBuffer`4.ProcessUserToApplicationComponentAndAccessLevelMappingEventBufferItem(ApplicationAccess.Persistence.UserToApplicationComponentAndAccessLevelMappingEventBufferItem{`0,`2,`3})">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBuffer`4.ProcessGroupToApplicationComponentAndAccessLevelMappingEventBufferItem(ApplicationAccess.Persistence.GroupToApplicationComponentAndAccessLevelMappingEventBufferItem{`1,`2,`3})">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBuffer`4.ProcessEntityTypeEventBufferItem(ApplicationAccess.Persistence.EntityTypeEventBufferItem)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBuffer`4.ProcessEntityEventBufferItem(ApplicationAccess.Persistence.EntityEventBufferItem)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBuffer`4.ProcessUserToEntityMappingEventBufferItem(ApplicationAccess.Persistence.UserToEntityMappingEventBufferItem{`0})">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBuffer`4.ProcessGroupToEntityMappingEventBufferItem(ApplicationAccess.Persistence.GroupToEntityMappingEventBufferItem{`1})">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBuffer`4.InvokeEventPersisterAction(System.Action{ApplicationAccess.Persistence.IAccessManagerTemporalEventPersister{`0,`1,`2,`3}},System.String)">
            <summary>
            Invokes the specified action on the classes' 'eventPersister' member, throwing an exception with the specified message if an exception occurs.
            </summary>
            <param name="action">The action to on the 'eventPersister' member.  Accepts a single parameter which is the 'eventPersister' member.</param>
            <param name="exceptionMessage">The message to use in the exception thrown if an error occurs invoking the action.</param>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBuffer`4.GeneratePersistenceExceptionMessage(ApplicationAccess.Persistence.EventAction,System.String)">
            <summary>
            Generates an exception message describing a failure to persist a buffered event.
            </summary>
            <param name="eventAction">The type of action of the event.</param>
            <param name="eventDataName">The human-readable name of the data contained in the event.</param>
            <returns>The exception message.</returns>
        </member>
        <member name="T:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4">
            <summary>
            Base for classes which buffer events which change the structure of an <see cref="T:ApplicationAccess.AccessManager`4"/> class in memory before persisting the events."/>.
            </summary>
            <typeparam name="TUser">The type of users in the application managed by the AccessManager.</typeparam>
            <typeparam name="TGroup">The type of groups in the application managed by the AccessManager.</typeparam>
            <typeparam name="TComponent">The type of components in the application managed by the AccessManager.</typeparam>
            <typeparam name="TAccess">The type of levels of access which can be assigned to an application component.</typeparam>
        </member>
        <member name="F:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.eventValidator">
            <summary>The validator to use to validate events.</summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.bufferFlushStrategy">
            <summary>The strategy to use for flushing the buffers.</summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.guidProvider">
            <summary>The provider to use for random Guids.</summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.dateTimeProvider">
            <summary>The provider to use for the current date and time.</summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.metricLogger">
            <summary>The logger for metrics.</summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.bufferFlushedEventHandler">
            <summary>The delegate which handles a <see cref="E:ApplicationAccess.Persistence.IAccessManagerEventBufferFlushStrategy.BufferFlushed">BufferFlushed</see> event.</summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.disposed">
            <summary>Indicates whether the object has been disposed.</summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.lastEventSequenceNumber">
            <summary>The sequence number used for the last event buffered.</summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.userEventBuffer">
            <summary>The queue used to buffer user events.</summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.groupEventBuffer">
            <summary>The queue used to buffer group events.</summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.userToGroupMappingEventBuffer">
            <summary>The queue used to buffer user to group mapping events.</summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.groupToGroupMappingEventBuffer">
            <summary>The queue used to buffer group to group mapping events.</summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.userToApplicationComponentAndAccessLevelMappingEventBuffer">
            <summary>The queue used to buffer user to application component and access level mapping events.</summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.groupToApplicationComponentAndAccessLevelMappingEventBuffer">
            <summary>The queue used to buffer group to application component and access level mapping events.</summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.entityTypeEventBuffer">
            <summary>The queue used to buffer entity type events.</summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.entityEventBuffer">
            <summary>The queue used to buffer entity events.</summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.userToEntityMappingEventBuffer">
            <summary>The queue used to buffer user to entity mapping events.</summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.groupToEntityMappingEventBuffer">
            <summary>The queue used to buffer group to entity mapping events.</summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.lockManager">
            <summary>Manages acquiring locks on queues.</summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.userEventBufferLock">
            <summary>Lock object for the user event queue.</summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.groupEventBufferLock">
            <summary>Lock object for the group event queue.</summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.userToGroupMappingEventBufferLock">
            <summary>Lock object for the user to group mapping event queue.</summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.groupToGroupMappingEventBufferLock">
            <summary>Lock object for the group to group mapping event queue.</summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.userToApplicationComponentAndAccessLevelMappingEventBufferLock">
            <summary>Lock object for the user to application component and access level mapping event queue.</summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.groupToApplicationComponentAndAccessLevelMappingEventBufferLock">
            <summary>Lock object for the group to application component and access level mapping event queue.</summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.entityTypeEventBufferLock">
            <summary>Lock object for the entity type event queue.</summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.entityEventBufferLock">
            <summary>Lock object for the entity event queue.</summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.userToEntityMappingEventBufferLock">
            <summary>Lock object for the user to entity mapping event queue.</summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.groupToEntityMappingEventBufferLock">
            <summary>Lock object for the group to entity mapping event queue.</summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.eventSequenceNumberLock">
            <summary>Lock object for the 'lastEventSequenceNumber' and 'dateTimeProvider' members, to ensure that their sequence orders are maintained between queuing of different events.</summary>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.#ctor(ApplicationAccess.Validation.IAccessManagerEventValidator{`0,`1,`2,`3},ApplicationAccess.Persistence.IAccessManagerEventBufferFlushStrategy)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase class.
            </summary>
            <param name="eventValidator">The validator to use to validate events.</param>
            <param name="bufferFlushStrategy">The strategy to use for flushing the buffers.</param>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.#ctor(ApplicationAccess.Validation.IAccessManagerEventValidator{`0,`1,`2,`3},ApplicationAccess.Persistence.IAccessManagerEventBufferFlushStrategy,ApplicationMetrics.IMetricLogger)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase class.
            </summary>
            <param name="eventValidator">The validator to use to validate events.</param>
            <param name="bufferFlushStrategy">The strategy to use for flushing the buffers.</param>
            <param name="metricLogger">The logger for metrics.</param>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.#ctor(ApplicationAccess.Validation.IAccessManagerEventValidator{`0,`1,`2,`3},ApplicationAccess.Persistence.IAccessManagerEventBufferFlushStrategy,ApplicationMetrics.IMetricLogger,ApplicationAccess.Utilities.IGuidProvider,ApplicationAccess.Utilities.IDateTimeProvider)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase class.
            </summary>
            <param name="eventValidator">The validator to use to validate events.</param>
            <param name="bufferFlushStrategy">The strategy to use for flushing the buffers.</param>
            <param name="metricLogger">The logger for metrics.</param>
            <param name="guidProvider">The provider to use for random Guids.</param>
            <param name="dateTimeProvider">The provider to use for the current date and time.</param>
            <remarks>This constructor is included to facilitate unit testing.</remarks>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.AddUser(`0)">
            <inheritdoc/>
            <exception cref="T:ApplicationAccess.Persistence.BufferFlushingException">An exception occurred on the worker thread while attempting to flush the buffers.</exception>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.RemoveUser(`0)">
            <inheritdoc/>
            <exception cref="T:ApplicationAccess.Persistence.BufferFlushingException">An exception occurred on the worker thread while attempting to flush the buffers.</exception>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.AddGroup(`1)">
            <inheritdoc/>
            <exception cref="T:ApplicationAccess.Persistence.BufferFlushingException">An exception occurred on the worker thread while attempting to flush the buffers.</exception>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.RemoveGroup(`1)">
            <inheritdoc/>
            <exception cref="T:ApplicationAccess.Persistence.BufferFlushingException">An exception occurred on the worker thread while attempting to flush the buffers.</exception>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.AddUserToGroupMapping(`0,`1)">
            <inheritdoc/>
            <exception cref="T:ApplicationAccess.Persistence.BufferFlushingException">An exception occurred on the worker thread while attempting to flush the buffers.</exception>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.RemoveUserToGroupMapping(`0,`1)">
            <inheritdoc/>
            <exception cref="T:ApplicationAccess.Persistence.BufferFlushingException">An exception occurred on the worker thread while attempting to flush the buffers.</exception>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.AddGroupToGroupMapping(`1,`1)">
            <inheritdoc/>
            <exception cref="T:ApplicationAccess.Persistence.BufferFlushingException">An exception occurred on the worker thread while attempting to flush the buffers.</exception>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.RemoveGroupToGroupMapping(`1,`1)">
            <inheritdoc/>
            <exception cref="T:ApplicationAccess.Persistence.BufferFlushingException">An exception occurred on the worker thread while attempting to flush the buffers.</exception>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.AddUserToApplicationComponentAndAccessLevelMapping(`0,`2,`3)">
            <inheritdoc/>
            <exception cref="T:ApplicationAccess.Persistence.BufferFlushingException">An exception occurred on the worker thread while attempting to flush the buffers.</exception>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.RemoveUserToApplicationComponentAndAccessLevelMapping(`0,`2,`3)">
            <inheritdoc/>
            <exception cref="T:ApplicationAccess.Persistence.BufferFlushingException">An exception occurred on the worker thread while attempting to flush the buffers.</exception>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.AddGroupToApplicationComponentAndAccessLevelMapping(`1,`2,`3)">
            <inheritdoc/>
            <exception cref="T:ApplicationAccess.Persistence.BufferFlushingException">An exception occurred on the worker thread while attempting to flush the buffers.</exception>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.RemoveGroupToApplicationComponentAndAccessLevelMapping(`1,`2,`3)">
            <inheritdoc/>
            <exception cref="T:ApplicationAccess.Persistence.BufferFlushingException">An exception occurred on the worker thread while attempting to flush the buffers.</exception>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.AddEntityType(System.String)">
            <inheritdoc/>
            <exception cref="T:ApplicationAccess.Persistence.BufferFlushingException">An exception occurred on the worker thread while attempting to flush the buffers.</exception>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.RemoveEntityType(System.String)">
            <inheritdoc/>
            <exception cref="T:ApplicationAccess.Persistence.BufferFlushingException">An exception occurred on the worker thread while attempting to flush the buffers.</exception>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.AddEntity(System.String,System.String)">
            <inheritdoc/>
            <exception cref="T:ApplicationAccess.Persistence.BufferFlushingException">An exception occurred on the worker thread while attempting to flush the buffers.</exception>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.RemoveEntity(System.String,System.String)">
            <inheritdoc/>
            <exception cref="T:ApplicationAccess.Persistence.BufferFlushingException">An exception occurred on the worker thread while attempting to flush the buffers.</exception>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.AddUserToEntityMapping(`0,System.String,System.String)">
            <inheritdoc/>
            <exception cref="T:ApplicationAccess.Persistence.BufferFlushingException">An exception occurred on the worker thread while attempting to flush the buffers.</exception>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.RemoveUserToEntityMapping(`0,System.String,System.String)">
            <inheritdoc/>
            <exception cref="T:ApplicationAccess.Persistence.BufferFlushingException">An exception occurred on the worker thread while attempting to flush the buffers.</exception>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.AddGroupToEntityMapping(`1,System.String,System.String)">
            <inheritdoc/>
            <exception cref="T:ApplicationAccess.Persistence.BufferFlushingException">An exception occurred on the worker thread while attempting to flush the buffers.</exception>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.RemoveGroupToEntityMapping(`1,System.String,System.String)">
            <inheritdoc/>
            <exception cref="T:ApplicationAccess.Persistence.BufferFlushingException">An exception occurred on the worker thread while attempting to flush the buffers.</exception>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.Flush">
            <inheritdoc/>
            <exception cref="T:ApplicationAccess.Persistence.BufferFlushingException">An exception occurred on the worker thread while attempting to flush the buffers.</exception>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.ProcessUserEventBufferItem(ApplicationAccess.Persistence.UserEventBufferItem{`0})">
            <summary>
            Processes a <see cref="T:ApplicationAccess.Persistence.UserEventBufferItem`1"/> stored in the buffer.
            </summary>
            <param name="eventBufferItem">The event to process.</param>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.ProcessGroupEventBufferItem(ApplicationAccess.Persistence.GroupEventBufferItem{`1})">
            <summary>
            Processes a <see cref="T:ApplicationAccess.Persistence.GroupEventBufferItem`1"/> stored in the buffer.
            </summary>
            <param name="eventBufferItem">The event to process.</param>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.ProcessUserToGroupMappingEventBufferItem(ApplicationAccess.Persistence.UserToGroupMappingEventBufferItem{`0,`1})">
            <summary>
            Processes a <see cref="T:ApplicationAccess.Persistence.UserToGroupMappingEventBufferItem`2"/> stored in the buffer.
            </summary>
            <param name="eventBufferItem">The event to process.</param>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.ProcessGroupToGroupMappingEventBufferItem(ApplicationAccess.Persistence.GroupToGroupMappingEventBufferItem{`1})">
            <summary>
            Processes a <see cref="T:ApplicationAccess.Persistence.GroupToGroupMappingEventBufferItem`1"/> stored in the buffer.
            </summary>
            <param name="eventBufferItem">The event to process.</param>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.ProcessUserToApplicationComponentAndAccessLevelMappingEventBufferItem(ApplicationAccess.Persistence.UserToApplicationComponentAndAccessLevelMappingEventBufferItem{`0,`2,`3})">
            <summary>
            Processes a <see cref="T:ApplicationAccess.Persistence.UserToApplicationComponentAndAccessLevelMappingEventBufferItem`3"/> stored in the buffer.
            </summary>
            <param name="eventBufferItem">The event to process.</param>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.ProcessGroupToApplicationComponentAndAccessLevelMappingEventBufferItem(ApplicationAccess.Persistence.GroupToApplicationComponentAndAccessLevelMappingEventBufferItem{`1,`2,`3})">
            <summary>
            Processes a <see cref="T:ApplicationAccess.Persistence.GroupToApplicationComponentAndAccessLevelMappingEventBufferItem`3"/> stored in the buffer.
            </summary>
            <param name="eventBufferItem">The event to process.</param>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.ProcessEntityTypeEventBufferItem(ApplicationAccess.Persistence.EntityTypeEventBufferItem)">
            <summary>
            Processes an <see cref="T:ApplicationAccess.Persistence.EntityTypeEventBufferItem"/> stored in the buffer.
            </summary>
            <param name="eventBufferItem">The event to process.</param>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.ProcessEntityEventBufferItem(ApplicationAccess.Persistence.EntityEventBufferItem)">
            <summary>
            Processes an <see cref="T:ApplicationAccess.Persistence.EntityEventBufferItem"/> stored in the buffer.
            </summary>
            <param name="eventBufferItem">The event to process.</param>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.ProcessUserToEntityMappingEventBufferItem(ApplicationAccess.Persistence.UserToEntityMappingEventBufferItem{`0})">
            <summary>
            Processes a <see cref="T:ApplicationAccess.Persistence.UserToEntityMappingEventBufferItem`1"/> stored in the buffer.
            </summary>
            <param name="eventBufferItem">The event to process.</param>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.ProcessGroupToEntityMappingEventBufferItem(ApplicationAccess.Persistence.GroupToEntityMappingEventBufferItem{`1})">
            <summary>
            Processes a <see cref="T:ApplicationAccess.Persistence.GroupToEntityMappingEventBufferItem`1"/> stored in the buffer.
            </summary>
            <param name="eventBufferItem">The event to process.</param>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.InitializeLockObjects">
            <summary>
            Initializes the classes' lock objects and dependencies.
            </summary>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.ThrowExceptionIfValidationFails(ApplicationAccess.Validation.ValidationResult)">
            <summary>
            Re-throws the exception which caused validation failure, if the exception exists.
            </summary>
            <param name="validationResult">The validation result to check.</param>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.GetNextEventSequenceNumberAndTimestamp">
            <summary>
            Returns the next event sequence number and the current timestamp.
            </summary>
            <returns>A tuple containing: the next event sequence number, and the current timestamp.</returns>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.InitializeHeap(MoreComplexDataStructures.MinHeap{ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase{`0,`1,`2,`3}.SequenceNumberAndEventBuffer},System.Collections.Generic.LinkedList{System.Tuple{ApplicationAccess.Persistence.UserEventBufferItem{`0},System.Int64}},System.Collections.Generic.LinkedList{System.Tuple{ApplicationAccess.Persistence.GroupEventBufferItem{`1},System.Int64}},System.Collections.Generic.LinkedList{System.Tuple{ApplicationAccess.Persistence.UserToGroupMappingEventBufferItem{`0,`1},System.Int64}},System.Collections.Generic.LinkedList{System.Tuple{ApplicationAccess.Persistence.GroupToGroupMappingEventBufferItem{`1},System.Int64}},System.Collections.Generic.LinkedList{System.Tuple{ApplicationAccess.Persistence.UserToApplicationComponentAndAccessLevelMappingEventBufferItem{`0,`2,`3},System.Int64}},System.Collections.Generic.LinkedList{System.Tuple{ApplicationAccess.Persistence.GroupToApplicationComponentAndAccessLevelMappingEventBufferItem{`1,`2,`3},System.Int64}},System.Collections.Generic.LinkedList{System.Tuple{ApplicationAccess.Persistence.EntityTypeEventBufferItem,System.Int64}},System.Collections.Generic.LinkedList{System.Tuple{ApplicationAccess.Persistence.EntityEventBufferItem,System.Int64}},System.Collections.Generic.LinkedList{System.Tuple{ApplicationAccess.Persistence.UserToEntityMappingEventBufferItem{`0},System.Int64}},System.Collections.Generic.LinkedList{System.Tuple{ApplicationAccess.Persistence.GroupToEntityMappingEventBufferItem{`1},System.Int64}})">
            <summary>
            Initializes the specified heap with the first elements of each of the specified buffers, in order to perform a k-merge using the heap.
            </summary>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.MoveEventsToTemporaryQueues(System.Collections.Generic.LinkedList{System.Tuple{ApplicationAccess.Persistence.UserEventBufferItem{`0},System.Int64}}@,System.Collections.Generic.LinkedList{System.Tuple{ApplicationAccess.Persistence.GroupEventBufferItem{`1},System.Int64}}@,System.Collections.Generic.LinkedList{System.Tuple{ApplicationAccess.Persistence.UserToGroupMappingEventBufferItem{`0,`1},System.Int64}}@,System.Collections.Generic.LinkedList{System.Tuple{ApplicationAccess.Persistence.GroupToGroupMappingEventBufferItem{`1},System.Int64}}@,System.Collections.Generic.LinkedList{System.Tuple{ApplicationAccess.Persistence.UserToApplicationComponentAndAccessLevelMappingEventBufferItem{`0,`2,`3},System.Int64}}@,System.Collections.Generic.LinkedList{System.Tuple{ApplicationAccess.Persistence.GroupToApplicationComponentAndAccessLevelMappingEventBufferItem{`1,`2,`3},System.Int64}}@,System.Collections.Generic.LinkedList{System.Tuple{ApplicationAccess.Persistence.EntityTypeEventBufferItem,System.Int64}}@,System.Collections.Generic.LinkedList{System.Tuple{ApplicationAccess.Persistence.EntityEventBufferItem,System.Int64}}@,System.Collections.Generic.LinkedList{System.Tuple{ApplicationAccess.Persistence.UserToEntityMappingEventBufferItem{`0},System.Int64}}@,System.Collections.Generic.LinkedList{System.Tuple{ApplicationAccess.Persistence.GroupToEntityMappingEventBufferItem{`1},System.Int64}}@)">
            <summary>
            Moves all events from the buffer queues to temporary queues.
            </summary>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.MoveEventsToTemporaryQueue``2(``0@,``0@,System.Object,System.Int64,System.Action{System.Int32})">
            <summary>
            Moves all events with sequence number below or equal to that specified, from an event buffer to a temporary event buffer.
            </summary>
            <typeparam name="TEventBuffer">The type of the event buffer.</typeparam>
            <typeparam name="TEventBufferItemType">The type of items in the event buffer.</typeparam>
            <param name="eventBuffer">The event buffer to move events from.</param>
            <param name="temporaryEventBuffer">The temporary event buffer to move events to.</param>
            <param name="eventBufferLockObject">Lock object used to serialize access to the event buffer parameter.</param>
            <param name="maxSequenceNumber">The maximum (inclusive) sequence number of events to move.  Only events with a sequence number below or equal to this maximum will be moved.</param>
            <param name="bufferFlushStrategyEventCountSetAction">An action which sets the relevant 'EventBufferItemCount' property on the 'bufferFlushStrategy' member.</param>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.ProcessKWayMergeStep``2(``0,System.Action,ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase{`0,`1,`2,`3}.EventBuffer,MoreComplexDataStructures.MinHeap{ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase{`0,`1,`2,`3}.SequenceNumberAndEventBuffer})">
            <summary>
            Processes a step of the k-way merge process used to order and process all events to flush, for a single event buffer.
            </summary>
            <typeparam name="TEventBuffer">The type of the event buffer to process.</typeparam>
            <typeparam name="TEventBufferItemType">The type of items in the event buffer.</typeparam>
            <param name="temporaryEventBuffer">The event buffer to process.</param>
            <param name="processAction">An action which processes the next event identified by the k-way merge.</param>
            <param name="eventBufferEnum">The enum representing the temporary event buffer.</param>
            <param name="nextSequenceNumbers">A min-heap containing the sequence numbers of events to process and the event buffer they exist in.</param>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.AddBufferedEventToHeap``2(``0,MoreComplexDataStructures.MinHeap{ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase{`0,`1,`2,`3}.SequenceNumberAndEventBuffer},ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase{`0,`1,`2,`3}.EventBuffer)">
            <summary>
            Takes an event from the specified event buffer (if one exists) and adds it to the specified min-heap of sequence number and event buffer references.
            </summary>
            <typeparam name="TEventBuffer">The type of the event buffer to take the event from.</typeparam>
            <typeparam name="TEventBufferItemType">The type of items in the event buffer.</typeparam>
            <param name="eventBuffer">The event buffer to take the event from.</param>
            <param name="nextSequenceNumbers">The min-heap to add the event to.</param>
            <param name="eventBufferEnum">The enum representing the event buffer.</param>
        </member>
        <member name="P:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.BufferAddUserEventAction">
            <summary>Action which buffers an event to add the specified user.</summary>
        </member>
        <member name="P:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.BufferRemoveUserEventAction">
            <summary>Action which buffers an event to remove the specified user.</summary>
        </member>
        <member name="P:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.BufferAddGroupEventAction">
            <summary>Action which buffers an event to add the specified group.</summary>
        </member>
        <member name="P:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.BufferRemoveGroupEventAction">
            <summary>Action which buffers an event to remove the specified group.</summary>
        </member>
        <member name="P:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.BufferAddUserToGroupMappingEventAction">
            <summary>Action which buffers an event to add the specified user to group mapping.</summary>
        </member>
        <member name="P:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.BufferRemoveUserToGroupMappingEventAction">
            <summary>Action which buffers an event to remove the specified user to group mapping.</summary>
        </member>
        <member name="P:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.BufferAddGroupToGroupMappingEventAction">
            <summary>Action which buffers an event to add the specified group to group mapping.</summary>
        </member>
        <member name="P:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.BufferRemoveGroupToGroupMappingEventAction">
            <summary>Action which buffers an event to remove the specified group to group mapping.</summary>
        </member>
        <member name="P:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.BufferAddUserToApplicationComponentAndAccessLevelMappingEventAction">
            <summary>Action which buffers an event to add the specified user to application component and access level mapping.</summary>
        </member>
        <member name="P:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.BufferRemoveUserToApplicationComponentAndAccessLevelMappingEventAction">
            <summary>Action which buffers an event to remove the specified user to application component and access level mapping.</summary>
        </member>
        <member name="P:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.BufferAddGroupToApplicationComponentAndAccessLevelMappingEventAction">
            <summary>Action which buffers an event to add the specified group to application component and access level mapping.</summary>
        </member>
        <member name="P:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.BufferRemoveGroupToApplicationComponentAndAccessLevelMappingEventAction">
            <summary>Action which buffers an event to remove the specified group to application component and access level mapping.</summary>
        </member>
        <member name="P:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.BufferAddEntityTypeEventAction">
            <summary>Action which buffers an event to add the specified entity type.</summary>
        </member>
        <member name="P:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.BufferRemoveEntityTypeEventAction">
            <summary>Action which buffers an event to remove the specified entity type.</summary>
        </member>
        <member name="P:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.BufferAddEntityEventAction">
            <summary>Action which buffers an event to add the specified entity.</summary>
        </member>
        <member name="P:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.BufferRemoveEntityEventAction">
            <summary>Action which buffers an event to remove the specified entity.</summary>
        </member>
        <member name="P:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.BufferAddUserToEntityMappingEventAction">
            <summary>Action which buffers an event to add the specified user to entity mapping.</summary>
        </member>
        <member name="P:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.BufferRemoveUserToEntityMappingEventAction">
            <summary>Action which buffers an event to remove the specified user to entity mapping.</summary>
        </member>
        <member name="P:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.BufferAddGroupToEntityMappingEventAction">
            <summary>Action which buffers an event to add the specified group to entity mapping.</summary>
        </member>
        <member name="P:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.BufferRemoveGroupToEntityMappingEventAction">
            <summary>Action which buffers an event to remove the specified group to entity mapping.</summary>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.Dispose">
            <summary>
            Releases the unmanaged resources used by the AccessManagerTemporalEventPersisterBuffer.
            </summary>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.Dispose(System.Boolean)">
            <summary>
            Provides a method to free unmanaged resources used by this class.
            </summary>
            <param name="disposing">Whether the method is being called as part of an explicit Dispose routine, and hence whether managed resources should also be freed.</param>
        </member>
        <member name="T:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.EventBuffer">
            <summary>
            Represents one of the event buffer queues.
            </summary>
        </member>
        <member name="T:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.SequenceNumberAndEventBuffer">
            <summary>
            Container class which holds a sequence number and an EventBuffer, and is comparable on the sequence number.  Used to order/prioritize items across event buffer queues.
            </summary>
        </member>
        <member name="P:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.SequenceNumberAndEventBuffer.EventSequenceNumber">
            <summary>
            The sequence number of the event.
            </summary>
        </member>
        <member name="P:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.SequenceNumberAndEventBuffer.EventBuffer">
            <summary>
            The buffer that the event is stored in.
            </summary>
        </member>
        <member name="M:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase`4.SequenceNumberAndEventBuffer.#ctor(System.Int64,ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBufferBase{`0,`1,`2,`3}.EventBuffer)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBuffer+SequenceNumberAndEventBuffer class.
            </summary>
            <param name="eventSequenceNumber">The sequence number of the event.</param>
            <param name="eventBuffer"> The buffer that the event is stored in.</param>
        </member>
        <member name="T:ApplicationAccess.Persistence.BufferFlushingException">
            <summary>
            The exception that is thrown when an error occurs attempting to flush buffered events.
            </summary>
            <remarks>The flushing would usually be performed by a worker thread (e.g. in the case of classes deriving from <see cref="T:ApplicationAccess.Persistence.WorkerThreadBufferFlushStrategyBase"/>), and hence this exception would usually be thrown from the worker thread.  Additionally this exception would usually result from a critical inner exception (e.g. failure to write to a database), hence this exception will often need to be excplicity caught and acted upon in client code.</remarks>
        </member>
        <member name="M:ApplicationAccess.Persistence.BufferFlushingException.#ctor(System.String)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Persistence.BufferFlushingException class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:ApplicationAccess.Persistence.BufferFlushingException.#ctor(System.String,System.Exception)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Persistence.BufferFlushingException class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:ApplicationAccess.Persistence.DependencyFreeAccessManagerTemporalEventBulkPersisterBuffer`4">
            <summary>
            Subclass of <see cref="T:ApplicationAccess.Persistence.AccessManagerTemporalEventBulkPersisterBuffer`4"/> where...
            <para>1. Event methods can be called successfully without first satisfying dependecies which are required by <see cref="T:ApplicationAccess.Persistence.AccessManagerTemporalEventBulkPersisterBuffer`4"/>, e.g. the AddUserToGroupMapping() method can be used to add a user to group mapping, without first explicitly adding the user and group.</para>
            <para>2. Event methods are idempotent, e.g. the AddUserToGroupMapping() method will return success if the specified mapping already exists.</para>
            The class is designed to work in conjunction with an <see cref="T:ApplicationAccess.Validation.IAccessManagerEventValidator`4"/> implementation which wraps a <see cref="T:ApplicationAccess.DependencyFreeAccessManager`4"/> instance, which takes care of generating any required events to be prepended before the requested event.
            </summary>
            <typeparam name="TUser">The type of users in the application managed by the AccessManager.</typeparam>
            <typeparam name="TGroup">The type of groups in the application managed by the AccessManager.</typeparam>
            <typeparam name="TComponent">The type of components in the application managed by the AccessManager.</typeparam>
            <typeparam name="TAccess">The type of levels of access which can be assigned to an application component.</typeparam>
        </member>
        <member name="M:ApplicationAccess.Persistence.DependencyFreeAccessManagerTemporalEventBulkPersisterBuffer`4.#ctor(ApplicationAccess.Validation.IAccessManagerEventValidator{`0,`1,`2,`3},ApplicationAccess.Persistence.IAccessManagerEventBufferFlushStrategy,ApplicationAccess.Persistence.IAccessManagerTemporalEventBulkPersister{`0,`1,`2,`3})">
            <summary>
            Initialises a new instance of the ApplicationAccess.Persistence.DependencyFreeAccessManagerTemporalEventBulkPersisterBuffer class.
            </summary>
            <param name="eventValidator">The validator to use to validate events.</param>
            <param name="bufferFlushStrategy">The strategy to use for flushing the buffers.</param>
            <param name="eventPersister">The bulk persister to use to write flushed events to permanent storage.</param>
        </member>
        <member name="M:ApplicationAccess.Persistence.DependencyFreeAccessManagerTemporalEventBulkPersisterBuffer`4.#ctor(ApplicationAccess.Validation.IAccessManagerEventValidator{`0,`1,`2,`3},ApplicationAccess.Persistence.IAccessManagerEventBufferFlushStrategy,ApplicationAccess.Persistence.IAccessManagerTemporalEventBulkPersister{`0,`1,`2,`3},ApplicationMetrics.IMetricLogger)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Persistence.DependencyFreeAccessManagerTemporalEventBulkPersisterBuffer class.
            </summary>
            <param name="eventValidator">The validator to use to validate events.</param>
            <param name="bufferFlushStrategy">The strategy to use for flushing the buffers.</param>
            <param name="eventPersister">The bulk persister to use to write flushed events to permanent storage.</param>
            <param name="metricLogger">The logger for metrics.</param>
        </member>
        <member name="M:ApplicationAccess.Persistence.DependencyFreeAccessManagerTemporalEventBulkPersisterBuffer`4.#ctor(ApplicationAccess.Validation.IAccessManagerEventValidator{`0,`1,`2,`3},ApplicationAccess.Persistence.IAccessManagerEventBufferFlushStrategy,ApplicationAccess.Persistence.IAccessManagerTemporalEventBulkPersister{`0,`1,`2,`3},ApplicationMetrics.IMetricLogger,ApplicationAccess.Utilities.IGuidProvider,ApplicationAccess.Utilities.IDateTimeProvider)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Persistence.DependencyFreeAccessManagerTemporalEventBulkPersisterBuffer class.
            </summary>
            <param name="eventValidator">The validator to use to validate events.</param>
            <param name="bufferFlushStrategy">The strategy to use for flushing the buffers.</param>
            <param name="eventPersister">The bulk persister to use to write flushed events to permanent storage.</param>
            <param name="metricLogger">The logger for metrics.</param>
            <param name="guidProvider">The provider to use for random Guids.</param>
            <param name="dateTimeProvider">The provider to use for the current date and time.</param>
            <remarks>This constructor is included to facilitate unit testing.</remarks>
        </member>
        <member name="M:ApplicationAccess.Persistence.DependencyFreeAccessManagerTemporalEventBulkPersisterBuffer`4.AddUser(`0)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Persistence.DependencyFreeAccessManagerTemporalEventBulkPersisterBuffer`4.AddGroup(`1)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Persistence.DependencyFreeAccessManagerTemporalEventBulkPersisterBuffer`4.AddEntityType(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Persistence.DependencyFreeAccessManagerTemporalEventBulkPersisterBuffer`4.AddEntity(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Persistence.DependencyFreeAccessManagerTemporalEventBulkPersisterBuffer`4.InitializeLockObjects">
            <inheritdoc/>
        </member>
        <member name="T:ApplicationAccess.Persistence.EntityEventBufferItem">
            <summary>
            Container class for a buffered/cached entity event.
            </summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.EntityEventBufferItem.entity">
            <summary>The entity the event occured for.</summary>
        </member>
        <member name="P:ApplicationAccess.Persistence.EntityEventBufferItem.Entity">
            <summary>
            The entity the event occured for.
            </summary>
        </member>
        <member name="M:ApplicationAccess.Persistence.EntityEventBufferItem.#ctor(System.Guid,ApplicationAccess.Persistence.EventAction,System.String,System.String,System.DateTime)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Persistence.EntityTypeEventBufferItem class.
            </summary>
            <param name="eventId">A unique id for the event.</param>
            <param name="eventAction">The action of the event.</param>
            <param name="entityType">The type of the entity the event occured for.</param>
            <param name="entity">The entity the event occured for.</param>
            <param name="occurredTime">The time that the event originally occurred.</param>
        </member>
        <member name="T:ApplicationAccess.Persistence.EntityTypeEventBufferItem">
            <summary>
            Container class for a buffered/cached entity type event.
            </summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.EntityTypeEventBufferItem.entityType">
            <summary>The entity type the event occured for.</summary>
        </member>
        <member name="P:ApplicationAccess.Persistence.EntityTypeEventBufferItem.EntityType">
            <summary>
            The entity type the event occured for.
            </summary>
        </member>
        <member name="M:ApplicationAccess.Persistence.EntityTypeEventBufferItem.#ctor(System.Guid,ApplicationAccess.Persistence.EventAction,System.String,System.DateTime)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Persistence.EntityTypeEventBufferItem class.
            </summary>
            <param name="eventId">A unique id for the event.</param>
            <param name="eventAction">The action of the event.</param>
            <param name="entityType">The entity type the event occured for.</param>
            <param name="occurredTime">The time that the event originally occurred.</param>
        </member>
        <member name="T:ApplicationAccess.Persistence.EventAction">
            <summary>
            The type of action associated with events which change the structure of an AccessManager class.
            </summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.EventAction.Add">
            <summary>An action which adds something to an AccessManager.</summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.EventAction.Remove">
            <summary>An action which removes something from an AccessManager.</summary>
        </member>
        <member name="T:ApplicationAccess.Persistence.EventBufferItemBase">
            <summary>
            Base class for container classes which represent a change in the structure of an AccessManager implementation, and are stored in an AccessManager event buffer or cache.
            </summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.EventBufferItemBase.eventId">
            <summary>A unique id for the event.</summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.EventBufferItemBase.eventAction">
            <summary>The action of the event.</summary>
        </member>
        <member name="P:ApplicationAccess.Persistence.EventBufferItemBase.EventId">
            <summary>
            A unique id for the event.
            </summary>
        </member>
        <member name="P:ApplicationAccess.Persistence.EventBufferItemBase.EventAction">
            <summary>
            The action of the event.
            </summary>
        </member>
        <member name="M:ApplicationAccess.Persistence.EventBufferItemBase.#ctor(System.Guid,ApplicationAccess.Persistence.EventAction)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Persistence.EventBufferItemBase class.
            </summary>
            <param name="eventId">A unique id for the event.</param>
            <param name="eventAction">The action of the event.</param>
        </member>
        <member name="T:ApplicationAccess.Persistence.EventCacheEmptyException">
            <summary>
            The exception that is thrown when a query is executed against an event cache but the cache is empty.
            </summary>
        </member>
        <member name="M:ApplicationAccess.Persistence.EventCacheEmptyException.#ctor(System.String)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Persistence.EventCacheEmptyException class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:ApplicationAccess.Persistence.EventCacheEmptyException.#ctor(System.String,System.Exception)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Persistence.EventCacheEmptyException class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:ApplicationAccess.Persistence.EventNotCachedException">
            <summary>
            The exception that is thrown when an event which changes the structure of an access manager is requested from a cache but not found.
            </summary>
        </member>
        <member name="M:ApplicationAccess.Persistence.EventNotCachedException.#ctor(System.String)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Persistence.EventNotCachedException class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:ApplicationAccess.Persistence.EventNotCachedException.#ctor(System.String,System.Exception)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Persistence.EventNotCachedException class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:ApplicationAccess.Persistence.GroupEventBufferItem`1">
            <summary>
            Container class for a buffered/cached group event.
            </summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.GroupEventBufferItem`1.group">
            <summary>The group the event occured for.</summary>
        </member>
        <member name="P:ApplicationAccess.Persistence.GroupEventBufferItem`1.Group">
            <summary>
            The group the event occured for.
            </summary>
        </member>
        <member name="M:ApplicationAccess.Persistence.GroupEventBufferItem`1.#ctor(System.Guid,ApplicationAccess.Persistence.EventAction,`0,System.DateTime)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Persistence.GroupEventBufferItem class.
            </summary>
            <param name="eventId">A unique id for the event.</param>
            <param name="eventAction">The action of the event.</param>
            <param name="group">The group the event occured for.</param>
            <param name="occurredTime">The time that the event originally occurred.</param>
        </member>
        <member name="T:ApplicationAccess.Persistence.GroupToApplicationComponentAndAccessLevelMappingEventBufferItem`3">
            <summary>
            Container class for a buffered/cached group to application component and access level mapping event.
            </summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.GroupToApplicationComponentAndAccessLevelMappingEventBufferItem`3.group">
            <summary>The group in the mapping.</summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.GroupToApplicationComponentAndAccessLevelMappingEventBufferItem`3.applicationComponent">
            <summary>The application component in the mapping.</summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.GroupToApplicationComponentAndAccessLevelMappingEventBufferItem`3.accessLevel">
            <summary>The access level in the mapping.</summary>
        </member>
        <member name="P:ApplicationAccess.Persistence.GroupToApplicationComponentAndAccessLevelMappingEventBufferItem`3.Group">
            <summary>
            The group in the mapping.
            </summary>
        </member>
        <member name="P:ApplicationAccess.Persistence.GroupToApplicationComponentAndAccessLevelMappingEventBufferItem`3.ApplicationComponent">
            <summary>
            The application component in the mapping.
            </summary>
        </member>
        <member name="P:ApplicationAccess.Persistence.GroupToApplicationComponentAndAccessLevelMappingEventBufferItem`3.AccessLevel">
            <summary>
            The access level in the mapping.
            </summary>
        </member>
        <member name="M:ApplicationAccess.Persistence.GroupToApplicationComponentAndAccessLevelMappingEventBufferItem`3.#ctor(System.Guid,ApplicationAccess.Persistence.EventAction,`0,`1,`2,System.DateTime)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Persistence.GroupToApplicationComponentAndAccessLevelMappingEventBufferItem class.
            </summary>
            <param name="eventId">A unique id for the event.</param>
            <param name="eventAction">The action of the event.</param>
            <param name="group">The group in the mapping.</param>
            <param name="applicationComponent">The application component in the mapping.</param>
            <param name="accessLevel">The access level in the mapping.</param>
            <param name="occurredTime">The time that the event originally occurred.</param>
        </member>
        <member name="T:ApplicationAccess.Persistence.GroupToEntityMappingEventBufferItem`1">
            <summary>
            Container class for a buffered/cached group to entity mapping event.
            </summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.GroupToEntityMappingEventBufferItem`1.group">
            <summary>The group the event occured for.</summary>
        </member>
        <member name="P:ApplicationAccess.Persistence.GroupToEntityMappingEventBufferItem`1.Group">
            <summary>
            The group the event occured for.
            </summary>
        </member>
        <member name="M:ApplicationAccess.Persistence.GroupToEntityMappingEventBufferItem`1.#ctor(System.Guid,ApplicationAccess.Persistence.EventAction,`0,System.String,System.String,System.DateTime)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Persistence.GroupToEntityMappingEventBufferItem class.
            </summary>
            <param name="eventId">A unique id for the event.</param>
            <param name="eventAction">The action of the event.</param>
            <param name="group">The group the event occured for.</param>
            <param name="entityType">The type of the entity the event occured for.</param>
            <param name="entity">The entity the event occured for.</param>
            <param name="occurredTime">The time that the event originally occurred.</param>
        </member>
        <member name="T:ApplicationAccess.Persistence.GroupToGroupMappingEventBufferItem`1">
            <summary>
            Container class for a buffered/cached group to group mapping event.
            </summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.GroupToGroupMappingEventBufferItem`1.fromGroup">
            <summary>The 'from' group in the mapping.</summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.GroupToGroupMappingEventBufferItem`1.toGroup">
            <summary>The 'to' group in the mapping.</summary>
        </member>
        <member name="P:ApplicationAccess.Persistence.GroupToGroupMappingEventBufferItem`1.FromGroup">
            <summary>
            The 'from' group in the mapping.
            </summary>
        </member>
        <member name="P:ApplicationAccess.Persistence.GroupToGroupMappingEventBufferItem`1.ToGroup">
            <summary>
            The 'to' group in the mapping.
            </summary>
        </member>
        <member name="M:ApplicationAccess.Persistence.GroupToGroupMappingEventBufferItem`1.#ctor(System.Guid,ApplicationAccess.Persistence.EventAction,`0,`0,System.DateTime)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Persistence.GroupToGroupMappingEventBufferItem class.
            </summary>
            <param name="eventId">A unique id for the event.</param>
            <param name="eventAction">The action of the event.</param>
            <param name="fromGroup">The 'from' group in the mapping.</param>
            <param name="toGroup">The 'to' group in the mapping.</param>
            <param name="occurredTime">The time that the event originally occurred.</param>
        </member>
        <member name="T:ApplicationAccess.Persistence.IAccessManagerEventBuffer`4">
            <summary>
            Defines methods to buffer events which change the structure of an AccessManager class.
            </summary>
            <typeparam name="TUser">The type of users in the application managed by the AccessManager.</typeparam>
            <typeparam name="TGroup">The type of groups in the application managed by the AccessManager.</typeparam>
            <typeparam name="TComponent">The type of components in the application managed by the AccessManager.</typeparam>
            <typeparam name="TAccess">The type of levels of access which can be assigned to an application component.</typeparam>
        </member>
        <member name="M:ApplicationAccess.Persistence.IAccessManagerEventBuffer`4.Flush">
            <summary>
            Flushes the buffer...i.e.transfers all stored events to another event processor, and clears all items stored in the buffer.
            </summary>
        </member>
        <member name="T:ApplicationAccess.Persistence.IAccessManagerEventBufferFlushStrategy">
            <summary>
            Defines a strategy/methodology for flushing events buffered in an IAccessManagerEventBuffer implementation, by tracking/monitoring the buffer contents, and raising an event to flush the buffer.
            </summary>
        </member>
        <member name="E:ApplicationAccess.Persistence.IAccessManagerEventBufferFlushStrategy.BufferFlushed">
            <summary>Occurs when the buffer is flushed... i.e. when events stored in the buffer are processed.</summary>
        </member>
        <member name="P:ApplicationAccess.Persistence.IAccessManagerEventBufferFlushStrategy.UserEventBufferItemCount">
            <summary>
            The number of user events stored in the buffer.
            </summary>
        </member>
        <member name="P:ApplicationAccess.Persistence.IAccessManagerEventBufferFlushStrategy.GroupEventBufferItemCount">
            <summary>
            The number of group events stored in the buffer.
            </summary>
        </member>
        <member name="P:ApplicationAccess.Persistence.IAccessManagerEventBufferFlushStrategy.UserToGroupMappingEventBufferItemCount">
            <summary>
            The number of user to group mapping events stored in the buffer.
            </summary>
        </member>
        <member name="P:ApplicationAccess.Persistence.IAccessManagerEventBufferFlushStrategy.GroupToGroupMappingEventBufferItemCount">
            <summary>
            The number of group to group mapping events stored in the buffer.
            </summary>
        </member>
        <member name="P:ApplicationAccess.Persistence.IAccessManagerEventBufferFlushStrategy.UserToApplicationComponentAndAccessLevelMappingEventBufferItemCount">
            <summary>
            The number of user to application component and access level mapping events stored in the buffer.
            </summary>
        </member>
        <member name="P:ApplicationAccess.Persistence.IAccessManagerEventBufferFlushStrategy.GroupToApplicationComponentAndAccessLevelMappingEventBufferItemCount">
            <summary>
            The number of group to application component and access level mapping events stored in the buffer.
            </summary>
        </member>
        <member name="P:ApplicationAccess.Persistence.IAccessManagerEventBufferFlushStrategy.EntityTypeEventBufferItemCount">
            <summary>
            The number of entity type events stored in the buffer.
            </summary>
        </member>
        <member name="P:ApplicationAccess.Persistence.IAccessManagerEventBufferFlushStrategy.EntityEventBufferItemCount">
            <summary>
            The number of entity events stored in the buffer.
            </summary>
        </member>
        <member name="P:ApplicationAccess.Persistence.IAccessManagerEventBufferFlushStrategy.UserToEntityMappingEventBufferItemCount">
            <summary>
            The number of user to entity mapping events stored in the buffer.
            </summary>
        </member>
        <member name="P:ApplicationAccess.Persistence.IAccessManagerEventBufferFlushStrategy.GroupToEntityMappingEventBufferItemCount">
            <summary>
            The number of group to entity mapping events stored in the buffer.
            </summary>
        </member>
        <member name="T:ApplicationAccess.Persistence.IAccessManagerIdempotentTemporalEventBulkPersister`4">
            <summary>
            Specialization of <see cref="T:ApplicationAccess.Persistence.IAccessManagerTemporalEventBulkPersister`4"/> which includes an overload of the <see cref="M:ApplicationAccess.Persistence.IAccessManagerTemporalEventBulkPersister`4.PersistEvents(System.Collections.Generic.IList{ApplicationAccess.Persistence.TemporalEventBufferItemBase})">PersistEvents()</see> method which allows specifying whether events which have already been persisted should be ignored.
            </summary>
            <typeparam name="TUser">The type of users in the application managed by the AccessManager.</typeparam>
            <typeparam name="TGroup">The type of groups in the application managed by the AccessManager.</typeparam>
            <typeparam name="TComponent">The type of components in the application managed by the AccessManager.</typeparam>
            <typeparam name="TAccess">The type of levels of access which can be assigned to an application component.</typeparam>
        </member>
        <member name="M:ApplicationAccess.Persistence.IAccessManagerIdempotentTemporalEventBulkPersister`4.PersistEvents(System.Collections.Generic.IList{ApplicationAccess.Persistence.TemporalEventBufferItemBase},System.Boolean)">
            <summary>
            Writes a series of events to persistent storage.
            </summary>
            <param name="events">The events to write.</param>
            <param name="ignorePreExistingEvents">Whether events in <paramref name="events"/> which have already been persisted will be ignored/excluded (i.e. not persisted again).  If set to false, an exception will be thrown on encountering events which have already been persisted.</param>
        </member>
        <member name="T:ApplicationAccess.Persistence.IAccessManagerPersistentReader`4">
            <summary>
            Defines methods to read an AccessManager class from persistent storage.
            </summary>
            <typeparam name="TUser">The type of users in the application managed by the AccessManager.</typeparam>
            <typeparam name="TGroup">The type of groups in the application managed by the AccessManager.</typeparam>
            <typeparam name="TComponent">The type of components in the application managed by the AccessManager.</typeparam>
            <typeparam name="TAccess">The type of levels of access which can be assigned to an application component.</typeparam>
        </member>
        <member name="M:ApplicationAccess.Persistence.IAccessManagerPersistentReader`4.Load(ApplicationAccess.AccessManagerBase{`0,`1,`2,`3})">
            <summary>
            Loads the access manager from persistent storage.
            </summary>
            <param name="accessManagerToLoadTo">The AccessManager instance to load in to.</param>
            <returns>The state of the access manager loaded.</returns>
            <exception cref="T:ApplicationAccess.Persistence.PersistentStorageEmptyException">The persistent storage did not contain any existing events nor data.</exception>
        </member>
        <member name="T:ApplicationAccess.Persistence.IAccessManagerTemporalBulkPersister`4">
            <summary>
            Defines methods which read and write in bulk, the state of an AccessManager, from and to persistent storage.
            </summary>
            <typeparam name="TUser">The type of users in the application managed by the AccessManager.</typeparam>
            <typeparam name="TGroup">The type of groups in the application managed by the AccessManager.</typeparam>
            <typeparam name="TComponent">The type of components in the application managed by the AccessManager.</typeparam>
            <typeparam name="TAccess">The type of levels of access which can be assigned to an application component.</typeparam>
        </member>
        <member name="T:ApplicationAccess.Persistence.IAccessManagerTemporalEventBulkPersister`4">
            <summary>
            Defines methods to write events which change the structure of an AccessManager class to persistent storage in a bulk/consolidated operation.  
            </summary>
            <typeparam name="TUser">The type of users in the application managed by the AccessManager.</typeparam>
            <typeparam name="TGroup">The type of groups in the application managed by the AccessManager.</typeparam>
            <typeparam name="TComponent">The type of components in the application managed by the AccessManager.</typeparam>
            <typeparam name="TAccess">The type of levels of access which can be assigned to an application component.</typeparam>
        </member>
        <member name="M:ApplicationAccess.Persistence.IAccessManagerTemporalEventBulkPersister`4.PersistEvents(System.Collections.Generic.IList{ApplicationAccess.Persistence.TemporalEventBufferItemBase})">
            <summary>
            Writes a series of events to persistent storage.
            </summary>
            <param name="events">The events to write.</param>
            <remarks>This method may or may not throw exceptions when the <paramref name="events"/> parameter contains events which have already been persisted, depending on the specific implementation.  If this behaviour needs to be more deterministic, consider using the override of this method defined in <see cref="T:ApplicationAccess.Persistence.IAccessManagerIdempotentTemporalEventBulkPersister`4"/>.</remarks>
        </member>
        <member name="T:ApplicationAccess.Persistence.IAccessManagerTemporalEventBulkPersisterReader`4">
            <summary>
            Specialization of <see cref="T:ApplicationAccess.Persistence.IAccessManagerTemporalEventBulkPersister`4"/> which additionally implements retrieval of all persisted events.
            </summary>
            <typeparam name="TUser">The type of users in the application managed by the AccessManager.</typeparam>
            <typeparam name="TGroup">The type of groups in the application managed by the AccessManager.</typeparam>
            <typeparam name="TComponent">The type of components in the application managed by the AccessManager.</typeparam>
            <typeparam name="TAccess">The type of levels of access which can be assigned to an application component.</typeparam>
        </member>
        <member name="M:ApplicationAccess.Persistence.IAccessManagerTemporalEventBulkPersisterReader`4.GetAllEvents">
            <summary>
            Retrieves all events previously persisted.
            </summary>
            <returns>The events.</returns>
        </member>
        <member name="T:ApplicationAccess.Persistence.IAccessManagerTemporalEventPersister`4">
            <summary>
            Defines methods to write events which change the structure of an AccessManager class to persistent storage.  Designed to operate behind a component which buffers the events, and hence methods include a unique id for each event, and the date/time in the past when the even occurred.
            </summary>
            <typeparam name="TUser">The type of users in the application managed by the AccessManager.</typeparam>
            <typeparam name="TGroup">The type of groups in the application managed by the AccessManager.</typeparam>
            <typeparam name="TComponent">The type of components in the application managed by the AccessManager.</typeparam>
            <typeparam name="TAccess">The type of levels of access which can be assigned to an application component.</typeparam>
        </member>
        <member name="M:ApplicationAccess.Persistence.IAccessManagerTemporalEventPersister`4.AddUser(`0,System.Guid,System.DateTime)">
            <summary>
            Adds a user.
            </summary>
            <param name="user">The user to add.</param>
            <param name="eventId">The unique id of the event.</param>
            <param name="occurredTime">The historic date and time that the user was added.</param>
        </member>
        <member name="M:ApplicationAccess.Persistence.IAccessManagerTemporalEventPersister`4.RemoveUser(`0,System.Guid,System.DateTime)">
            <summary>
            Removes a user.
            </summary>
            <param name="user">The user to remove.</param>
            <param name="eventId">The unique id of the event.</param>
            <param name="occurredTime">The historic date and time that the user was removed.</param>
        </member>
        <member name="M:ApplicationAccess.Persistence.IAccessManagerTemporalEventPersister`4.AddGroup(`1,System.Guid,System.DateTime)">
            <summary>
            Adds a group.
            </summary>
            <param name="group">The group to add.</param>
            <param name="eventId">The unique id of the event.</param>
            <param name="occurredTime">The historic date and time that the group was added.</param>
        </member>
        <member name="M:ApplicationAccess.Persistence.IAccessManagerTemporalEventPersister`4.RemoveGroup(`1,System.Guid,System.DateTime)">
            <summary>
            Removes a group.
            </summary>
            <param name="group">The group to remove.</param>
            <param name="eventId">The unique id of the event.</param>
            <param name="occurredTime">The historic date and time that the group was removed.</param>
        </member>
        <member name="M:ApplicationAccess.Persistence.IAccessManagerTemporalEventPersister`4.AddUserToGroupMapping(`0,`1,System.Guid,System.DateTime)">
            <summary>
            Adds a mapping between the specified user and group.
            </summary>
            <param name="user">The user in the mapping.</param>
            <param name="group">The group in the mapping.</param>
            <param name="eventId">The unique id of the event.</param>
            <param name="occurredTime">The historic date and time that the user to group mapping was added.</param>
        </member>
        <member name="M:ApplicationAccess.Persistence.IAccessManagerTemporalEventPersister`4.RemoveUserToGroupMapping(`0,`1,System.Guid,System.DateTime)">
            <summary>
            Removes a mapping between the specified user and group.
            </summary>
            <param name="user">The user in the mapping.</param>
            <param name="group">The group in the mapping.</param>
            <param name="eventId">The unique id of the event.</param>
            <param name="occurredTime">The historic date and time that the user to group mapping was removed.</param>
        </member>
        <member name="M:ApplicationAccess.Persistence.IAccessManagerTemporalEventPersister`4.AddGroupToGroupMapping(`1,`1,System.Guid,System.DateTime)">
            <summary>
            Adds a mapping between the specified groups.
            </summary>
            <param name="fromGroup">The 'from' group in the mapping.</param>
            <param name="toGroup">The 'to' group in the mapping.</param>
            <param name="eventId">The unique id of the event.</param>
            <param name="occurredTime">The historic date and time that the mapping between the groups was added.</param>
        </member>
        <member name="M:ApplicationAccess.Persistence.IAccessManagerTemporalEventPersister`4.RemoveGroupToGroupMapping(`1,`1,System.Guid,System.DateTime)">
            <summary>
            Removes a mapping between the specified groups.
            </summary>
            <param name="fromGroup">The 'from' group in the mapping.</param>
            <param name="toGroup">The 'to' group in the mapping.</param>
            <param name="eventId">The unique id of the event.</param>
            <param name="occurredTime">The historic date and time that the mapping between the groups was removed.</param>
        </member>
        <member name="M:ApplicationAccess.Persistence.IAccessManagerTemporalEventPersister`4.AddUserToApplicationComponentAndAccessLevelMapping(`0,`2,`3,System.Guid,System.DateTime)">
            <summary>
            Adds a mapping between the specified user, application component, and level of access to that component.
            </summary>
            <param name="user">The user in the mapping.</param>
            <param name="applicationComponent">The application component in the mapping.</param>
            <param name="accessLevel">The level of access to the component.</param>
            <param name="eventId">The unique id of the event.</param>
            <param name="occurredTime">The historic date and time that the mapping was added.</param>
        </member>
        <member name="M:ApplicationAccess.Persistence.IAccessManagerTemporalEventPersister`4.RemoveUserToApplicationComponentAndAccessLevelMapping(`0,`2,`3,System.Guid,System.DateTime)">
            <summary>
            Removes a mapping between the specified user, application component, and level of access to that component.
            </summary>
            <param name="user">The user in the mapping.</param>
            <param name="applicationComponent">The application component in the mapping.</param>
            <param name="accessLevel">The level of access to the component.</param>
            <param name="eventId">The unique id of the event.</param>
            <param name="occurredTime">The historic date and time that the mapping was removed.</param>
        </member>
        <member name="M:ApplicationAccess.Persistence.IAccessManagerTemporalEventPersister`4.AddGroupToApplicationComponentAndAccessLevelMapping(`1,`2,`3,System.Guid,System.DateTime)">
            <summary>
            Adds a mapping between the specified group, application component, and level of access to that component.
            </summary>
            <param name="group">The group in the mapping.</param>
            <param name="applicationComponent">The application component in the mapping.</param>
            <param name="accessLevel">The level of access to the component.</param>
            <param name="eventId">The unique id of the event.</param>
            <param name="occurredTime">The historic date and time that the mapping was added.</param>
        </member>
        <member name="M:ApplicationAccess.Persistence.IAccessManagerTemporalEventPersister`4.RemoveGroupToApplicationComponentAndAccessLevelMapping(`1,`2,`3,System.Guid,System.DateTime)">
            <summary>
            Removes a mapping between the specified group, application component, and level of access to that component.
            </summary>
            <param name="group">The group in the mapping.</param>
            <param name="applicationComponent">The application component in the mapping.</param>
            <param name="accessLevel">The level of access to the component.</param>
            <param name="eventId">The unique id of the event.</param>
            <param name="occurredTime">The historic date and time that the mapping was removed.</param>
        </member>
        <member name="M:ApplicationAccess.Persistence.IAccessManagerTemporalEventPersister`4.AddEntityType(System.String,System.Guid,System.DateTime)">
            <summary>
            Adds an entity type.
            </summary>
            <param name="entityType">The entity type to add.</param>
            <param name="eventId">The unique id of the event.</param>
            <param name="occurredTime">The historic date and time that the entity type was added.</param>
        </member>
        <member name="M:ApplicationAccess.Persistence.IAccessManagerTemporalEventPersister`4.RemoveEntityType(System.String,System.Guid,System.DateTime)">
            <summary>
            Removes an entity type.
            </summary>
            <param name="entityType">The entity type to remove.</param>
            <param name="eventId">The unique id of the event.</param>
            <param name="occurredTime">The historic date and time that the entity type was removed.</param>
        </member>
        <member name="M:ApplicationAccess.Persistence.IAccessManagerTemporalEventPersister`4.AddEntity(System.String,System.String,System.Guid,System.DateTime)">
            <summary>
            Adds an entity.
            </summary>
            <param name="entityType">The type of the entity.</param>
            <param name="entity">The entity to add.</param>
            <param name="eventId">The unique id of the event.</param>
            <param name="occurredTime">The historic date and time that the entity was added.</param>
        </member>
        <member name="M:ApplicationAccess.Persistence.IAccessManagerTemporalEventPersister`4.RemoveEntity(System.String,System.String,System.Guid,System.DateTime)">
            <summary>
            Removes an entity.
            </summary>
            <param name="entityType">The type of the entity.</param>
            <param name="entity">The entity to remove.</param>
            <param name="eventId">The unique id of the event.</param>
            <param name="occurredTime">The historic date and time that the entity was removed.</param>
        </member>
        <member name="M:ApplicationAccess.Persistence.IAccessManagerTemporalEventPersister`4.AddUserToEntityMapping(`0,System.String,System.String,System.Guid,System.DateTime)">
            <summary>
            Adds a mapping between the specified user, and entity.
            </summary>
            <param name="user">The user in the mapping.</param>
            <param name="entityType">The type of the entity.</param>
            <param name="entity">The entity in the mapping.</param>
            <param name="eventId">The unique id of the event.</param>
            <param name="occurredTime">The historic date and time that the mapping was added.</param>
        </member>
        <member name="M:ApplicationAccess.Persistence.IAccessManagerTemporalEventPersister`4.RemoveUserToEntityMapping(`0,System.String,System.String,System.Guid,System.DateTime)">
            <summary>
            Removes a mapping between the specified user, and entity.
            </summary>
            <param name="user">The user in the mapping.</param>
            <param name="entityType">The type of the entity.</param>
            <param name="entity">The entity in the mapping.</param>
            <param name="eventId">The unique id of the event.</param>
            <param name="occurredTime">The historic date and time that the mapping was removed.</param>
        </member>
        <member name="M:ApplicationAccess.Persistence.IAccessManagerTemporalEventPersister`4.AddGroupToEntityMapping(`1,System.String,System.String,System.Guid,System.DateTime)">
            <summary>
            Adds a mapping between the specified group, and entity.
            </summary>
            <param name="group">The group in the mapping.</param>
            <param name="entityType">The type of the entity.</param>
            <param name="entity">The entity in the mapping.</param>
            <param name="eventId">The unique id of the event.</param>
            <param name="occurredTime">The historic date and time that the mapping was added.</param>
        </member>
        <member name="M:ApplicationAccess.Persistence.IAccessManagerTemporalEventPersister`4.RemoveGroupToEntityMapping(`1,System.String,System.String,System.Guid,System.DateTime)">
            <summary>
            Removes a mapping between the specified group, and entity.
            </summary>
            <param name="group">The group in the mapping.</param>
            <param name="entityType">The type of the entity.</param>
            <param name="entity">The entity in the mapping.</param>
            <param name="eventId">The unique id of the event.</param>
            <param name="occurredTime">The historic date and time that the mapping was removed.</param>
        </member>
        <member name="T:ApplicationAccess.Persistence.IAccessManagerTemporalEventQueryProcessor`4">
            <summary>
            Defines methods which read events that change the structure of an AccessManager class.
            </summary>
            <typeparam name="TUser">The type of users in the application managed by the AccessManager.</typeparam>
            <typeparam name="TGroup">The type of groups in the application managed by the AccessManager.</typeparam>
            <typeparam name="TComponent">The type of components in the application managed by the AccessManager.</typeparam>
            <typeparam name="TAccess">The type of levels of access which can be assigned to an application component.</typeparam>
        </member>
        <member name="M:ApplicationAccess.Persistence.IAccessManagerTemporalEventQueryProcessor`4.GetAllEventsSince(System.Guid)">
            <summary>
            Retrieves all events which occurred since the event with the specified id.
            </summary>
            <param name="eventId">The id of the event to retrieve all events since.</param>
            <returns>An ordered list of events which occurred since the specified event, and not including the specified event.  Returned in order from least recent to most recent.</returns>
            <exception cref="T:ApplicationAccess.Persistence.EventNotCachedException">The event with the specified id was not found in the cache.</exception>
        </member>
        <member name="T:ApplicationAccess.Persistence.IAccessManagerTemporalPersistentReader`4">
            <summary>
            Defines methods to read the current or historic state of an AccessManager class from persistent storage.
            </summary>
            <typeparam name="TUser">The type of users in the application managed by the AccessManager.</typeparam>
            <typeparam name="TGroup">The type of groups in the application managed by the AccessManager.</typeparam>
            <typeparam name="TComponent">The type of components in the application managed by the AccessManager.</typeparam>
            <typeparam name="TAccess">The type of levels of access which can be assigned to an application component.</typeparam>
        </member>
        <member name="M:ApplicationAccess.Persistence.IAccessManagerTemporalPersistentReader`4.Load(System.Guid,ApplicationAccess.AccessManagerBase{`0,`1,`2,`3})">
            <summary>
            Loads the access manager with state corresponding to the specified event id from persistent storage.
            </summary>
            <param name="eventId">The id of the most recent event persisted into the access manager, at the desired state to load.</param>
            <param name="accessManagerToLoadTo">The AccessManager instance to load in to.</param>
            <returns>The state of the access manager loaded.</returns>
            <remarks>
              <para>Any existing items and mappings stored in parameter 'accessManagerToLoadTo' will be cleared.</para>
              <para>The AccessManager instance is passed as a parameter rather than returned from the method, to allow loading into types derived from AccessManager aswell as AccessManager itself.</para>
            </remarks>
        </member>
        <member name="M:ApplicationAccess.Persistence.IAccessManagerTemporalPersistentReader`4.Load(System.DateTime,ApplicationAccess.AccessManagerBase{`0,`1,`2,`3})">
            <summary>
            Loads the access manager with state corresponding to the specified timestamp from persistent storage.
            </summary>
            <param name="stateTime">The time equal to or sequentially after (in terms of event sequence) the state of the access manager to load.</param>
            <param name="accessManagerToLoadTo">The AccessManager instance to load in to.</param>
            <returns>The state of the access manager loaded.</returns>
            <remarks>
              <para>Any existing items and mappings stored in parameter 'accessManagerToLoadTo' will be cleared.</para>
              <para>The AccessManager instance is passed as a parameter rather than returned from the method, to allow loading into types derived from AccessManager aswell as AccessManager itself.</para>
            </remarks>
        </member>
        <member name="T:ApplicationAccess.Persistence.IAccessManagerTemporalQueryPersistentReader`4">
            <summary>
            Defines methods which query the current and historic state/structure of an <see cref="T:ApplicationAccess.AccessManagerBase`4"/> implementation.
            </summary>
            <typeparam name="TUser">The type of users in the application managed by the AccessManager.</typeparam>
            <typeparam name="TGroup">The type of groups in the application managed by the AccessManager.</typeparam>
            <typeparam name="TComponent">The type of components in the application managed by the AccessManager.</typeparam>
            <typeparam name="TAccess">The type of levels of access which can be assigned to an application component.</typeparam>
        </member>
        <member name="T:ApplicationAccess.Persistence.ListAccessManagerTemporalBulkPersister`4">
            <summary>
            An implementation of <see cref="T:ApplicationAccess.Persistence.IAccessManagerTemporalEventBulkPersister`4"/> which writes AccessManager events to an internal list which can be retrieved later.
            </summary>
            <typeparam name="TUser">The type of users in the application managed by the AccessManager.</typeparam>
            <typeparam name="TGroup">The type of groups in the application managed by the AccessManager.</typeparam>
            <typeparam name="TComponent">The type of components in the application managed by the AccessManager.</typeparam>
            <typeparam name="TAccess">The type of levels of access which can be assigned to an application component.</typeparam>
            <remarks>This class is intended to facilitate testing.</remarks>
        </member>
        <member name="F:ApplicationAccess.Persistence.ListAccessManagerTemporalBulkPersister`4.eventsList">
            <summary>The list which holds all the written events.</summary>
        </member>
        <member name="P:ApplicationAccess.Persistence.ListAccessManagerTemporalBulkPersister`4.Events">
            <summary>
            The events written by the persister.
            </summary>
        </member>
        <member name="M:ApplicationAccess.Persistence.ListAccessManagerTemporalBulkPersister`4.#ctor">
            <summary>
            Initialises a new instance of the ApplicationAccess.Persistence.ListAccessManagerTemporalBulkPersister class.
            </summary>
        </member>
        <member name="M:ApplicationAccess.Persistence.ListAccessManagerTemporalBulkPersister`4.PersistEvents(System.Collections.Generic.IList{ApplicationAccess.Persistence.TemporalEventBufferItemBase})">
            <inheritdoc/>
        </member>
        <member name="T:ApplicationAccess.Persistence.LoopingWorkerThreadBufferFlushStrategy">
            <summary>
            A buffer flush strategy that flushes/processes the buffered events at a regular interval.
            </summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.LoopingWorkerThreadBufferFlushStrategy.flushLoopInterval">
            <summary>The time to wait (in milliseconds) between iterations of the worker thread which flushes/processes buffered events.</summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.LoopingWorkerThreadBufferFlushStrategy.flushLoopIterationCount">
            <summary>The number of iterations of the worker thread to flush/process.</summary>
        </member>
        <member name="M:ApplicationAccess.Persistence.LoopingWorkerThreadBufferFlushStrategy.#ctor(System.Int32)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Persistence.LoopingWorkerThreadBufferFlushStrategy class.
            </summary>
            <param name="flushLoopInterval">The time to wait (in milliseconds) between iterations of the worker thread which flushes/processes buffered events.</param>
        </member>
        <member name="M:ApplicationAccess.Persistence.LoopingWorkerThreadBufferFlushStrategy.#ctor(System.Int32,System.Action{ApplicationAccess.Persistence.BufferFlushingException})">
            <summary>
            Initialises a new instance of the ApplicationAccess.Persistence.LoopingWorkerThreadBufferFlushStrategy class.
            </summary>
            <param name="flushLoopInterval">The time to wait (in milliseconds) between iterations of the worker thread which flushes/processes buffered events.</param>
            <param name="flushingExceptionAction">An action to invoke if an error occurs during buffer flushing.  Accepts a single parameter which is the <see cref="T:ApplicationAccess.Persistence.BufferFlushingException"/> containing details of the error.</param>
        </member>
        <member name="M:ApplicationAccess.Persistence.LoopingWorkerThreadBufferFlushStrategy.#ctor(System.Int32,ApplicationMetrics.IMetricLogger)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Persistence.LoopingWorkerThreadBufferFlushStrategy class.
            </summary>
            <param name="flushLoopInterval">The time to wait (in milliseconds) between iterations of the worker thread which flushes/processes buffered events.</param>
            <param name="metricLogger">The logger for metrics.</param>
        </member>
        <member name="M:ApplicationAccess.Persistence.LoopingWorkerThreadBufferFlushStrategy.#ctor(System.Int32,ApplicationMetrics.IMetricLogger,System.Action{ApplicationAccess.Persistence.BufferFlushingException})">
            <summary>
            Initialises a new instance of the ApplicationAccess.Persistence.LoopingWorkerThreadBufferFlushStrategy class.
            </summary>
            <param name="flushLoopInterval">The time to wait (in milliseconds) between iterations of the worker thread which flushes/processes buffered events.</param>
            <param name="metricLogger">The logger for metrics.</param>
            <param name="flushingExceptionAction">An action to invoke if an error occurs during buffer flushing.  Accepts a single parameter which is the <see cref="T:ApplicationAccess.Persistence.BufferFlushingException"/> containing details of the error.</param>
        </member>
        <member name="M:ApplicationAccess.Persistence.LoopingWorkerThreadBufferFlushStrategy.#ctor(System.Int32,ApplicationMetrics.IMetricLogger,System.Action{ApplicationAccess.Persistence.BufferFlushingException},System.Threading.ManualResetEvent,System.Int32)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Persistence.LoopingWorkerThreadBufferFlushStrategy class.
            </summary>
            <param name="flushLoopInterval">The time to wait (in milliseconds) between iterations of the worker thread which flushes/processes buffered events.</param>
            <param name="metricLogger">The logger for metrics.</param>
            <param name="flushingExceptionAction">An action to invoke if an error occurs during buffer flushing.  Accepts a single parameter which is the <see cref="T:ApplicationAccess.Persistence.BufferFlushingException"/> containing details of the error.</param>
            <param name="workerThreadCompleteSignal">Signal that will be set when the worker thread processing is complete (for unit testing).</param>
            <param name="flushLoopIterationCount">The number of iterations of the worker thread to flush/process.</param>
            <remarks>This constructor is included to facilitate unit testing.</remarks>
        </member>
        <member name="T:ApplicationAccess.Persistence.AddUserEventBuffered">
            <summary>
            Count metric which records an 'AddUser' event buffered.
            </summary>
        </member>
        <member name="T:ApplicationAccess.Persistence.RemoveUserEventBuffered">
            <summary>
            Count metric which records a 'RemoveUser' event buffered.
            </summary>
        </member>
        <member name="T:ApplicationAccess.Persistence.UserEventsBuffered">
            <summary>
            Status metric which records the number of 'User' events currently buffered.
            </summary>
        </member>
        <member name="T:ApplicationAccess.Persistence.AddGroupEventBuffered">
            <summary>
            Count metric which records an 'AddGroup' event buffered.
            </summary>
        </member>
        <member name="T:ApplicationAccess.Persistence.RemoveGroupEventBuffered">
            <summary>
            Count metric which a records a 'RemoveGroup' event buffered.
            </summary>
        </member>
        <member name="T:ApplicationAccess.Persistence.GroupEventsBuffered">
            <summary>
            Status metric which records the number of 'Group' events currently buffered.
            </summary>
        </member>
        <member name="T:ApplicationAccess.Persistence.AddUserToGroupMappingEventBuffered">
            <summary>
            Count metric which records an 'AddUserToGroupMapping' event buffered.
            </summary>
        </member>
        <member name="T:ApplicationAccess.Persistence.RemoveUserToGroupMappingEventBuffered">
            <summary>
            Count metric which records a 'RemoveUserToGroupMapping' event buffered.
            </summary>
        </member>
        <member name="T:ApplicationAccess.Persistence.UserToGroupMappingEventsBuffered">
            <summary>
            Status metric which records the number of 'UserToGroupMapping' events currently buffered.
            </summary>
        </member>
        <member name="T:ApplicationAccess.Persistence.AddGroupToGroupMappingEventBuffered">
            <summary>
            Count metric which records an 'AddGroupToGroupMapping' event buffered.
            </summary>
        </member>
        <member name="T:ApplicationAccess.Persistence.RemoveGroupToGroupMappingEventBuffered">
            <summary>
            Count metric which records a 'RemoveGroupToGroupMapping' event buffered.
            </summary>
        </member>
        <member name="T:ApplicationAccess.Persistence.GroupToGroupMappingEventsBuffered">
            <summary>
            Status metric which records the number of 'GroupToGroupMapping' events currently buffered.
            </summary>
        </member>
        <member name="T:ApplicationAccess.Persistence.AddUserToApplicationComponentAndAccessLevelMappingEventBuffered">
            <summary>
            Count metric which records an 'AddUserToApplicationComponentAndAccessLevelMapping' event buffered.
            </summary>
        </member>
        <member name="T:ApplicationAccess.Persistence.RemoveUserToApplicationComponentAndAccessLevelMappingEventBuffered">
            <summary>
            Count metric which records a 'RemoveUserToApplicationComponentAndAccessLevelMapping' event buffered.
            </summary>
        </member>
        <member name="T:ApplicationAccess.Persistence.UserToApplicationComponentAndAccessLevelMappingEventsBuffered">
            <summary>
            Status metric which records the number of 'UserToApplicationComponentAndAccessLevelMapping' events currently buffered.
            </summary>
        </member>
        <member name="T:ApplicationAccess.Persistence.AddGroupToApplicationComponentAndAccessLevelMappingEventBuffered">
            <summary>
            Count metric which records an 'AddGroupToApplicationComponentAndAccessLevelMapping' event buffered.
            </summary>
        </member>
        <member name="T:ApplicationAccess.Persistence.RemoveGroupToApplicationComponentAndAccessLevelMappingEventBuffered">
            <summary>
            Count metric which records a 'RemoveGroupToApplicationComponentAndAccessLevelMapping' event buffered.
            </summary>
        </member>
        <member name="T:ApplicationAccess.Persistence.GroupToApplicationComponentAndAccessLevelMappingEventsBuffered">
            <summary>
            Status metric which records the number of 'GroupToApplicationComponentAndAccessLevelMapping' events currently buffered.
            </summary>
        </member>
        <member name="T:ApplicationAccess.Persistence.AddEntityTypeEventBuffered">
            <summary>
            Count metric which records an 'AddEntityType' event buffered.
            </summary>
        </member>
        <member name="T:ApplicationAccess.Persistence.RemoveEntityTypeEventBuffered">
            <summary>
            Count metric which records a 'RemoveEntityType' event buffered.
            </summary>
        </member>
        <member name="T:ApplicationAccess.Persistence.EntityTypeEventsBuffered">
            <summary>
            Status metric which records the number of 'EntityType' events currently buffered.
            </summary>
        </member>
        <member name="T:ApplicationAccess.Persistence.AddEntityEventBuffered">
            <summary>
            Count metric which records an 'AddEntity' event buffered.
            </summary>
        </member>
        <member name="T:ApplicationAccess.Persistence.RemoveEntityEventBuffered">
            <summary>
            Count metric which records a 'RemoveEntity' event buffered.
            </summary>
        </member>
        <member name="T:ApplicationAccess.Persistence.EntityEventsBuffered">
            <summary>
            Status metric which records the number of 'Entity' events currently buffered.
            </summary>
        </member>
        <member name="T:ApplicationAccess.Persistence.AddUserToEntityMappingEventBuffered">
            <summary>
            Count metric which records an 'AddUserToEntityMapping' event buffered.
            </summary>
        </member>
        <member name="T:ApplicationAccess.Persistence.RemoveUserToEntityMappingEventBuffered">
            <summary>
            Count metric which records a 'RemoveUserToEntityMapping' event buffered.
            </summary>
        </member>
        <member name="T:ApplicationAccess.Persistence.UserToEntityMappingEventsBuffered">
            <summary>
            Status metric which records the number of 'UserToEntityMapping' events currently buffered.
            </summary>
        </member>
        <member name="T:ApplicationAccess.Persistence.AddGroupToEntityMappingEventBuffered">
            <summary>
            Count metric which records an 'AddGroupToEntityMapping' event buffered.
            </summary>
        </member>
        <member name="T:ApplicationAccess.Persistence.RemoveGroupToEntityMappingEventBuffered">
            <summary>
            Count metric which records a'RemoveGroupToEntityMapping' event buffered.
            </summary>
        </member>
        <member name="T:ApplicationAccess.Persistence.GroupToEntityMappingEventsBuffered">
            <summary>
            Status metric which records the number of 'GroupToEntityMapping' events currently buffered.
            </summary>
        </member>
        <member name="T:ApplicationAccess.Persistence.BufferedEventsFlushed">
            <summary>
            Amount metric which records the number of buffered events flushed.
            </summary>
        </member>
        <member name="T:ApplicationAccess.Persistence.BufferFlushOperationTriggeredBySizeLimit">
            <summary>
            Count metric which records the a buffer flush operation triggered by the buffer size limit being reached.
            </summary>
        </member>
        <member name="T:ApplicationAccess.Persistence.BufferFlushOperationTriggeredByLoopIntervalExpiration">
            <summary>
            Count metric which records a buffer flush operation triggered by the worker thread loop interval expiring.
            </summary>
        </member>
        <member name="T:ApplicationAccess.Persistence.BufferFlushOperationCompleted">
            <summary>
            Count metric which records a buffer flush operation completed.
            </summary>
        </member>
        <member name="T:ApplicationAccess.Persistence.FlushTime">
            <summary>
            Interval metric which records the time taken to perform buffer flush operations.
            </summary>
        </member>
        <member name="T:ApplicationAccess.Persistence.EventsExcludedFromFlush">
            <summary>
            Amount metric which records the number of events excluded from flush operations (i.e. left in the buffer as they occurred after the start of the flush operation).
            </summary>
        </member>
        <member name="T:ApplicationAccess.Persistence.EventsBufferedAfterFlushStrategyStop">
            <summary>
            Amount metric which records the number of events still buffered when the Stop() method was called on the buffer flush strategy object.
            </summary>
        </member>
        <member name="T:ApplicationAccess.Persistence.BufferFlushLoopIntervalExpirationWhileFlushOperationInProgress">
            <summary>
            Count metric which records the worker thread loop interval expiring while a flush operation was already in progress.
            </summary>
            <remarks>Created specifically for class SizeLimitedLoopingWorkerThreadHybridBufferFlushStrategy which can trigger flushes from either the worker thread loop interval expiring or the buffer size limit being reached.</remarks>
        </member>
        <member name="T:ApplicationAccess.Persistence.BufferFlushLoopIntervalSleepTime">
            <summary>
            Amount metric which records the time in milliseconds the buffer flushing worker thread slept for.
            </summary>
        </member>
        <member name="T:ApplicationAccess.Persistence.SizeLimitBufferFlushTriggeredDuringLoopInterval">
            <summary>
            Count metric which records a buffer flush being triggered due to the buffer size limit being reached, whilst the buffer flushing worker thread was sleeping.
            </summary>
            <remarks>Created specifically for class SizeLimitedLoopingWorkerThreadHybridBufferFlushStrategy which can trigger flushes from either the worker thread loop interval expiring or the buffer size limit being reached.</remarks>
        </member>
        <member name="T:ApplicationAccess.Persistence.EventCached">
            <summary>
            Count metric which records an event cached.
            </summary>
        </member>
        <member name="T:ApplicationAccess.Persistence.EventsCached">
            <summary>
            Amount metric which records the number of events cached.
            </summary>
        </member>
        <member name="T:ApplicationAccess.Persistence.EventsCachingTime">
            <summary>
            Interval metric which records the time taken to cache events (i.e. to execute the PersistEvents() method).
            </summary>
        </member>
        <member name="T:ApplicationAccess.Persistence.CachedEventsRead">
            <summary>
            Amount metric which records the number of events read from the cache.
            </summary>
        </member>
        <member name="T:ApplicationAccess.Persistence.CachedEventsReadTime">
            <summary>
            Interval metric which records the time taken to read events from the cache (i.e. to execute the GetAllEventsSince() method).
            </summary>
        </member>
        <member name="T:ApplicationAccess.Persistence.EventWriteToPrimaryPersisterFailed">
            <summary>
            Count metric which records that writing events to the primary event persister failed.
            </summary>
        </member>
        <member name="T:ApplicationAccess.Persistence.EventsWrittenToBackupPersister">
            <summary>
            Amount metric which records the number of events written to the backup event persister after a failure of the primary persister.
            </summary>
        </member>
        <member name="T:ApplicationAccess.Persistence.EventsReadFromBackupPersister">
            <summary>
            Amount metric which records the number of events read from the backup event persister after a previous failure of the primary persister.
            </summary>
        </member>
        <member name="T:ApplicationAccess.Persistence.NullAccessManagerTemporalBulkPersister`4">
            <summary>
            An implementation of <see cref="T:ApplicationAccess.Persistence.IAccessManagerTemporalEventBulkPersister`4"/> which doesn't persist any events.
            </summary>
            <typeparam name="TUser">The type of users in the application managed by the AccessManager.</typeparam>
            <typeparam name="TGroup">The type of groups in the application managed by the AccessManager.</typeparam>
            <typeparam name="TComponent">The type of components in the application managed by the AccessManager.</typeparam>
            <typeparam name="TAccess">The type of levels of access which can be assigned to an application component.</typeparam>
            <remarks>Intended for use in testing... e.g. to test a ReaderNode or ReaderWriterNode in a memory-only context.</remarks>
        </member>
        <member name="M:ApplicationAccess.Persistence.NullAccessManagerTemporalBulkPersister`4.#ctor">
            <summary>
            Initialises a new instance of the ApplicationAccess.Persistence.NullAccessManagerTemporalBulkPersister class.
            </summary>
        </member>
        <member name="M:ApplicationAccess.Persistence.NullAccessManagerTemporalBulkPersister`4.PersistEvents(System.Collections.Generic.IList{ApplicationAccess.Persistence.TemporalEventBufferItemBase})">
            <inheritdoc/>
        </member>
        <member name="T:ApplicationAccess.Persistence.PersistentStorageEmptyException">
            <summary>
            The exception that is thrown when an attempt is made to load or read from persistent storage which is empty.
            </summary>
        </member>
        <member name="M:ApplicationAccess.Persistence.PersistentStorageEmptyException.#ctor(System.String)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Persistence.PersistentStorageEmptyException class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:ApplicationAccess.Persistence.PersistentStorageEmptyException.#ctor(System.String,System.Exception)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Persistence.PersistentStorageEmptyException class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:ApplicationAccess.Persistence.SizeLimitedBufferFlushStrategy">
            <summary>
            A buffer flush strategy that flushes/processes the buffers when the total number of buffered events reaches a pre-defined limit.
            </summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.SizeLimitedBufferFlushStrategy.bufferSizeLimit">
            <summary>The total size of the buffers which when reached, triggers flushing/processing of the buffer contents.</summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.SizeLimitedBufferFlushStrategy.bufferProcessSignal">
            <summary>Signal which is used to trigger the worker thread when the specified number of events are buffered.</summary>
        </member>
        <member name="P:ApplicationAccess.Persistence.SizeLimitedBufferFlushStrategy.UserEventBufferItemCount">
            <inheritdoc/>
        </member>
        <member name="P:ApplicationAccess.Persistence.SizeLimitedBufferFlushStrategy.GroupEventBufferItemCount">
            <inheritdoc/>
        </member>
        <member name="P:ApplicationAccess.Persistence.SizeLimitedBufferFlushStrategy.UserToGroupMappingEventBufferItemCount">
            <inheritdoc/>
        </member>
        <member name="P:ApplicationAccess.Persistence.SizeLimitedBufferFlushStrategy.GroupToGroupMappingEventBufferItemCount">
            <inheritdoc/>
        </member>
        <member name="P:ApplicationAccess.Persistence.SizeLimitedBufferFlushStrategy.UserToApplicationComponentAndAccessLevelMappingEventBufferItemCount">
            <inheritdoc/>
        </member>
        <member name="P:ApplicationAccess.Persistence.SizeLimitedBufferFlushStrategy.GroupToApplicationComponentAndAccessLevelMappingEventBufferItemCount">
            <inheritdoc/>
        </member>
        <member name="P:ApplicationAccess.Persistence.SizeLimitedBufferFlushStrategy.EntityTypeEventBufferItemCount">
            <inheritdoc/>
        </member>
        <member name="P:ApplicationAccess.Persistence.SizeLimitedBufferFlushStrategy.EntityEventBufferItemCount">
            <inheritdoc/>
        </member>
        <member name="P:ApplicationAccess.Persistence.SizeLimitedBufferFlushStrategy.UserToEntityMappingEventBufferItemCount">
            <inheritdoc/>
        </member>
        <member name="P:ApplicationAccess.Persistence.SizeLimitedBufferFlushStrategy.GroupToEntityMappingEventBufferItemCount">
            <inheritdoc/>
        </member>
        <member name="M:ApplicationAccess.Persistence.SizeLimitedBufferFlushStrategy.#ctor(System.Int32)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Persistence.SizeLimitedBufferFlushStrategy class.
            </summary>
            <param name="bufferSizeLimit">The total size of the buffers which when reached, triggers flushing/processing of the buffer contents.</param>
        </member>
        <member name="M:ApplicationAccess.Persistence.SizeLimitedBufferFlushStrategy.#ctor(System.Int32,System.Action{ApplicationAccess.Persistence.BufferFlushingException})">
            <summary>
            Initialises a new instance of the ApplicationAccess.Persistence.SizeLimitedBufferFlushStrategy class.
            </summary>
            <param name="bufferSizeLimit">The total size of the buffers which when reached, triggers flushing/processing of the buffer contents.</param>
            <param name="flushingExceptionAction">An action to invoke if an error occurs during buffer flushing.  Accepts a single parameter which is the <see cref="T:ApplicationAccess.Persistence.BufferFlushingException"/> containing details of the error.</param>
        </member>
        <member name="M:ApplicationAccess.Persistence.SizeLimitedBufferFlushStrategy.#ctor(System.Int32,ApplicationMetrics.IMetricLogger)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Persistence.SizeLimitedBufferFlushStrategy class.
            </summary>
            <param name="bufferSizeLimit">The total size of the buffers which when reached, triggers flushing/processing of the buffer contents.</param>
            <param name="metricLogger">The logger for metrics.</param>
        </member>
        <member name="M:ApplicationAccess.Persistence.SizeLimitedBufferFlushStrategy.#ctor(System.Int32,ApplicationMetrics.IMetricLogger,System.Action{ApplicationAccess.Persistence.BufferFlushingException})">
            <summary>
            Initialises a new instance of the ApplicationAccess.Persistence.SizeLimitedBufferFlushStrategy class.
            </summary>
            <param name="bufferSizeLimit">The total size of the buffers which when reached, triggers flushing/processing of the buffer contents.</param>
            <param name="metricLogger">The logger for metrics.</param>
            <param name="flushingExceptionAction">An action to invoke if an error occurs during buffer flushing.  Accepts a single parameter which is the <see cref="T:ApplicationAccess.Persistence.BufferFlushingException"/> containing details of the error.</param>
        </member>
        <member name="M:ApplicationAccess.Persistence.SizeLimitedBufferFlushStrategy.#ctor(System.Int32,ApplicationMetrics.IMetricLogger,System.Action{ApplicationAccess.Persistence.BufferFlushingException},System.Threading.ManualResetEvent)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Persistence.SizeLimitedBufferFlushStrategy class.
            </summary>
            <param name="bufferSizeLimit">The total size of the buffers which when reached, triggers flushing/processing of the buffer contents.</param>
            <param name="metricLogger">The logger for metrics.</param>
            <param name="flushingExceptionAction">An action to invoke if an error occurs during buffer flushing.  Accepts a single parameter which is the <see cref="T:ApplicationAccess.Persistence.BufferFlushingException"/> containing details of the error.</param>
            <param name="workerThreadCompleteSignal">Signal that will be set when the worker thread processing is complete (for unit testing).</param>
            <remarks>This constructor is included to facilitate unit testing.</remarks>
        </member>
        <member name="M:ApplicationAccess.Persistence.SizeLimitedBufferFlushStrategy.Stop">
            <summary>
            Stops the worker thread which performs buffer flushes.
            </summary>
            <exception cref="T:ApplicationAccess.Persistence.BufferFlushingException">An exception occurred on the worker thread while attempting to flush the buffers.</exception>
            <remarks>This is the same as the base class method, but with the addition of a call to bufferProcessSignal.Set()... without this, the call to JoinWorkerThread() will wait forever (since the worker thread is waiting on member 'bufferProcessSignal').</remarks>
        </member>
        <member name="M:ApplicationAccess.Persistence.SizeLimitedBufferFlushStrategy.CheckBufferLimitReached">
            <summary>
            Checks whether the size limit for the buffers has been reached, and if so signals the worker thread to process/flush the buffers.
            </summary>
        </member>
        <member name="M:ApplicationAccess.Persistence.SizeLimitedBufferFlushStrategy.Dispose(System.Boolean)">
            <summary>
            Provides a method to free unmanaged resources used by this class.
            </summary>
            <param name="disposing">Whether the method is being called as part of an explicit Dispose routine, and hence whether managed resources should also be freed.</param>
        </member>
        <member name="T:ApplicationAccess.Persistence.SizeLimitedLoopingWorkerThreadHybridBufferFlushStrategy">
            <summary>
            A buffer flush strategy that flushes/processes the buffers when either the total number of buffered events reaches a pre-defined limit or a specified looping interval expires, whichever occurs first.
            </summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.SizeLimitedLoopingWorkerThreadHybridBufferFlushStrategy.flushLoopInterval">
            <summary>The time to wait (in milliseconds) between iterations of the worker thread which flushes/processes buffered events.</summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.SizeLimitedLoopingWorkerThreadHybridBufferFlushStrategy.dateTimeProvider">
            <summary>The provider to use for the current date and time.</summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.SizeLimitedLoopingWorkerThreadHybridBufferFlushStrategy.isFlushing">
            <summary>Indicates whether the worker thread is currently flushing/processing the buffer contents.</summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.SizeLimitedLoopingWorkerThreadHybridBufferFlushStrategy.lastFlushCompleteTimeLockObject">
            <summary>Mutual exclusion lock object for member 'lastFlushCompleteTime'.</summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.SizeLimitedLoopingWorkerThreadHybridBufferFlushStrategy.lastFlushCompleteTime">
            <summary>The time at which the last buffer flushing/processing completed.</summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.SizeLimitedLoopingWorkerThreadHybridBufferFlushStrategy.loopingTriggerThread">
            <summary>Thread which loops, triggering buffer flushing/processing at specified intervals.</summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.SizeLimitedLoopingWorkerThreadHybridBufferFlushStrategy.loopingTriggerThreadLoopCompleteSignal">
            <summary>Signal that is waited on each time an iteration of the looping trigger thread completes (for unit testing).</summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.SizeLimitedLoopingWorkerThreadHybridBufferFlushStrategy.lastWaitInterval">
            <summary>The most recent interval that the looping trigger thread waited for between iterations (for unit testing).</summary>
        </member>
        <member name="M:ApplicationAccess.Persistence.SizeLimitedLoopingWorkerThreadHybridBufferFlushStrategy.#ctor(System.Int32,System.Int32,System.Action{ApplicationAccess.Persistence.BufferFlushingException})">
            <summary>
            Initialises a new instance of the ApplicationAccess.Persistence.SizeLimitedLoopingWorkerThreadHybridBufferFlushStrategy class.
            </summary>
            <param name="bufferSizeLimit">The total size of the buffers which when reached, triggers flushing/processing of the buffer contents.</param>
            <param name="flushLoopInterval">The time to wait (in milliseconds) between buffer flushing/processing iterations.</param>
            <param name="flushingExceptionAction">An action to invoke if an error occurs during buffer flushing.  Accepts a single parameter which is the <see cref="T:ApplicationAccess.Persistence.BufferFlushingException"/> containing details of the error.</param>
        </member>
        <member name="M:ApplicationAccess.Persistence.SizeLimitedLoopingWorkerThreadHybridBufferFlushStrategy.#ctor(System.Int32,System.Int32,System.Action{ApplicationAccess.Persistence.BufferFlushingException},ApplicationMetrics.IMetricLogger)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Persistence.SizeLimitedLoopingWorkerThreadHybridBufferFlushStrategy class.
            </summary>
            <param name="bufferSizeLimit">The total size of the buffers which when reached, triggers flushing/processing of the buffer contents.</param>
            <param name="flushLoopInterval">The time to wait (in milliseconds) between buffer flushing/processing iterations.</param>
            <param name="flushingExceptionAction">An action to invoke if an error occurs during buffer flushing.  Accepts a single parameter which is the <see cref="T:ApplicationAccess.Persistence.BufferFlushingException"/> containing details of the error.</param>
            <param name="metricLogger">The logger for metrics.</param>
        </member>
        <member name="M:ApplicationAccess.Persistence.SizeLimitedLoopingWorkerThreadHybridBufferFlushStrategy.#ctor(System.Int32,System.Int32,System.Action{ApplicationAccess.Persistence.BufferFlushingException},ApplicationAccess.Utilities.IDateTimeProvider)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Persistence.SizeLimitedLoopingWorkerThreadHybridBufferFlushStrategy class.
            </summary>
            <param name="bufferSizeLimit">The total size of the buffers which when reached, triggers flushing/processing of the buffer contents.</param>
            <param name="flushLoopInterval">The time to wait (in milliseconds) between buffer flushing/processing iterations.</param>
            <param name="flushingExceptionAction">An action to invoke if an error occurs during buffer flushing.  Accepts a single parameter which is the <see cref="T:ApplicationAccess.Persistence.BufferFlushingException"/> containing details of the error.</param>
            <param name="dateTimeProvider">The provider to use for the current date and time.</param>
        </member>
        <member name="M:ApplicationAccess.Persistence.SizeLimitedLoopingWorkerThreadHybridBufferFlushStrategy.#ctor(System.Int32,System.Int32,System.Action{ApplicationAccess.Persistence.BufferFlushingException},ApplicationAccess.Utilities.IDateTimeProvider,ApplicationMetrics.IMetricLogger)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Persistence.SizeLimitedLoopingWorkerThreadHybridBufferFlushStrategy class.
            </summary>
            <param name="bufferSizeLimit">The total size of the buffers which when reached, triggers flushing/processing of the buffer contents.</param>
            <param name="flushLoopInterval">The time to wait (in milliseconds) between buffer flushing/processing iterations.</param>
            <param name="flushingExceptionAction">An action to invoke if an error occurs during buffer flushing.  Accepts a single parameter which is the <see cref="T:ApplicationAccess.Persistence.BufferFlushingException"/> containing details of the error.</param>
            <param name="dateTimeProvider">The provider to use for the current date and time.</param>
            <param name="metricLogger">The logger for metrics.</param>
        </member>
        <member name="M:ApplicationAccess.Persistence.SizeLimitedLoopingWorkerThreadHybridBufferFlushStrategy.#ctor(System.Int32,System.Int32,ApplicationAccess.Utilities.IDateTimeProvider,System.Threading.AutoResetEvent,System.Threading.ManualResetEvent)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Persistence.SizeLimitedLoopingWorkerThreadHybridBufferFlushStrategy class.
            </summary>
            <param name="bufferSizeLimit">The total size of the buffers which when reached, triggers flushing/processing of the buffer contents.</param>
            <param name="flushLoopInterval">The time to wait (in milliseconds) between buffer flushing/processing iterations.</param>
            <param name="dateTimeProvider">The provider to use for the current date and time.</param>
            <param name="loopingTriggerThreadLoopCompleteSignal">Signal that is waited on each time an iteration of the looping trigger thread completes (for unit testing).</param>
            <param name="workerThreadCompleteSignal">Signal that will be set when the worker thread processing is complete (for unit testing).</param>
            <remarks>This constructor is included to facilitate unit testing.</remarks>
        </member>
        <member name="M:ApplicationAccess.Persistence.SizeLimitedLoopingWorkerThreadHybridBufferFlushStrategy.Start">
            <summary>
            Starts the worker thread which performs buffer flushes.
            </summary>
        </member>
        <member name="M:ApplicationAccess.Persistence.SizeLimitedLoopingWorkerThreadHybridBufferFlushStrategy.Stop">
            <summary>
            Stops the worker thread which performs buffer flushes.
            </summary>
        </member>
        <member name="M:ApplicationAccess.Persistence.SizeLimitedLoopingWorkerThreadHybridBufferFlushStrategy.CheckBufferLimitReached">
            <summary>
            Checks whether the size limit for the buffers has been reached, and if so signals the worker thread to process/flush the buffers.
            </summary>
        </member>
        <member name="M:ApplicationAccess.Persistence.SizeLimitedLoopingWorkerThreadHybridBufferFlushStrategy.Dispose(System.Boolean)">
            <summary>
            Provides a method to free unmanaged resources used by this class.
            </summary>
            <param name="disposing">Whether the method is being called as part of an explicit Dispose routine, and hence whether managed resources should also be freed.</param>
        </member>
        <member name="T:ApplicationAccess.Persistence.TemporalEventBufferItemBase">
            <summary>
            Base class for container classes which represent a historic change in the structure of an AccessManager implementation, and are stored in an AccessManager event buffer or cache.
            </summary>
            <remarks>Classes deriving from this like <see cref="T:ApplicationAccess.Persistence.UserEventBufferItem`1"/> remove 'Temporal' from their name for brevity, since currently only the temporal version of the class is used for buffering and caching.</remarks>
        </member>
        <member name="F:ApplicationAccess.Persistence.TemporalEventBufferItemBase.occurredTime">
            <summary>The time that the event originally occurred.</summary>
        </member>
        <member name="P:ApplicationAccess.Persistence.TemporalEventBufferItemBase.OccurredTime">
            <summary>
            The time that the event originally occurred.
            </summary>
        </member>
        <member name="M:ApplicationAccess.Persistence.TemporalEventBufferItemBase.#ctor(System.Guid,ApplicationAccess.Persistence.EventAction,System.DateTime)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Persistence.TemporalEventBufferItemBase class.
            </summary>
            <param name="eventId">A unique id for the event.</param>
            <param name="eventAction">The action of the event.</param>
            <param name="occurredTime">The time that the event originally occurred.</param>
        </member>
        <member name="T:ApplicationAccess.Persistence.UserEventBufferItem`1">
            <summary>
            Container class for a buffered/cached user event.
            </summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.UserEventBufferItem`1.user">
            <summary>The user the event occured for.</summary>
        </member>
        <member name="P:ApplicationAccess.Persistence.UserEventBufferItem`1.User">
            <summary>
            The user the event occured for.
            </summary>
        </member>
        <member name="M:ApplicationAccess.Persistence.UserEventBufferItem`1.#ctor(System.Guid,ApplicationAccess.Persistence.EventAction,`0,System.DateTime)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Persistence.UserEventBufferItem class.
            </summary>
            <param name="eventId">A unique id for the event.</param>
            <param name="eventAction">The action of the event.</param>
            <param name="user">The user the event occured for.</param>
            <param name="occurredTime">The time that the event originally occurred.</param>
        </member>
        <member name="T:ApplicationAccess.Persistence.UserToApplicationComponentAndAccessLevelMappingEventBufferItem`3">
            <summary>
            Container class for a buffered/cached user to application component and access level mapping event.
            </summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.UserToApplicationComponentAndAccessLevelMappingEventBufferItem`3.user">
            <summary>The user in the mapping.</summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.UserToApplicationComponentAndAccessLevelMappingEventBufferItem`3.applicationComponent">
            <summary>The application component in the mapping.</summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.UserToApplicationComponentAndAccessLevelMappingEventBufferItem`3.accessLevel">
            <summary>The access level in the mapping.</summary>
        </member>
        <member name="P:ApplicationAccess.Persistence.UserToApplicationComponentAndAccessLevelMappingEventBufferItem`3.User">
            <summary>
            The user in the mapping.
            </summary>
        </member>
        <member name="P:ApplicationAccess.Persistence.UserToApplicationComponentAndAccessLevelMappingEventBufferItem`3.ApplicationComponent">
            <summary>
            The application component in the mapping.
            </summary>
        </member>
        <member name="P:ApplicationAccess.Persistence.UserToApplicationComponentAndAccessLevelMappingEventBufferItem`3.AccessLevel">
            <summary>
            The access level in the mapping.
            </summary>
        </member>
        <member name="M:ApplicationAccess.Persistence.UserToApplicationComponentAndAccessLevelMappingEventBufferItem`3.#ctor(System.Guid,ApplicationAccess.Persistence.EventAction,`0,`1,`2,System.DateTime)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Persistence.UserToApplicationComponentAndAccessLevelMappingEventBufferItem class.
            </summary>
            <param name="eventId">A unique id for the event.</param>
            <param name="eventAction">The action of the event.</param>
            <param name="user">The user in the mapping.</param>
            <param name="applicationComponent">The application component in the mapping.</param>
            <param name="accessLevel">The access level in the mapping.</param>
            <param name="occurredTime">The time that the event originally occurred.</param>
        </member>
        <member name="T:ApplicationAccess.Persistence.UserToEntityMappingEventBufferItem`1">
            <summary>
            Container class for a buffered/cached user to entity mapping event.
            </summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.UserToEntityMappingEventBufferItem`1.user">
            <summary>The user the event occured for.</summary>
        </member>
        <member name="P:ApplicationAccess.Persistence.UserToEntityMappingEventBufferItem`1.User">
            <summary>
            The user the event occured for.
            </summary>
        </member>
        <member name="M:ApplicationAccess.Persistence.UserToEntityMappingEventBufferItem`1.#ctor(System.Guid,ApplicationAccess.Persistence.EventAction,`0,System.String,System.String,System.DateTime)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Persistence.UserToEntityMappingEventBufferItem class.
            </summary>
            <param name="eventId">A unique id for the event.</param>
            <param name="eventAction">The action of the event.</param>
            <param name="user">The user the event occured for.</param>
            <param name="entityType">The type of the entity the event occured for.</param>
            <param name="entity">The entity the event occured for.</param>
            <param name="occurredTime">The time that the event originally occurred.</param>
        </member>
        <member name="T:ApplicationAccess.Persistence.UserToGroupMappingEventBufferItem`2">
            <summary> 
            Container class for a buffered/cached user to group mapping event.
            </summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.UserToGroupMappingEventBufferItem`2.user">
            <summary>The user in the mapping.</summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.UserToGroupMappingEventBufferItem`2.group">
            <summary>The group in the mapping.</summary>
        </member>
        <member name="P:ApplicationAccess.Persistence.UserToGroupMappingEventBufferItem`2.User">
            <summary>
            The user in the mapping.
            </summary>
        </member>
        <member name="P:ApplicationAccess.Persistence.UserToGroupMappingEventBufferItem`2.Group">
            <summary>
            The group in the mapping.
            </summary>
        </member>
        <member name="M:ApplicationAccess.Persistence.UserToGroupMappingEventBufferItem`2.#ctor(System.Guid,ApplicationAccess.Persistence.EventAction,`0,`1,System.DateTime)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Persistence.UserToGroupMappingEventBufferItem class.
            </summary>
            <param name="eventId">A unique id for the event.</param>
            <param name="eventAction">The action of the event.</param>
            <param name="user">The user in the mapping.</param>
            <param name="group">The group in the mapping.</param>
            <param name="occurredTime">The time that the event originally occurred.</param>
        </member>
        <member name="T:ApplicationAccess.Persistence.WorkerThreadBufferFlushStrategyBase">
            <summary>
            Provides common base functionality for implementations of IAccessManagerEventBufferFlushStrategy which use a worker thread to perform buffer flushes.
            </summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.WorkerThreadBufferFlushStrategyBase.userEventsBuffered">
            <summary>The number of user events currently buffered</summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.WorkerThreadBufferFlushStrategyBase.groupEventsBuffered">
            <summary>The number of group events currently buffered</summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.WorkerThreadBufferFlushStrategyBase.userToGroupMappingEventsBuffered">
            <summary>The number of user to group mapping events currently buffered</summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.WorkerThreadBufferFlushStrategyBase.groupToGroupMappingEventsBuffered">
            <summary>The number of group to group mapping events currently buffered</summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.WorkerThreadBufferFlushStrategyBase.userToApplicationComponentAndAccessLevelMappingEventsBuffered">
            <summary>The number of user to application component and access level mapping events currently buffered</summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.WorkerThreadBufferFlushStrategyBase.groupToApplicationComponentAndAccessLevelMappingEventsBuffered">
            <summary>The number of group to application component and access level mapping events currently buffered</summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.WorkerThreadBufferFlushStrategyBase.entityTypeEventsBuffered">
            <summary>The number of entity type events currently buffered</summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.WorkerThreadBufferFlushStrategyBase.entityEventsBuffered">
            <summary>The number of entity events currently buffered</summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.WorkerThreadBufferFlushStrategyBase.userToEntityMappingEventsBuffered">
            <summary>The number of user to entity mapping events currently buffered</summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.WorkerThreadBufferFlushStrategyBase.groupToEntityMappingEventsBuffered">
            <summary>The number of group to entity mapping events currently buffered</summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.WorkerThreadBufferFlushStrategyBase.metricLogger">
            <summary>The logger for metrics.</summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.WorkerThreadBufferFlushStrategyBase.bufferFlushingWorkerThread">
            <summary>Worker thread which implements the strategy to flush/process the contents of the buffers.</summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.WorkerThreadBufferFlushStrategyBase.flushingExceptionAction">
            <summary>An action to invoke if an error occurs during buffer flushing.  Accepts a single parameter which is the <see cref="T:ApplicationAccess.Persistence.BufferFlushingException"/> containing details of the error.</summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.WorkerThreadBufferFlushStrategyBase.stopMethodCalled">
            <summary>Whether request to stop the worker thread has been received via the Stop() method.</summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.WorkerThreadBufferFlushStrategyBase.workerThreadCompleteSignal">
            <summary>Signal that is set after the worker thread completes, either via explicit stopping or an exception occurring (for unit testing).</summary>
        </member>
        <member name="F:ApplicationAccess.Persistence.WorkerThreadBufferFlushStrategyBase.disposed">
            <summary>Indicates whether the object has been disposed.</summary>
        </member>
        <member name="E:ApplicationAccess.Persistence.WorkerThreadBufferFlushStrategyBase.BufferFlushed">
            <inheritdoc/>
        </member>
        <member name="P:ApplicationAccess.Persistence.WorkerThreadBufferFlushStrategyBase.UserEventBufferItemCount">
            <inheritdoc/>
            <exception cref="T:ApplicationAccess.Persistence.BufferFlushingException">An exception occurred on the worker thread while attempting to flush the buffers.</exception>
        </member>
        <member name="P:ApplicationAccess.Persistence.WorkerThreadBufferFlushStrategyBase.GroupEventBufferItemCount">
            <inheritdoc/>
            <exception cref="T:ApplicationAccess.Persistence.BufferFlushingException">An exception occurred on the worker thread while attempting to flush the buffers.</exception>
        </member>
        <member name="P:ApplicationAccess.Persistence.WorkerThreadBufferFlushStrategyBase.UserToGroupMappingEventBufferItemCount">
            <inheritdoc/>
            <exception cref="T:ApplicationAccess.Persistence.BufferFlushingException">An exception occurred on the worker thread while attempting to flush the buffers.</exception>
        </member>
        <member name="P:ApplicationAccess.Persistence.WorkerThreadBufferFlushStrategyBase.GroupToGroupMappingEventBufferItemCount">
            <inheritdoc/>
            <exception cref="T:ApplicationAccess.Persistence.BufferFlushingException">An exception occurred on the worker thread while attempting to flush the buffers.</exception>
        </member>
        <member name="P:ApplicationAccess.Persistence.WorkerThreadBufferFlushStrategyBase.UserToApplicationComponentAndAccessLevelMappingEventBufferItemCount">
            <inheritdoc/>
            <exception cref="T:ApplicationAccess.Persistence.BufferFlushingException">An exception occurred on the worker thread while attempting to flush the buffers.</exception>
        </member>
        <member name="P:ApplicationAccess.Persistence.WorkerThreadBufferFlushStrategyBase.GroupToApplicationComponentAndAccessLevelMappingEventBufferItemCount">
            <inheritdoc/>
            <exception cref="T:ApplicationAccess.Persistence.BufferFlushingException">An exception occurred on the worker thread while attempting to flush the buffers.</exception>
        </member>
        <member name="P:ApplicationAccess.Persistence.WorkerThreadBufferFlushStrategyBase.EntityTypeEventBufferItemCount">
            <inheritdoc/>
            <exception cref="T:ApplicationAccess.Persistence.BufferFlushingException">An exception occurred on the worker thread while attempting to flush the buffers.</exception>
        </member>
        <member name="P:ApplicationAccess.Persistence.WorkerThreadBufferFlushStrategyBase.EntityEventBufferItemCount">
            <inheritdoc/>
            <exception cref="T:ApplicationAccess.Persistence.BufferFlushingException">An exception occurred on the worker thread while attempting to flush the buffers.</exception>
        </member>
        <member name="P:ApplicationAccess.Persistence.WorkerThreadBufferFlushStrategyBase.UserToEntityMappingEventBufferItemCount">
            <inheritdoc/>
            <exception cref="T:ApplicationAccess.Persistence.BufferFlushingException">An exception occurred on the worker thread while attempting to flush the buffers.</exception>
        </member>
        <member name="P:ApplicationAccess.Persistence.WorkerThreadBufferFlushStrategyBase.GroupToEntityMappingEventBufferItemCount">
            <inheritdoc/>
            <exception cref="T:ApplicationAccess.Persistence.BufferFlushingException">An exception occurred on the worker thread while attempting to flush the buffers.</exception>
        </member>
        <member name="M:ApplicationAccess.Persistence.WorkerThreadBufferFlushStrategyBase.#ctor">
            <summary>
            Initialises a new instance of the ApplicationAccess.Persistence.WorkerThreadBufferFlushStrategyBase class.
            </summary>
        </member>
        <member name="M:ApplicationAccess.Persistence.WorkerThreadBufferFlushStrategyBase.#ctor(System.Action{ApplicationAccess.Persistence.BufferFlushingException})">
            <summary>
            Initialises a new instance of the ApplicationAccess.Persistence.WorkerThreadBufferFlushStrategyBase class.
            </summary>
            <param name="flushingExceptionAction">An action to invoke if an error occurs during buffer flushing.  Accepts a single parameter which is the <see cref="T:ApplicationAccess.Persistence.BufferFlushingException"/> containing details of the error.</param>
        </member>
        <member name="M:ApplicationAccess.Persistence.WorkerThreadBufferFlushStrategyBase.#ctor(ApplicationMetrics.IMetricLogger)">
            <summary>
            Initialises a new instance of the ApplicationAccess.Persistence.WorkerThreadBufferFlushStrategyBase class.
            </summary>
            <param name="metricLogger">The logger for metrics.</param>
        </member>
        <member name="M:ApplicationAccess.Persistence.WorkerThreadBufferFlushStrategyBase.#ctor(ApplicationMetrics.IMetricLogger,System.Action{ApplicationAccess.Persistence.BufferFlushingException})">
            <summary>
            Initialises a new instance of the ApplicationAccess.Persistence.WorkerThreadBufferFlushStrategyBase class.
            </summary>
            <param name="metricLogger">The logger for metrics.</param>
            <param name="flushingExceptionAction">An action to invoke if an error occurs during buffer flushing.  Accepts a single parameter which is the <see cref="T:ApplicationAccess.Persistence.BufferFlushingException"/> containing details of the error.</param>
        </member>
        <member name="M:ApplicationAccess.Persistence.WorkerThreadBufferFlushStrategyBase.Start">
            <summary>
            Starts the worker thread which performs buffer flushes.
            </summary>
        </member>
        <member name="M:ApplicationAccess.Persistence.WorkerThreadBufferFlushStrategyBase.Stop">
            <summary>
            Stops the worker thread which performs buffer flushes.
            </summary>
            <exception cref="T:ApplicationAccess.Persistence.BufferFlushingException">An exception occurred on the worker thread while attempting to flush the buffers.</exception>
        </member>
        <member name="P:ApplicationAccess.Persistence.WorkerThreadBufferFlushStrategyBase.BufferFlushingAction">
            <summary>
            The action to execute on the worker thread that implements the buffer flush strategy.
            </summary>
        </member>
        <member name="M:ApplicationAccess.Persistence.WorkerThreadBufferFlushStrategyBase.JoinWorkerThread">
            <summary>
            Calls Join() on the worker thread, waiting until it terminates.
            </summary>
        </member>
        <member name="P:ApplicationAccess.Persistence.WorkerThreadBufferFlushStrategyBase.TotalEventsBuffered">
            <summary>
            The total number of events currently stored across all buffers.
            </summary>
            <remarks>Note that the counter members accessed in this property may be accessed by multiple threads (i.e. the worker thread in member bufferFlushingWorkerThread and the client code in the main thread).  This property should only be read from methods which have locks around the queues in the corresponding <see cref="T:ApplicationAccess.Persistence.AccessManagerTemporalEventPersisterBuffer`4"/> class (e.g. overrides of the virtual setters defined in this class, which are called from the AddUser(), AddGroup(), etc... methods in the AccessManagerTemporalEventPersisterBuffer class).</remarks>
        </member>
        <member name="M:ApplicationAccess.Persistence.WorkerThreadBufferFlushStrategyBase.OnBufferFlushed(System.EventArgs)">
            <summary>
            Raises the BufferFlushed event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:ApplicationAccess.Persistence.WorkerThreadBufferFlushStrategyBase.ThrowExceptionIfParameterLessThanZero(System.String,System.Int32)">
            <summary>
            Throws an ArgumentOutOfRangeException if the value of the specified integer parameter is less than 0.
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <param name="parameterValue">The value of the parameter.</param>
        </member>
        <member name="M:ApplicationAccess.Persistence.WorkerThreadBufferFlushStrategyBase.Dispose">
            <summary>
            Releases the unmanaged resources used by the WorkerThreadBufferFlushStrategyBase.
            </summary>
        </member>
        <member name="M:ApplicationAccess.Persistence.WorkerThreadBufferFlushStrategyBase.Dispose(System.Boolean)">
            <summary>
            Provides a method to free unmanaged resources used by this class.
            </summary>
            <param name="disposing">Whether the method is being called as part of an explicit Dispose routine, and hence whether managed resources should also be freed.</param>
        </member>
    </members>
</doc>
